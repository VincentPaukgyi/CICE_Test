#pragma checksum "D:\2C2P\Alternative-Payment-Network\BIS\BIS\App_Code\Service.cs" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "60D792150F9A16F24E5193636445AABB378FD594"

#line 1 "D:\2C2P\Alternative-Payment-Network\BIS\BIS\App_Code\Service.cs"
using log4net;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Security.Cryptography;
using System.ServiceModel;
using System.ServiceModel.Web;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;
using System.Web.Script.Serialization;
using System.Threading;
using System.Net;
using System.Xml;
using System.Xml.Serialization;
using System.Threading.Tasks;
using System.Configuration;

public class Service : IService
{
    public static OAuthToken Token = new OAuthToken();
    public class OAuthToken
    {
        public string Token { get; set; }
        public DateTime GeneratedTime { get; set; }
    }

    public static PgOAuthToken PgToken = new PgOAuthToken();
    public class PgOAuthToken
    {
        public string Token { get; set; }
        public DateTime GeneratedTime { get; set; }
    }

    public string GetData(int value)
    {
        return string.Format("You entered: {0}", value);
    }

    private static bool IsTokenNullOrExpire(OAuthToken oAuthToken)
    {
        if (string.IsNullOrEmpty(oAuthToken.Token))
        {
            return true;
        }
        else
        {
            TimeSpan diff = DateTime.Now.Subtract(Token.GeneratedTime);
            string tokenTimeOut = ConfigurationManager.AppSettings["TokenTimeout"].ToString();
            int tokentimeout = int.Parse(tokenTimeOut);
            if (diff.Minutes >= tokentimeout)
            {
                return true;
            }
        }
        return false;
    }

    public CompositeType GetDataUsingDataContract(CompositeType composite)
    {
        if (composite == null)
        {
            throw new ArgumentNullException("composite");
        }
        if (composite.BoolValue)
        {
            composite.StringValue += "Suffix";
        }
        return composite;
    }

    private static OAuthToken GetOAuthToken()
    {
        OAuthToken token = new OAuthToken();
        try
        {

            token.Token = Utils.oAuthRequest();
            token.GeneratedTime = DateTime.Now;
            Token = token;

        }
        catch (Exception e)
        {
            token.Token = Utils.oAuthRequest();
            token.GeneratedTime = DateTime.Now;
            Token = token;
        }
        return token;
    }

    private static PgOAuthToken GetPGOAuthToken()
    {
        PgOAuthToken token = new PgOAuthToken();
        try
        {

            token.Token = Utils.pgOAuthRequest();
            token.GeneratedTime = DateTime.Now;
            PgToken = token;

        }
        catch (Exception e)
        {
            token.Token = Utils.pgOAuthRequest();
            token.GeneratedTime = DateTime.Now;
            PgToken = token;
            writeLog("Error in Getting PGOAuthToken : " + e.ToString());
        }



        return token;
    }

    #region <-- Log -->
    private static ILog log = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);
    private static void writeLog(string msg)
    {
        string maskSensitiveString = maskSensitiveData(msg);
        if (!string.IsNullOrEmpty(maskSensitiveString))
        {
            Logger.writeLog(maskSensitiveString, ref log);
        }
        else
        {
            Logger.writeLog(msg, ref log);
        }
    }
    public static string maskSensitiveData(string value)
    {
        string regularExpressionPattern = @"<Password>(.*?)<\/Password>";
        Regex regex = new Regex(regularExpressionPattern, RegexOptions.Singleline);
        MatchCollection collection = regex.Matches(value);
        if (collection.Count > 0)
        {
            Match m = collection[0];
            var stripped = m.Groups[1].Value;
            if (!string.IsNullOrEmpty(stripped))
            {
                return value.Replace(stripped, "XXXX-XXXX-XXXX");
            }

        }
        return "";
    }

    #endregion

    #region <-- Variable -->
    private static A2AAPIWCF.ServiceClient _agentWCF = new A2AAPIWCF.ServiceClient();
    private static fraudWs.Service1Client _fraudWCF = new fraudWs.Service1Client();
    private int agentID = 0;
    private string agentCode = string.Empty;
    private string agentName = string.Empty;
    private string branchCode = string.Empty;
    private string branchName = string.Empty;

    private string agentUserUniqueID = string.Empty;
    //private string taxid = string.Empty;
    private string serviceFlatFee = string.Empty;
    private string servicePercent = string.Empty;

    private string serviceFee = string.Empty;
    private double serviceFeeDbl = 0;

    private string mobileNo = "";
    private string agentFlatFee = string.Empty;
    private string agentPercent = string.Empty;

    private string agentFee = string.Empty;
    private double agentFeeDbl = 0;
    private double agentAmount = 0;

    private string oneStopFlatFee = string.Empty;
    private string oneStopPercent = string.Empty;

    private string oneStopFee = string.Empty;
    private double oneStopFeeDbl = 0;

    private string billerID = string.Empty;
    private string billerStatusID = string.Empty;
    private string billerName = string.Empty;
    private string billerLogo = string.Empty;
    private string errMsg = string.Empty;

    double avalcredit = 0;
    string creditlimit = string.Empty;
    string creditterm = string.Empty;
    private string credittemrstart = string.Empty;
    private string creditResetAgentBranchID = string.Empty;
    private string isAutoCreditReset = string.Empty;
    private string isSendCreditResetEmail = "N";
    private DateTime dtNow = DateTime.Now;
    private DateTime dtStart = new DateTime();//from db
    private DateTime dtStartplusCreditterm = new DateTime();
    string smsStatus = "N";
    private string DeviceToken = string.Empty;
    private string DeviceInfo = string.Empty;
    // string MyKyatUserName = ConfigurationManager.AppSettings["MyKyatUserName"].ToString();

    //  string MyKyatPassword = ConfigurationManager.AppSettings["MyKyatPassword"].ToString();

    private string totalServiceFee = "0";
    string Duration;
    #endregion

    #region <-- Registration 04-Jan-2016 Tz -->
    public string RegisterReq(string reqXml)
    {
        int agnid;
        string code;
        string desp;
        string agnID = string.Empty;
        string newagncode = string.Empty;
        string branchcode = string.Empty;
        string randompass = string.Empty;
        string userid = string.Empty;
        string errmsg = string.Empty;
        StringBuilder sb = new StringBuilder();
        Hashtable ht = Utils.getHTableFromXML(reqXml);
        registrationinfo reginfo = new registrationinfo();
        if (!IsValadateRegisterReq(ht, out code, out desp, out reginfo))
        {
            return Utils.getErrorRes(code, desp);
        }
        else
        {
            errmsg = "";

            if (createAgent(out newagncode, out agnid, out errmsg, reginfo))//Agent Creation
            {
                writeLog("$$$$$$$$Creating Agent OK Agent ID:" + agnid + "Agent Code:" + newagncode + "$$$$$$$$$$$$$$$$$$$$$$$");
                agentID = agnid;

                writeLog("Start Create Branch");
                if (createBranch(reginfo, agnid.ToString(), out branchcode))//Agent Branch Creation
                {
                    writeLog("$$$$$$$$$$$$$Creating Agent Branch OK BranchCode:" + branchcode + "$$$$$$$$$$$$$");
                    writeLog("Start Creat Agent User");

                    if (createAgentUser(agnid, branchcode, out  randompass, out  userid, out errmsg, reginfo))//Agent User Creation
                    {
                        writeLog("$$$$$$$$$$$$Creating Agent User OK agentid:" + agnid + "BranchCode:" + branchcode + "userid:" + userid + "$$$$$$$$$$$$$$$$");
                        code = "00";
                        desp = ConfigurationManager.AppSettings["ChannelCodeForSMS"].ToString() + " registration is successfully done. Please check SMS at " + reginfo.mboileno + "  for your login information.";
                        sb.Append("<RegisterRes>");
                        sb.Append("<Version>1.0</Version>");
                        sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                        sb.Append("<ResCode>" + code + "</ResCode>");
                        sb.Append("<ResDesc>" + desp + "</ResDesc>");
                        sb.Append("</RegisterRes>");
                        #region <-- Send SMS start -->
                        string sendername = reginfo.mboileno.StartsWith("099") || (reginfo.mboileno.StartsWith("097") && !reginfo.mboileno.StartsWith("0973")) ? "936600004" : ConfigurationManager.AppSettings["senderName"].ToString();//if mobile number is Orredoo Sender name Must Be 936600004 
                        SMSHelper smsH = new SMSHelper();
                        smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                        //TEST
                        //randompass = "P.a.s.s.w.o.r.d";
                        string smsmsg = smsH.getsuccessregsmsmessagebody(userid, randompass);

                        string result = string.Empty;
                        try
                        {
                            result = smsWcf.AGDSendSms(reginfo.mboileno, smsmsg, sendername);
                        }
                        catch (Exception ex)
                        {
                            writeLog("Exception occur when send smsAGD" + ex.Message);
                        }

                        if (result.Trim() == "Success")
                        {
                            writeLog("Send SMS With AGD OK");
                        }
                        else
                        {
                            writeLog("Send SMS With AGD Not OK Try With Myantalk SMS");

                            try
                            {
                                if (!smsWcf.sendSMS(reginfo.mboileno, smsmsg, sendername, "EN"))
                                {
                                    writeLog("Send SMS with MyanTalk Not OK");
                                }
                                else
                                {
                                    writeLog("Send SMS with MyanTalk  OK");
                                }
                            }
                            catch (Exception ex)
                            {
                                writeLog("exception error occur when send myantalksms" + ex.Message);
                            }
                        }
                        #endregion send sms end
                        #region COMMENTED EMAIL CODES

                        //writeLog("Email=" + reginfo.email);
                        //try
                        //{
                        //    if (!string.IsNullOrEmpty(reginfo.email))
                        //    {
                        //        if (emailtest(userid, randompass, reginfo.Name, reginfo.email, out errmsg))
                        //        {
                        //            writeLog("Send Email Successful");
                        //        }
                        //    }
                        //}
                        //catch (Exception ex)
                        //{
                        //    writeLog("Exception occur when send email" + ex.Message);
                        //}

                        #endregion
                        writeLog("Register Response XML:" + sb.ToString());
                        //  return sb.ToString();
                    }
                    else
                    {
                        code = "08";
                        desp = "DB Error";
                        return Utils.getErrorRes(code, desp);
                    }
                }
                else
                {
                    code = "08";
                    desp = "DB Error";
                    sb.Append("<Error>");
                    sb.Append("<Version>1.0</Version>");
                    sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                    sb.Append("<ResCode>" + code + "</ResCode>");
                    sb.Append("<ResDesc>" + desp + "</ResDesc>");
                    sb.Append("</Error>");
                    try
                    {
                        writeLog("Error In Create Branch ErrMsg:" + errmsg);
                    }
                    catch
                    {

                    }
                }
            }
            else
            {
                code = "08";
                desp = "DB Error";
                sb.Append("<Error>");
                sb.Append("<Version>1.0</Version>");
                sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                sb.Append("<ResCode>" + code + "</ResCode>");
                sb.Append("<ResDesc>" + desp + "</ResDesc>");
                sb.Append("</Error>");
                try
                {
                    writeLog("Error In Create AGENT ErrMsg:" + errmsg);
                }
                catch
                {
                }
            }
        }
        writeLog("Reg Response" + sb.ToString());
        return sb.ToString();
        //        <RegisterReq>
        //<Version>1.0</Version>
        //<TimeStamp>yyyyMMddhhmmssffff</TimeStamp>
        //<MessageID>768866yyhhhhhh</MessageID>
        //<Name>xxxxxxxxxx</Name>
        //<DateOfBirth>xxxxxxxxxx</DateOfBirth>
        //<Gender>xxxxxxxxxx</Gender>
        //<ShopName>xxxxxxxxxx</ShopName>
        //<ShopType></ShopType>
        //<Email>xxxxxxxxxx</Email>
        //<MobileNo>xxxxxxxxxx</MobileNo>
        //<Address>xxxxxxxxxx</Address>
        //<NRCNo>xxxxxxxxxx</NRCNo>
        //<SecretWord>xxxxxxxxxx</SecretWord>
        //<StateDivision>xxxxxxxxxx</StateDivision>
        //<Township>xxxxxxxxxx</Township>
        //</RegisterReq>

    }

    #region <-- Registration function -->

    bool IsValadateRegisterReq(Hashtable ht, out string code, out string desp, out registrationinfo reginfo)// bool IsValidateRegisterReq(Hashtable ht, out string code, out string desp, out string name, out string shopname, out string mobileno, out string email, out string addr, out string shoptype, out string DOB, out string gender,out string secretword,out string NRC,out string StateDivision ,out string Township)
    {
        reginfo = new registrationinfo();
        code = "00";
        desp = "Success";

        string version = string.Empty;
        string ts = string.Empty;
        string messageID = string.Empty;
        //name = string.Empty;
        //shopname = string.Empty;
        //email = string.Empty;
        //mobileno = string.Empty;
        //addr = string.Empty;
        //shoptype = string.Empty;
        //DOB = string.Empty;

        //gender = string.Empty;
        //secretword = string.Empty;
        //NRC = string.Empty;
        //StateDivision = string.Empty;
        //Township = string.Empty;
        //        <RegisterReq>
        //<Version>1.0</Version>
        //<TimeStamp>yyyyMMddhhmmssffff</TimeStamp>
        //<MessageID>768866yyhhhhhh</MessageID>
        //<Name>xxxxxxxxxx</Name>
        //<DateOfBirth>xxxxxxxxxx</DateOfBirth>
        //<Gender>xxxxxxxxxx</Gender>
        //<ShopName>xxxxxxxxxx</ShopName>
        //<ShopType></ShopType>
        //<Email>xxxxxxxxxx</Email>
        //<MobileNo>xxxxxxxxxx</MobileNo>
        //<Address>xxxxxxxxxx</Address>
        //<NRCNo>xxxxxxxxxx</NRCNo>
        //<SecretWord>xxxxxxxxxx</SecretWord>
        //<StateDivision>xxxxxxxxxx</StateDivision>
        //<Township>xxxxxxxxxx</Township>
        //</RegisterReq>
        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("Name"))
        {
            reginfo.Name = ht["Name"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Name <Name> Tag");
            return false;
        }
        if (ht.ContainsKey("ShopName"))
        {
            reginfo.shopname = ht["ShopName"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing ShopName <ShopName> Tag");
            return false;
        }
        if (ht.ContainsKey("ShopType"))
        {
            reginfo.shoptype = ht["ShopType"].ToString();
        }
        //else
        //{
        //    code = "06";
        //    desp = "Invalid Request";
        //    writeLog("Error in Validation : Missing ShopName <ShopType> Tag");
        //    return false;
        //}
        if (ht.ContainsKey("DateOfBirth"))
        {
            reginfo.dob = ht["DateOfBirth"].ToString();
        }

        if (ht.ContainsKey("Gender"))
        {
            reginfo.gender = ht["Gender"].ToString();
        }

        if (ht.ContainsKey("Email"))
        {
            reginfo.email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            return false;
        }
        if (ht.ContainsKey("MobileNo"))
        {
            reginfo.mboileno = ht["MobileNo"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing MobileNo <MobileNo> Tag");
            return false;
        }
        if (ht.ContainsKey("Address"))
        {
            reginfo.address = ht["Address"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Address> Tag");
            return false;
        }
        if (ht.ContainsKey("NRCNo"))
        {
            reginfo.nrc = ht["NRCNo"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <NRCNo> Tag");
            return false;
        }
        if (ht.ContainsKey("SecretWord"))
        {
            reginfo.secretword = ht["SecretWord"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <SecretWord> Tag");
            return false;
        }
        if (ht.ContainsKey("StateDivision"))
        {
            reginfo.divisionid = ht["StateDivision"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <StateDivision> Tag");
            return false;
        }
        if (ht.ContainsKey("Township"))
        {
            reginfo.townshipid = ht["Township"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Township> Tag");
            return false;
        }
        if (ht.ContainsKey("DeviceUID"))
        {
            reginfo.deviceID = ht["DeviceUID"].ToString();
        }
        if (ht.ContainsKey("DeviceToken"))
        {
            reginfo.deviceToken = ht["DeviceToken"].ToString();
        }

        if (ht.ContainsKey("DeviceInfo"))
        {
            reginfo.DeviceInfo = ht["DeviceInfo"].ToString();

        }
        
        if (String.IsNullOrEmpty(version) || string.IsNullOrEmpty(messageID) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(reginfo.Name) || String.IsNullOrEmpty(reginfo.mboileno) || String.IsNullOrEmpty(reginfo.address) || String.IsNullOrEmpty(reginfo.nrc))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        if (_agentWCF.IsDuplicatedMobile(reginfo.mboileno.Trim(),out errMsg))
        {
            code = "07";
            desp = "Mobile number duplicated. Please try with another number.";

            writeLog("User already Registered with MobileNo:" + reginfo.mboileno);
            return false;
        }
        return true;
    }


    bool createBranch(registrationinfo reginfo, string agentID, out string branchCode)
    {
        bool res = true;
        string errMsg = "";
        string newbranchCodeDB = "";
        branchCode = "";
        // branchID = string.Empty;
        double newbranchCode = 0;
        // agentID = Utils.base64ToString(agentID);
        _agentWCF.getNewBranchCode(agentID,out errMsg, out newbranchCodeDB);
        if (newbranchCodeDB != null)
        {
            if (newbranchCodeDB.IndexOf("B") == 0)
            {
                newbranchCode = Convert.ToDouble(newbranchCodeDB.Substring(1));
                newbranchCode += 1;
                branchCode = "B" + newbranchCode.ToString().PadLeft(4, '0');
            }
            else
            {
                branchCode = "B0001";
            }
        }
        else
        {
            branchCode = "B0001";
        }

        string division = string.Empty;
        string township = string.Empty;
        if (reginfo.divisionid == "null" || string.IsNullOrEmpty(reginfo.divisionid))
        {
            writeLog("Division is null");
            division = "8";
        }
        else
        {
            writeLog("Division is not null");
            division = (reginfo.divisionid);
        }
        if (reginfo.townshipid == "null" || string.IsNullOrEmpty(reginfo.townshipid))
        {
            writeLog("Township is null");
            township = "193";
        }
        else
        {
            writeLog("Township is not null");
            township = reginfo.townshipid;
        }
        writeLog(" Branch Data AgentID:" + agentID + "|BranchCode:" + branchCode + "|Branch Name:" + reginfo.Name + "Branch Address:" + reginfo.address + "|MobileNo:" + reginfo.mboileno + "|Division :" + division + "|Township :" + township);
        string latitude = ConfigurationManager.AppSettings["latitude"];
        string longitude = ConfigurationManager.AppSettings["longitude"];
        if (_agentWCF.insertAgentBranch(agentID, branchCode, reginfo.Name, reginfo.address, division, township, reginfo.mboileno, latitude, longitude, 0, 0, out errMsg))
        {
            writeLog("Create Branch OK AgentID:" + agentID + "|BranchCode:" + branchCode + "|Branch Name:" + reginfo.Name + "Branch Address:" + reginfo.address + "|MobileNo:" + reginfo.mboileno);

        }
        else
        {
            writeLog("Create Branch  NOT OK AgentID:" + agentID + "|BranchCode:" + branchCode + "|Branch Name:" + reginfo.Name + "Branch Address:" + reginfo.address + "|MobileNo:" + reginfo.mboileno);
            writeLog("Error In Create AGENT BRANCH Err:" + errMsg);
            res = false;
        }
        return res;
    }
    bool createAgent(out string newAgentCode, out int agentid, out string errmsg, registrationinfo reginfo)
    {
        #region <-- Generate Agent Code -->
        bool result = true;
        agentid = 0;
        errmsg = string.Empty;
        string agCode = "";
        double newAgentCodeDBL = 0;
        newAgentCode = "";

        try
        {
            if (_agentWCF.getNewAgentCode(out errmsg, out agCode))
            {
                if (agCode.IndexOf("A") == 0)
                {
                    agCode = agCode.Substring(1);
                    newAgentCodeDBL = Convert.ToDouble(agCode);
                    newAgentCodeDBL += 1;
                    newAgentCode = "A" + newAgentCodeDBL.ToString().PadLeft(8, '0');
                }
                else
                {
                    newAgentCodeDBL = 1;
                    newAgentCode = "A" + newAgentCodeDBL.ToString().PadLeft(8, '0');
                }
            }
        }
        catch (Exception ex)
        {
            newAgentCodeDBL = 1;
            newAgentCode = "A" + newAgentCodeDBL.ToString().PadLeft(8, '0');
            writeLog("Exception Error in Generate New Agent Code Err:" + ex.Message);
        }
        #endregion

        try
        {
            if (!string.IsNullOrEmpty(newAgentCode))
            {
                #region <-- Create new agent -->
                byte[] img = null;
                string profileid = ConfigurationManager.AppSettings["feesprofileid"].ToString();
                agentid = _agentWCF.insertAgent(newAgentCode, reginfo.Name, 'N', 'Y', "#2432FF", "Y", img, int.Parse(profileid),out errmsg);
                if (agentid != 0)
                {
                    #region <-- Insert agent biller fees Not Use now -->
                    /*
                    writeLog("$$$$$$$$$$$$$Insert Agent Biller Fees$$$$$$$$$$$$$$$$");
                    string bid = ConfigurationManager.AppSettings["billerid"].ToString();
                    writeLog("Billerid From Config:" + bid);
                    string tempbid = string.Empty;
                    string status = string.Empty;
                    char bstatus = 'Y';
                    Hashtable htbiller = Utils.getBilleridHashtable(bid);
                    DataSet ds = new DataSet();

                    _agentWCF.getBillerNameList(out ds, out errmsg);

                    if (ds.Tables.Count > 0)
                    {
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            writeLog("Total Biller:" + ds.Tables[0].Rows.Count);
                            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                            {
                                //serviceFee = 
                                //serviceFeePercent =
                                //agentFee = 
                                //agentFeePercent = 
                                //oneStopFee = 
                                //oneStopFeePercent = 

                                int billerid = int.Parse(ds.Tables[0].Rows[i]["BILLERID"].ToString());
                             //   writeLog("biller" + i + "Billerid(OK)");
                                Decimal agentfee = Convert.ToDecimal(String.IsNullOrEmpty(ds.Tables[0].Rows[i]["AGENTFLATFEE"].ToString()) ? "0" : ds.Tables[0].Rows[i]["AGENTFLATFEE"].ToString());
                           //     writeLog("biller" + i + "agentfee(OK)");
                                float agentpercent = (float)Convert.ToSingle(String.IsNullOrEmpty(ds.Tables[0].Rows[i]["AGENTPERCENTFEE"].ToString()) ? "0" : ds.Tables[0].Rows[i]["AGENTPERCENTFEE"].ToString());
                           //     writeLog("biller" + i + "agentpercent(OK)");
                                Decimal servicefee = Convert.ToDecimal(String.IsNullOrEmpty(ds.Tables[0].Rows[i]["SERVICEFLATFEE"].ToString()) ? "0" : ds.Tables[0].Rows[i]["SERVICEFLATFEE"].ToString());
                           //     writeLog("biller" + i + "servicefee(OK)");
                                float servicepercent = (float)Convert.ToSingle(String.IsNullOrEmpty(ds.Tables[0].Rows[i]["SERVICEPERCENTFEE"].ToString()) ? "0" : ds.Tables[0].Rows[i]["SERVICEPERCENTFEE"].ToString());
                            //    writeLog("biller" + i + "servicepercent(OK)");
                                Decimal onestopfee = Convert.ToDecimal(String.IsNullOrEmpty(ds.Tables[0].Rows[i]["ONESTOPFLATFEE"].ToString()) ? "0" : ds.Tables[0].Rows[i]["ONESTOPFLATFEE"].ToString());
                        //        writeLog("biller" + i + "onestopfee(OK)");
                                float onestoppercent = (float)Convert.ToSingle(String.IsNullOrEmpty(ds.Tables[0].Rows[i]["ONESTOPPERCENTFEE"].ToString()) ? "0" : ds.Tables[0].Rows[i]["ONESTOPPERCENTFEE"].ToString());
                        //        writeLog("biller" + i + "onestopfee(OK)");
                                tempbid = billerid.ToString();
                       //         writeLog("TempBillerid:" + tempbid);
                                if (htbiller.ContainsKey(tempbid))
                                {
                                    status = htbiller[tempbid].ToString();
                                    bstatus = char.Parse(status);
                                }
                                else
                                {
                                    bstatus = 'Y';
                                }
                                writeLog("insert agent Biller Fees OK Number of biller:" + i + "|BillerID:" + billerid);
                           //     writeLog("agentFlatFee:" + agentfee + "|agentPercentFee:" + agentpercent + "|serviceFlatFee:" + servicefee + "|ServicepercentFee:" + servicepercent + "|onestopFlatFee:" + onestopfee + "OnestopPercentFee:" + onestoppercent);

                                _agentWCF.insertAgentFee( agentid, billerid, agentfee, agentpercent, servicefee, servicepercent, onestopfee, onestoppercent, bstatus,out errmsg);

                        //        writeLog("Insert agent Billers Fees for Number of biller:" + i + "|BillerID:" + billerid + "OK");
                            }
                        }
                    }
                    */
                    #endregion end insert agent biller fees

                    #region <-- Insert agent channel -->

                    if (!_agentWCF.insertAgentChannel(newAgentCode, "OVERTHECOUNTER",out errmsg))
                    {
                        writeLog("Error In Insert Agent Channel :" + errmsg);
                    }
                    else
                    {
                        writeLog("Insert Agent Channel OK AgentCode:" + newAgentCode + "|Agent Name;" + reginfo.Name);
                    }

                    #endregion end insert agent channel
                }
                else
                {
                    result = false;
                }

                #endregion end create new agent
            }
            else
            {
                writeLog("Agent Code Is Empty Cannot Create Agent");
                result = false;
            }
        }
        catch (Exception ex)
        {
            writeLog("Exception Erron in agent Creation Err:" + ex.Message);
            result = false;
        }

        return result;
    }

    bool createAgentUser(int agentid, string branchcode, out string randompass, out string userid, out string errMsg, registrationinfo reginfo)
    {
        bool success = false;
        userid = string.Empty;
        randompass = string.Empty;
        string password = string.Empty;
        string creator = "AutoSystem";
        int PasswordExpiryPeriod = 0;
        errMsg = string.Empty;
        DateTime userexpiry = DateTime.Now.AddDays(365);

        userid = generateAgUserID(reginfo.Name);
        randompass = generatepass();
        // Encrypt encrypt = new Encrypt();
        string pwdSalt = stringToBase64(userid);
        password = ComputeHash(randompass, pwdSalt);

        //string pssword = m.Password;
        string strXml = "";

        StringBuilder xml = new StringBuilder();
        xml.Append("<AgentUserRights>");
        xml.Append("<dashboard>N</dashboard>");

        xml.Append("<transaction>");
        xml.Append("<searchTxn>N</searchTxn>");
        xml.Append("<recentTxn>N</recentTxn>");
        xml.Append("</transaction>");

        xml.Append("<account>");
        xml.Append("<changePassword>N</changePassword>");
        xml.Append("<user>N</user>");
        xml.Append("<branch>N</branch>");
        xml.Append("</account>");

        xml.Append("<report>");
        xml.Append("<dailyreport>N</dailyreport>");
        xml.Append("</report>");
        xml.Append("</AgentUserRights>");
        strXml = xml.ToString();
        //it is from DB
        PasswordExpiryPeriod = Convert.ToInt16(getSystemXmlElementValue(Utils.Constant.PASSWORDEXPIRY));
        try
        {
            reginfo = SetTempValues(reginfo);
            success = _agentWCF.registerAgentUser(agentid, userid, reginfo.Name, password, pwdSalt, reginfo.Name, char.Parse(reginfo.gender), DateTime.Parse(reginfo.dob), reginfo.mboileno, reginfo.nrc, reginfo.secretword, strXml, creator, userexpiry, PasswordExpiryPeriod, branchcode, reginfo.email, 'U', 'Y', 'M', reginfo.deviceID, reginfo.deviceToken,reginfo.DeviceInfo,out errMsg);
        }
        catch (Exception ex)
        {
            writeLog("Error in insert agent user err:" + ex.Message);
            success = false;
        }
        return success;
        //m.PasswordExpiryPeriod = 100;

    }

    public object getSystemXmlElementValue(string eml)
    {
        // AdminService.ServiceClient admWS = new AdminService.ServiceClient();

        string xmlString = _agentWCF.get_SystemConfigByKey("system_setting");
        System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
        doc.InnerXml = xmlString;

        return doc.SelectSingleNode("configuration/" + eml).InnerXml;
    }
    public string generateAgUserID(string agUserName)
    {

        string userid = getShortName(agUserName);
        string new_userid = "";
        int num;


        if (!_agentWCF.IsDuplicateAgentUser(userid))
        {
            return userid.ToLower();
        }

        else
        {
            userid = userid.Substring(0, 5) + "0";
            num = Convert.ToInt16(userid.Substring(5, 1));

            if (num < 9)
            {
                for (int i = num; i < 9; i++)
                {
                    userid = userid.Substring(0, 5) + (i + 1).ToString();
                    if (!_agentWCF.IsDuplicateAgentUser(userid))
                    {
                        return userid;
                    }
                }
            }
            //=====================================

            userid = userid.Substring(0, 4) + "0" + userid.Substring(5, 1);
            num = Convert.ToInt16(userid.Substring(4, 2));
            if (num < 99)
            {
                for (int i = num; i < 99; i++)
                {
                    userid = userid.Substring(0, 4) + (i + 1).ToString();
                    if (!_agentWCF.IsDuplicateAgentUser(userid))
                    {
                        return userid;
                    }
                }
            }
            //=====================================                           
            userid = userid.Substring(0, 3) + "0" + userid.Substring(4, 2);
            num = Convert.ToInt16(userid.Substring(3, 3));
            if (num < 999)
            {
                for (int i = num; i < 999; i++)
                {
                    userid = userid.Substring(0, 3) + (i + 1).ToString();
                    if (!_agentWCF.IsDuplicateAgentUser(userid))
                    {
                        return userid;
                    }
                }
            }
            else
            {
                userid = userid.Substring(0, 2) + "0" + userid.Substring(3, 3);
                num = Convert.ToInt16(userid.Substring(3, 3));
                if (num < 9999)
                {
                    for (int i = num; i < 9999; i++)
                    {
                        userid = userid.Substring(0, 2) + (i + 1).ToString();
                        if (!_agentWCF.IsDuplicateAgentUser(userid))
                        {
                            return userid;
                        }
                        else
                        {
                            return "";
                        }
                    }
                }
            }
            return "";
        }
    }

    public static string getShortName(string name)
    {
        string shortName = "";

        string[] nameArr = name.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

        if (nameArr.Length == 1)
        {
            if (nameArr[0].Length > 2)
            {
                shortName += nameArr[0].Substring(0, 3);
            }
            else if (nameArr[0].Length > 1)
            {
                shortName += nameArr[0].Substring(0, 2);
            }
            else
            {
                shortName += nameArr[0].Substring(0, 1);
            }
        }
        else if (nameArr.Length == 2)
        {
            if (nameArr[0].Length > 2)
            {
                shortName += nameArr[0].Substring(0, 3);
            }
            else if (nameArr[0].Length > 1)
            {
                shortName += nameArr[0].Substring(0, 2);
            }
            else
            {
                shortName += nameArr[0].Substring(0, 1);
            }
            //==================
            if (nameArr[1].Length > 2)
            {
                shortName += nameArr[1].Substring(0, 3);
            }
            else if (nameArr[1].Length > 1)
            {
                shortName += nameArr[1].Substring(0, 2);
            }
            else
            {
                shortName += nameArr[1].Substring(0, 1);
            }
        }
        else if (nameArr.Length == 3)
        {
            if (nameArr[0].Length > 1)
            {
                shortName += nameArr[0].Substring(0, 2);
            }
            else
            {
                shortName += nameArr[0].Substring(0, 1);
            }
            //==================

            if (nameArr[1].Length > 1)
            {
                shortName += nameArr[1].Substring(0, 2);
            }
            else
            {
                shortName += nameArr[1].Substring(0, 1);
            }
            //==================

            if (nameArr[2].Length > 1)
            {
                shortName += nameArr[2].Substring(0, 2);
            }
            else
            {
                shortName += nameArr[2].Substring(0, 1);
            }
        }
        else
        {
            if (nameArr[0].Length > 1)
            {
                shortName += nameArr[0].Substring(0, 2);
            }
            else
            {
                shortName += nameArr[0].Substring(0, 1);
            }
            //==================

            if (nameArr[1].Length > 1)
            {
                shortName += nameArr[1].Substring(0, 2);
            }
            else
            {
                shortName += nameArr[1].Substring(0, 1);
            }
            //==================

            if (nameArr[3].Length > 1)
            {
                shortName += nameArr[3].Substring(0, 2);
            }
            else
            {
                shortName += nameArr[3].Substring(0, 1);
            }
        }
        shortName = shortName.PadRight(6, '1');
        return shortName.ToLower();
    }

    bool sendregsuccessmail(string userid, string password, string Name, string email, out string msg)
    {
        writeLog("Ok in entering sendmail method");
        writeLog("UserID:" + userid + "Name:" + Name + "Email:" + email);
        try
        {
            //  string Mpufee = ConfigurationManager.AppSettings["MPUFee"].ToString();
            /// sb.Append(" *Load Amount : " + Double.Parse(amount).ToString("#,##0.##"));
            // sb.Append("*MPU Fee :" + Double.Parse(Mpufee).ToString("#,##0.##"));
            // sb.Append("*Total Balance :" + (Double.Parse(amount) - Double.Parse(Mpufee)).ToString("#,##0.##"));
            StringBuilder sb = new StringBuilder();
            sb.Append("<strong>Dear " + Name + ",</strong><br/><br/>");
            writeLog("msgBody");
            sb.Append(ConfigurationManager.AppSettings["msgbodyreg"].ToString() + "<br/><br/>");
            sb.Append("<table>");
            sb.Append("<tr><td>Login ID </td><td>:</td><td>" + userid + "</td></tr>");
            sb.Append("<tr><td>Password </td><td>:</td><td>" + password + "</td> </tr>");
            sb.Append("</table></br><hr>");
            writeLog("Footermsg");
            sb.Append("<strong>" + ConfigurationManager.AppSettings["footermsgreg"].ToString() + "</strong></br>");
            sb.Append("<table>");
            writeLog("Phone");
            sb.Append("<tr><td>Hot Line</td><td>:</td><td>" + ConfigurationManager.AppSettings["phone"].ToString() + "</td></tr>");
            writeLog("email");
            sb.Append("<tr><td>Email</td><td>:</td><td>" + ConfigurationManager.AppSettings["email"].ToString() + "</td></tr>");
            sb.Append("<tr><td>Facebook</td><td>:</td><td>" + ConfigurationManager.AppSettings["fblink"].ToString() + "</td></tr>");
            sb.Append("</table><hr>");
            sb.Append("Please do not reply to this email. This mailbox is not monitored and you will not receive a response. For assistance, please use details as mentioned above. <br/>");
            //  sb.Append("Near Me Co., Ltd.");
            // EmailApiModel mailapi = new EmailApiModel();
            writeLog("fromMail");
            string fromEmailAddress = ConfigurationManager.AppSettings["fromEmailreg"].ToString();
            string toEmail = email;
            writeLog("Fromemail:" + fromEmailAddress + "To Email:" + toEmail);
            writeLog("Subject");
            string subject = ConfigurationManager.AppSettings["subjectreg"].ToString() + " at " + System.DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss");
            writeLog("Subject:" + subject);
            string msgBody = sb.ToString();
            writeLog("Message Body:" + msgBody);
            // emailAPIWS.EmailAPISoapClient emailApi = new emailAPIWS.EmailAPISoapClient();
            AwsEmailAPI.ServiceSoapClient emailApi = new AwsEmailAPI.ServiceSoapClient();
            string errMsg = string.Empty;
            bool sent = false;
            // sent = emailApi.sendEmail(toEmail, "", "", fromEmailAddress, fromEmailAddress, subject, msgBody
            // , "", "", "", false, "", "", true, out errMsg);
            sent = emailApi.sendAWSMail(fromEmailAddress, fromEmailAddress, toEmail, "", "", subject, msgBody);
            if (sent)
            {
                msg = errMsg;
                writeLog("Return ture email was sent" + msg);
                return true;
            }
            else
            {
                writeLog("Email not sent");
                msg = errMsg;
                return false;
            }
        }
        catch (Exception ex)
        {
            writeLog("Exception Error in sending Email" + ex.Message);
            msg = ex.Message;
            return false;
        }
    }

    string sendCreditResetEmail(string agentCode, string AgentName, string BranchCode, string CreditTerms, string CreditLimit, string ResetDate)
    {
        string result = "success";
        writeLog("fromMail");
        string fromEmailAddress = ConfigurationManager.AppSettings["fromEmail"].ToString();
        string displayText = ConfigurationManager.AppSettings["displaytext"].ToString();
        string toEmail = ConfigurationManager.AppSettings["balanceResetEmail"].ToString();
        string introduction = ConfigurationManager.AppSettings["introduction"].ToString();
        writeLog("Fromemail:" + fromEmailAddress + "To Email:" + toEmail);
        writeLog("Subject");
        string subject = ConfigurationManager.AppSettings["subjectResetBalance"].ToString() + " at " + System.DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss");
        subject = string.Format(subject, AgentName);
        writeLog("Subject:" + subject);

        string emailBody = string.Empty;
        try
        {
            decimal creditlimitFormat = decimal.Parse(CreditLimit);
            emailBody = string.Format(@"<strong>{0}</strong><br/><br/>
                                        {1}<table>
                                        <tr><td>Partner Name</td><td>:</td><td>{2}</td></tr>
                                        <tr><td>Partner Code</td><td>:</td><td>{3}</td></tr>
                                        <tr><td>Branch Name</td><td>:</td><td>{4}</td></tr>
                                        <tr><td>Branch Code</td><td>:</td><td>{5}</td></tr>
                                        <tr><td>CreditTerms</td><td>:</td><td>{6}</td></tr>
                                        <tr><td>CreditLimit</td><td>:</td></td>{7}</td></tr>
                                        <tr><td>Credit Reset Date</td><td>:</td><td>{8}</td></tr>
                                        </table>", introduction, ConfigurationManager.AppSettings["msgbodyResetCredit"].ToString(), AgentName, agentCode, this.branchName, BranchCode, CreditTerms, string.Format("{0:n0}", creditlimitFormat), ResetDate);
        }
        catch (Exception ex)
        {
            writeLog("Exception error occur when creating email body" + ex.Message);
        }

        try
        {
            AwsEmailAPI.ServiceSoapClient emailApi = new AwsEmailAPI.ServiceSoapClient();
            string errMsg = string.Empty;
            bool sent = false;
            // sent = emailApi.sendEmail(toEmail, "", "", fromEmailAddress, fromEmailAddress, subject, msgBody
            // , "", "", "", false, "", "", true, out errMsg);
            sent = emailApi.sendAWSMail(fromEmailAddress, displayText, toEmail, "", "", subject, emailBody);
            if (sent)
            {
                writeLog("Return ture email was sent");
            }
            else
            {
                writeLog("Email not sent");
                result = "fail";
            }
        }
        catch (Exception ex)
        {
            writeLog("Exception error occur in sending email:" + ex.Message);
        }
        return result;
    }
    #endregion
    #endregion

    #region <-- Mobile Registration 04-May-2018 AK -->

    public string OTPReq(string reqXml)
    {
        writeLog("$$$$$$$$$$$$$$$$$$ THIS IS OTPReq FROM BIS $$$$$$$$$$$$$$$$$$");
        string code = string.Empty;
        string desc = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string messageID = string.Empty;
        string loginID = string.Empty;
        bool isRegistered = false;
        string errmsg = string.Empty;
        string phoneNo = string.Empty;
        StringBuilder sb = new StringBuilder();
        writeLog("BIS reqSML   " + reqXml);
        Hashtable ht = Utils.getHTableFromXML(reqXml);

        try
        {
            if (IsValidateOTPRequest(ht, out code, out desc, out version, out ts, out messageID, out loginID, out isRegistered, out phoneNo))
            {
                if (SendOTP(out errMsg, loginID, isRegistered, phoneNo))
                {
                    if (string.IsNullOrEmpty(phoneNo))
                    {
                        phoneNo = loginID;
                    }
                    var firstDigits = phoneNo.Substring(0, 4);
                    var lastDigits = phoneNo.Substring(phoneNo.Length - 3, 3);

                    var requiredMask = new String('X', phoneNo.Length - firstDigits.Length - lastDigits.Length);
                    var maskedString = string.Concat(firstDigits, requiredMask, lastDigits);

                    desc = "Your OTP has been sent to " + maskedString + " successfully.";
                    sb.Append("<OTPRes>");
                    sb.Append("<Version>1.0</Version>");
                    sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                    sb.Append("<ResCode>" + code + "</ResCode>");
                    sb.Append("<ResDesc>" + desc + "</ResDesc>");
                    sb.Append("</OTPRes>");
                }
            }
            else
            {
                return Utils.getErrorRes(code, desc);
            }
        }
        catch (Exception ex)
        {
            writeLog("OTPReq Error: " + ex.Message + " " + "Full Error: " + ex.ToString());
        }

        return sb.ToString();
    }

    public string RegisterUser(string reqXml)
    {
        writeLog("$$$$$$$$$$$$$$$$$$$$$$$ THIS IS REGISTER USER FROM BIS $$$$$$$$$$$$$$$$$$$$$$$");
        int agnid;
        string code;
        string desp;
        string agnID = string.Empty;
        string newagncode = string.Empty;
        string branchcode = string.Empty;
        string randompass = string.Empty;
        string userid = string.Empty;
        string errmsg = string.Empty;
        StringBuilder sb = new StringBuilder();
        Hashtable ht = Utils.getHTableFromXML(reqXml);
        registrationinfo reginfo = new registrationinfo();

        if (!IsValidateRegisterUserReq(ht, out code, out desp, out reginfo))
        {
            return Utils.getErrorRes(code, desp);
        }
        else
        {
            errmsg = "";

            if (createAgent(out newagncode, out agnid, out errmsg, reginfo))
            {
                writeLog("$$$$$$$$Creating Agent OK Agent ID:" + agnid + "Agent Code:" + newagncode + "$$$$$$$$$$$$$$$$$$$$$$$");
                agentID = agnid;

                writeLog("Start Create Branch");
                if (createBranch(reginfo, agnid.ToString(), out branchcode))
                {
                    writeLog("$$$$$$$$$$$$$Creating Agent Branch OK BranchCode:" + branchcode + "$$$$$$$$$$$$$");
                    writeLog("Start Creat Agent User");
                    if (NewCreateAgentUser(agnid, branchcode, out  randompass, out  userid, out errmsg, reginfo))
                    {
                        writeLog("$$$$$$$$$$$$Creating Agent User OK agentid:" + agnid + "BranchCode:" + branchcode + "userid:" + userid + "$$$$$$$$$$$$$$$$");
                        code = "00";
                        desp = "Registration is successfully done.";
                        sb.Append("<CreateUserRes>");
                        sb.Append("<Version>1.0</Version>");
                        sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                        sb.Append("<ResCode>" + code + "</ResCode>");
                        sb.Append("<ResDesc>" + desp + "</ResDesc>");
                        sb.Append("</CreateUserRes>");
                    }
                    else
                    {
                        code = "08";
                        desp = "DB Error";
                        return Utils.getErrorRes(code, desp);
                    }
                }
                else
                {
                    code = "08";
                    desp = "DB Error";
                    sb.Append("<Error>");
                    sb.Append("<Version>1.0</Version>");
                    sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                    sb.Append("<ResCode>" + code + "</ResCode>");
                    sb.Append("<ResDesc>" + desp + "</ResDesc>");
                    sb.Append("</Error>");
                    try
                    {
                        writeLog("Error In Create Branch ErrMsg:" + errmsg);
                    }
                    catch
                    {

                    }
                }
            }
            else
            {
                code = "08";
                desp = "DB Error";
                sb.Append("<Error>");
                sb.Append("<Version>1.0</Version>");
                sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                sb.Append("<ResCode>" + code + "</ResCode>");
                sb.Append("<ResDesc>" + desp + "</ResDesc>");
                sb.Append("</Error>");
                try
                {
                    writeLog("Error In Create AGENT ErrMsg:" + errmsg);
                }
                catch
                {
                }
            }
        }
        writeLog("Reg Response" + sb.ToString());
        return sb.ToString();
    }

    bool NewCreateAgentUser(int agentid, string branchcode, out string randompass, out string userid, out string errMsg, registrationinfo reginfo)
    {
        bool success = false;
        userid = string.Empty;
        randompass = string.Empty;
        string password = string.Empty;
        string creator = "AutoSystem";
        int PasswordExpiryPeriod = 0;
        errMsg = string.Empty;
        DateTime userexpiry = DateTime.Now.AddDays(365);

        //userid = generateAgUserID(reginfo.Name);
        userid = reginfo.mboileno;
        randompass = generatepass();
        // Encrypt encrypt = new Encrypt();
        string pwdSalt = stringToBase64(userid);
        password = ComputeHash(randompass, pwdSalt);

        //string pssword = m.Password;
        string strXml = "";

        StringBuilder xml = new StringBuilder();
        xml.Append("<AgentUserRights>");
        xml.Append("<dashboard>N</dashboard>");

        xml.Append("<transaction>");
        xml.Append("<searchTxn>N</searchTxn>");
        xml.Append("<recentTxn>N</recentTxn>");
        xml.Append("</transaction>");

        xml.Append("<account>");
        xml.Append("<changePassword>N</changePassword>");
        xml.Append("<user>N</user>");
        xml.Append("<branch>N</branch>");
        xml.Append("</account>");

        xml.Append("<report>");
        xml.Append("<dailyreport>N</dailyreport>");
        xml.Append("</report>");
        xml.Append("</AgentUserRights>");
        strXml = xml.ToString();
        //it is from DB
        PasswordExpiryPeriod = Convert.ToInt16(getSystemXmlElementValue(Utils.Constant.PASSWORDEXPIRY));
        try
        {
            reginfo = SetTempValues(reginfo);
            success = _agentWCF.registerAgentUser(agentid, userid, reginfo.Name, password, pwdSalt, reginfo.Name, char.Parse(reginfo.gender), DateTime.Parse(reginfo.dob), reginfo.mboileno, reginfo.nrc, reginfo.secretword, strXml, creator, userexpiry, PasswordExpiryPeriod, branchcode, reginfo.email, 'U', 'Y', 'M', reginfo.deviceID, reginfo.deviceToken,reginfo.DeviceInfo, out errMsg);
        }
        catch (Exception ex)
        {
            writeLog("Error in insert agent user err:" + ex.Message);
            success = false;
        }
        return success;
        //m.PasswordExpiryPeriod = 100;

    }

    public string UpdateProfileReq(string reqXml)
    {
        string code = string.Empty;
        string desc = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string messageID = string.Empty;
        string errmsg = string.Empty;
        int agnid;
        string newagncode = string.Empty;
        string branchcode = string.Empty;
        string randompass = string.Empty;
        string userid = string.Empty;
        string loginID = string.Empty;
        StringBuilder sb = new StringBuilder();
        Hashtable ht = Utils.getHTableFromXML(reqXml);
        registrationinfo reginfo = new registrationinfo();

        if (IsValidateUpdateProfileReq(ht, out loginID, out code, out desc, out reginfo))
        {
            writeLog("$$$$$$$$ Updating Agent Profile $$$$$$$$$$$$$$$$$$$$$$$");
            try
            {
                if (_agentWCF.updateAgentProfile(reginfo.gender, DateTime.Parse(reginfo.dob), reginfo.nrc, reginfo.address, reginfo.email, reginfo.isShop, reginfo.shopname, reginfo.shoptype, reginfo.latitudeLoc, reginfo.longitudeLoc, reginfo.UserID, reginfo.mboileno, reginfo.deviceID, reginfo.deviceToken, reginfo.secretword,reginfo.divisionid,reginfo.townshipid,out errmsg))
                {
                    writeLog("$$$$$$$$$$$$ Updating Agent Profile $$$$$$$$$$$$$$$$");
                    code = "00";
                    desc = "Registration is successfully done.";
                    sb.Append("<UpdateProfileRes>");
                    sb.Append("<Version>1.0</Version>");
                    sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                    sb.Append("<ResCode>" + code + "</ResCode>");
                    sb.Append("<ResDesc>" + desc + "</ResDesc>");
                    sb.Append("</UpdateProfileRes>");
                }
                else
                {
                    code = "08";
                    desc = "DB Error";
                    sb.Append("<Error>");
                    sb.Append("<Version>1.0</Version>");
                    sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                    sb.Append("<ResCode>" + code + "</ResCode>");
                    sb.Append("<ResDesc>" + desc + "</ResDesc>");
                    sb.Append("</Error>");
                    try
                    {
                        writeLog("Error In Create Branch ErrMsg:" + errmsg);
                    }
                    catch
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                writeLog("Error in Update Agent Profile : " +ex.ToString());
                throw;
            }
        }
        else
        {
            return Utils.getErrorRes(code, desc);
        }
        return sb.ToString();
    }

    #region Helper Methods
    bool UpdateAgentInfo()
    {
        //_agentWCF.updateAgentProfile(
        return true;
    }

    registrationinfo SetTempValues(registrationinfo regInfo)
    {
        if (string.IsNullOrEmpty(regInfo.gender))
        {
            regInfo.gender = "M";
        }
        if (string.IsNullOrEmpty(regInfo.dob))
        {
            regInfo.dob = DateTime.Now.ToString();
        }
        return regInfo;
    }

    bool IsValidateRegisterUserReq(Hashtable ht, out string code, out string desp, out registrationinfo reginfo)
    {
        reginfo = new registrationinfo();
        code = "00";
        desp = "Success";

        string version = string.Empty;
        string ts = string.Empty;
        string messageID = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("UserName"))
        {
            reginfo.Name = ht["UserName"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing UserName <UserName> Tag");
            return false;
        }
        if (ht.ContainsKey("LoginID"))
        {
            reginfo.mboileno = ht["LoginID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing MobileNo <MobileNo> Tag");
            return false;
        }
        if (ht.ContainsKey("DeviceInfo"))
        {
            reginfo.DeviceInfo = ht["DeviceInfo"].ToString();
        }
        if (String.IsNullOrEmpty(version) || string.IsNullOrEmpty(messageID) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(reginfo.Name) || String.IsNullOrEmpty(reginfo.mboileno))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        if (_agentWCF.IsDuplicatedMobile(reginfo.mboileno.Trim(), out errMsg))
        {
            writeLog("HERE MOBILE DUPLICATED");
            code = "07";
            desp = "Mobile number duplicated. Please try with another number.";

            writeLog("User already Registered with MobileNo:" + reginfo.mboileno);
            return false;
        }
        return true;
    }

    bool IsValidateCreateUserRequest(Hashtable ht, out string code, out string desc, out string version, out string ts, out string messageID, out string loginID)
    {
        code = "00";
        desc = "Success";
        version = string.Empty;
        ts = string.Empty;
        loginID = string.Empty;
        messageID = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desc = "Invalid Request";
            writeLog("Error in Validation : Missing MessageID XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("LoginID"))
        {
            loginID = ht["LoginID"].ToString();
        }
        else
        {
            code = "06";
            desc = "Invalid Request";
            writeLog("Error in Validation : Missing <LoginID> Tag");
            return false;
        }
        return true;
    }

    public bool IsValidateOTPRequest(Hashtable ht, out string code, out string desc, out string version, out string ts, out string messageID, out string loginID, out bool isRegistered, out string phoneNo)
    {
        code = "00";
        desc = "Success";

        version = string.Empty;
        ts = string.Empty;
        loginID = string.Empty;
        messageID = string.Empty;
        isRegistered = false;
        phoneNo = string.Empty;
        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desc = "Invalid Request";
            writeLog("Error in Validation : Missing MessageID XML <TimeStamp> Tag");
            return false;
        }
        //if (ht.ContainsKey("UserName"))
        //{
        //    loginID = ht["UserName"].ToString();
        //}
        //else
        //{
        //    code = "06";
        //    desc = "Invalid Request";
        //    writeLog("Error in Validation : Missing UserName <TimeStamp> Tag");
        //    return false;
        //}
        if (ht.ContainsKey("LoginID"))
        {
            loginID = ht["LoginID"].ToString();
        }
        else
        {
            code = "06";
            desc = "Invalid Request";
            writeLog("Error in Validation : Missing <LoginID> Tag");
            return false;
        }
        if (ht.ContainsKey("IsRegistered"))
        {
            isRegistered = bool.Parse(ht["IsRegistered"].ToString());
        }
        else
        {
            code = "06";
            desc = "Invalid Request";
            writeLog("Error in Validation : Missing IsRegistered <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("PhoneNo"))
        {
            phoneNo = ht["PhoneNo"].ToString();
        }

        return true;
    }

    bool IsValidateUpdateProfileReq(Hashtable ht, out string code, out string desp, out string loginID, out registrationinfo reginfo)
    {
        reginfo = new registrationinfo();
        code = "00";
        desp = "Success";
        loginID = string.Empty;

        string version = string.Empty;
        string ts = string.Empty;
        string messageID = string.Empty;


        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            messageID = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("Gender"))
        {
            reginfo.gender = ht["Gender"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Gender> Tag");
            return false;
        }
        if (ht.ContainsKey("DateOfBirth"))
        {
            reginfo.dob = ht["DateOfBirth"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <DateOfBirth> Tag");
            return false;
        }
        if (ht.ContainsKey("NRCNo"))
        {
            reginfo.nrc = ht["NRCNo"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <NRCNo> Tag");
            return false;
        }
        if (ht.ContainsKey("Address"))
        {
            reginfo.address = ht["Address"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Address> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            reginfo.email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            return false;
        }
        if (ht.ContainsKey("IsShop"))
        {
            reginfo.isShop = ht["IsShop"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing IsShop <IsShop> Tag");
            return false;
        }
        if (ht.ContainsKey("ShopName"))
        {
            reginfo.shopname = ht["ShopName"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing ShopName <ShopName> Tag");
            return false;
        }
        if (ht.ContainsKey("ShopType"))
        {
            reginfo.shoptype = ht["ShopType"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing ShopType <ShopType> Tag");
            return false;
        }
        if (ht.ContainsKey("Latitude"))
        {
            reginfo.latitudeLoc = ht["Latitude"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Latitude <Latitude> Tag");
            return false;
        }
        if (ht.ContainsKey("Longitude"))
        {
            reginfo.longitudeLoc = ht["Longitude"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Longitude <Longitude> Tag");
            return false;
        }
        if (ht.ContainsKey("SecretWord"))
        {
            reginfo.secretword = ht["SecretWord"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Longitude <SecretWord> Tag");
            return false;
        }
        if (ht.ContainsKey("LoginID"))
        {
            string tmpLoginID = ht["LoginID"].ToString();
            reginfo.UserID = tmpLoginID;
            
            //if (!string.IsNullOrEmpty(tmpLoginID))
            //{
            //    if (tmpLoginID.Length > 6)
            //    {
            //        reginfo.mboileno = tmpLoginID;
            //    }
            //    else
            //    {
            //        reginfo.UserID = ht["LoginID"].ToString();
            //    }
            //}
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <LoginID> Tag");
            return false;
        }

        if (ht.ContainsKey("DivisionID"))
        {
            reginfo.divisionid = ht["DivisionID"].ToString();
        }
        if (ht.ContainsKey("TownshipID"))
        {
            reginfo.townshipid = ht["TownshipID"].ToString();
        }
        #region
        //if (ht.ContainsKey("SecretWord"))
        //{
        //    reginfo.secretword = ht["SecretWord"].ToString();
        //}
        //else
        //{
        //    code = "06";
        //    desp = "Invalid Request";
        //    writeLog("Error in Validation : Missing Email <SecretWord> Tag");
        //    return false;
        //}
        //if (ht.ContainsKey("StateDivision"))
        //{
        //    reginfo.divisionid = ht["StateDivision"].ToString();
        //}
        //else
        //{
        //    code = "06";
        //    desp = "Invalid Request";
        //    writeLog("Error in Validation : Missing Email <StateDivision> Tag");
        //    return false;
        //}
        //if (ht.ContainsKey("Township"))
        //{
        //    reginfo.townshipid = ht["Township"].ToString();
        //}
        //else
        //{
        //    code = "06";
        //    desp = "Invalid Request";
        //    writeLog("Error in Validation : Missing Email <Township> Tag");
        //    return false;
        //}
        #endregion
        if (ht.ContainsKey("DeviceUID"))
        {
            reginfo.deviceID = ht["DeviceUID"].ToString();
        }
        if (ht.ContainsKey("DeviceToken"))
        {
            reginfo.deviceToken = ht["DeviceToken"].ToString();
        }
        //<DeviceUID>353818465809247</DeviceUID>
        //<DeviceToken>APA91bFwfevGCuUJXGyiEc6pyjR6O7vFo4AK0uyw96ZpoVcuapVxAx-ma9GiDVkK_uNRXZrnd8M51xvbwHKPVGUCsZMJQMwYPMV30xy-__2oGlQ3F_LQ1KGwTLp2fuYyIRm-u7MeY6P3</DeviceToken>
        if (String.IsNullOrEmpty(version) || string.IsNullOrEmpty(messageID) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(reginfo.address) || String.IsNullOrEmpty(reginfo.nrc))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        //if (_agentWCF.IsDuplicatedMobile(out errMsg, reginfo.mboileno.Trim()))
        //{
        //    code = "07";
        //    desp = "Mobile number duplicated. Please try with another number.";

        //    writeLog("User already Registered with MobileNo:" + reginfo.mboileno);
        //    return false;
        //}
        return true;
    }

    public string GenerateOTP() 
    {
        string otp = string.Empty;
        Random generator = new Random();
        otp = generator.Next(0, 999999).ToString("D6");
        #region Alphanumeric
        //string alphabets = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        ////string small_alphabets = "abcdefghijklmnopqrstuvwxyz";
        //string numbers = "1234567890";

        //string characters = numbers;
        ////characters += alphabets + small_alphabets + numbers;
        //characters += alphabets + numbers;

        //for (int i = 0; i < 6; i++)
        //{
        //    string character = string.Empty;
        //    do
        //    {
        //        int index = new Random().Next(0, characters.Length);
        //        character = characters.ToCharArray()[index].ToString();
        //    } while (otp.IndexOf(character) != -1);
        //    otp += character;
        //}
        #endregion
        return otp;
    }

    public bool SendOTP(out string errMsg, string loginID, bool isRegistered, string phoneNo)
    {
        string otp = GenerateOTP();
        errMsg = "";
        smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();

        try
        {
            string agentUserUniqueID = "";
            if (_agentWCF.getAgentUserUniqueIDByLoginID(loginID, out errMsg, out agentUserUniqueID))
            {
                if (!string.IsNullOrEmpty(agentUserUniqueID))
                {
                    if (_agentWCF.insertUpdateOTP(agentUserUniqueID, otp, isRegistered, out errMsg))
                    {
                        writeLog("Insert Update OTP Success. AgentUserUniqueID : " + agentUserUniqueID + ", OTP : " + otp + ", IsRegistered" + isRegistered.ToString());
                        if (!string.IsNullOrEmpty(phoneNo))
                        {
                            loginID = phoneNo;
                        }
                        string sender = System.Configuration.ConfigurationManager.AppSettings["senderName"].ToString();
                        string otpSms = string.Format("Your OTP is [{0}] valid until {1} by {2}.", otp, DateTime.Now.AddMinutes(15).ToString(), sender);
                        if (smsWcf.sendSMS(loginID, otpSms, sender, "EN"))
                        {
                            return true;
                        }
                        else
                        {
                            writeLog("Error in sending SMS ");
                            StringBuilder sb = new StringBuilder();
                            sb.Append("<OTPRes>");
                            sb.Append("<Version>1.0</Version>");
                            sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            sb.Append("<ResCode>" + "200" + "</ResCode>");
                            sb.Append("<ResDesc>" + "OTP sent via SMS" + "</ResDesc>");
                            sb.Append("</OTPRes>");

                            errMsg = sb.ToString();

                           return false;
                        }
                        return true;
                    }

                    errMsg = Utils.getErrorRes("500", errMsg);
                    return false;
                }
                else
                {
                    errMsg = Utils.getErrorRes("500", "User does not exist.");
                    return false;
                }
            }
            else
            {
                errMsg = Utils.getErrorRes("500", errMsg);
                return false;
            }
            
            StringBuilder sb1 = new StringBuilder();
            sb1.Append("<OTPRes>");
            sb1.Append("<Version>1.0</Version>");
            sb1.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb1.Append("<ResCode>" + "200" + "</ResCode>");
            sb1.Append("<ResDesc>" + "OTP sent via SMS" + "</ResDesc>");
            sb1.Append("</OTPRes>");

            errMsg = sb1.ToString();
        }
        catch (Exception ex)
        {
            writeLog("Send SMS Error:   " + ex.ToString());
            StringBuilder sb = new StringBuilder();
            sb.Append("<OTPRes>");
            sb.Append("<Version>1.0</Version>");
            sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
            sb.Append("<ResCode>" + "200" + "</ResCode>");
            sb.Append("<ResDesc>" + "OTP sent via SMS" + "</ResDesc>");
            sb.Append("</OTPRes>");

            errMsg = sb.ToString();
        }

        return true;
    }

    #endregion    

    #endregion

    #region <-- Repayment Service Fees Request 02-Sep-2017 -->
    public string RepaymentServiceFeeReq(string reqXml)
    {
        writeLog("$$$$$$$$$$$$$$$$$$$$$ RepaymentServiceFeeReq $$$$$$$$$$$$$$$$$$$$$");
        writeLog("REQ XML :" + reqXml);

        //string repaymentSerFeeRes=string.Empty;
        string rescode = string.Empty, resdecs = string.Empty;
        //string version = string.Empty;
        //string ts = string.Empty;
        //string email = string.Empty;
        //string password = string.Empty;
        // string amount = string.Empty;
        // string messageid = string.Empty;
        string taxID = string.Empty;
        string isAgreement = string.Empty;
        string totalAgentAmount = string.Empty;
        string totalAmount = string.Empty;
        DataSet dsBiller = null;
        string errmsg = string.Empty;
        string billerid = string.Empty;

        Hashtable ht = Utils.getHTableFromXML(reqXml);
        // StringBuilder sb = new StringBuilder();
        RepaymentServiceFeesReqMdl RequestData = IsValidateRepaymentServiceFeeReq(ht);
        if (!RequestData.Result)
        {
            return Utils.getErrorRes(RequestData.ResCode, RequestData.ResDesc);
        }
        else
        {
            #region <-- Get BillerID by agent code -->
            if (_agentWCF.checkBillerID(RequestData.TaxID, agentID, RequestData.Email,out dsBiller, out errmsg))
            {
                if (dsBiller.Tables[0].Rows.Count > 0)
                {
                    billerid = Convert.ToString(dsBiller.Tables[0].Rows[0]["BILLERID"]);
                    billerName = dsBiller.Tables[0].Rows[0]["BILLERNAME"].ToString();
                    serviceFlatFee = dsBiller.Tables[0].Rows[0]["SERVICEFLATFEE"].ToString();
                    servicePercent = dsBiller.Tables[0].Rows[0]["SERVICEPERCENTFEE"].ToString();
                    agentFlatFee = dsBiller.Tables[0].Rows[0]["AGENTFLATFEE"].ToString();
                    agentPercent = dsBiller.Tables[0].Rows[0]["AGENTPERCENTFEE"].ToString();
                    oneStopFlatFee = dsBiller.Tables[0].Rows[0]["ONESTOPFLATFEE"].ToString();
                    oneStopPercent = dsBiller.Tables[0].Rows[0]["ONESTOPPERCENTFEE"].ToString();

                    #region <-- Add By Tz To check Credit terms and Limited For Non Balance Agent -->
                    creditlimit = dsBiller.Tables[0].Rows[0]["CREDITLIMIT"].ToString();
                    creditterm = dsBiller.Tables[0].Rows[0]["CREDITTERM"].ToString();
                    credittemrstart = dsBiller.Tables[0].Rows[0]["CREDITTERMSTART"].ToString();

                    isAgreement = dsBiller.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString(); //Added By HNT 26-03-2015                     

                    if (dsBiller.Tables[2].Rows.Count > 0)
                    {
                        totalAgentAmount = String.IsNullOrEmpty(dsBiller.Tables[2].Rows[0]["AGENTAMOUNT"].ToString()) ? "0" : dsBiller.Tables[2].Rows[0]["AGENTAMOUNT"].ToString();
                    }

                    if (String.IsNullOrEmpty(RequestData.Amount))
                        RequestData.Amount = "0";

                    if (string.IsNullOrEmpty(serviceFlatFee))
                        serviceFlatFee = "0";
                    if (string.IsNullOrEmpty(servicePercent))
                        servicePercent = "0";

                    if (string.IsNullOrEmpty(agentFlatFee))
                        agentFlatFee = "0";

                    if (string.IsNullOrEmpty(agentPercent))
                        agentPercent = "0";
                    if (string.IsNullOrEmpty(creditterm))
                        creditterm = "0";
                    if (string.IsNullOrEmpty(creditlimit))
                        creditlimit = "0.00";

                    //Calculate Agent Fee
                    serviceFeeDbl = Utils.getFee(double.Parse(RequestData.Amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                    serviceFee = serviceFeeDbl.ToString("###0.00");

                    totalAmount = (double.Parse(RequestData.Amount) + serviceFeeDbl).ToString("###0.00");

                    oneStopFeeDbl = Utils.getFeeNotRound(double.Parse(RequestData.Amount), float.Parse(oneStopPercent), double.Parse(oneStopFlatFee));
                    oneStopFee = oneStopFeeDbl.ToString("###0.00");

                    agentFeeDbl = Utils.getFeeNotRound(double.Parse(RequestData.Amount), float.Parse(agentPercent), double.Parse(agentFlatFee));
                    agentAmount = double.Parse(RequestData.Amount) - agentFeeDbl;

                    agentAmount += oneStopFeeDbl;

                    writeLog("Amount : " + RequestData.Amount + " | ServiceFee : " + serviceFee +
                        " | AgentFee : " + agentFee + " | 1-Stop Fee : " + oneStopFee.ToString() +
                        " | AgentAmount : " + agentAmount.ToString());
                    #endregion

                    #region <-- Add By Tz Check Credit Limite and Terms For Non Balance Agent -->
                    if (isAgreement == "Y")
                    {
                        writeLog("Agent Total Amount : " + totalAgentAmount);
                        writeLog("AGREEMENT TYPE is Y. Balance will not be needed.");
                        writeLog("Credit Limit Start:" + credittemrstart);
                        writeLog("Credit Limit:" + creditlimit);
                        writeLog("Creditterm:" + creditterm);
                        if (!String.IsNullOrEmpty(credittemrstart))
                        {
                            writeLog("Credit term strt Not NULL");
                            dtStart = DateTime.Parse(credittemrstart);
                            double convertcreditterm = double.Parse(creditterm);
                            dtStartplusCreditterm = dtStart.AddDays(convertcreditterm);
                        }

                        // dtStart.Date.AddDays(addday);
                        if ((double.Parse(creditlimit) > 0 && double.Parse(creditterm) > 0))//if ((creditlimit != "0.00" && creditterm != "0"))//This condition will work if both creditlimit and creditterm have values
                        {
                            writeLog("Credit Limit and Credit Terms is grater than 0 creditlimit:" + creditlimit + "|creditterm:" + creditterm);
                            if (dtNow < dtStartplusCreditterm)
                            {
                                writeLog("Credit Term Not Expired yet currentdate:" + dtNow + "|creditterms:" + dtStartplusCreditterm);

                                avalcredit = double.Parse(creditlimit) - double.Parse(totalAgentAmount);
                                writeLog("avaliable credit:" + avalcredit);
                                if (avalcredit >= agentAmount)
                                {

                                    writeLog("Credit Enough = Agent ID : " + agentID.ToString() + "| CreditLimit = " + creditlimit + "| Total Using Amount :" + totalAgentAmount.ToString() + " | Avaliable Credit : " + avalcredit.ToString());

                                }
                                else
                                {
                                    writeLog("Credit Limit Exceeded = Agent ID : " + agentID.ToString() + "| CreditLimit = " + creditlimit + "| Total Using Amount :" + totalAgentAmount.ToString() + " | Avaliable Credit : " + avalcredit.ToString() + " | Agent Amount :" + agentAmount.ToString());

                                    rescode = "10";
                                    resdecs = "Credit Limit Exceeded";

                                    return Utils.getErrorRes(rescode, resdecs);
                                }
                            }
                            else
                            {
                                writeLog("Credit Term Expired = Agent ID : " + agentID.ToString() + " | CreditTerm : " + creditterm + " | CreditTermStartDate :" + credittemrstart + " | CurrentDate " + dtNow);

                                rescode = "10";
                                resdecs = "Credit Term Expired";
                                return Utils.getErrorRes(rescode, resdecs);
                            }
                        }
                        else if (double.Parse(creditlimit) > 0 || double.Parse(creditterm) > 0)//else if (creditlimit != "0.00" || creditterm != "0")//This Condition will work if there have value in creditlimit or in creditterm
                        {
                            writeLog("Credit Limit OR Credit Terms is grater than 0 creditlimit:" + creditlimit + "|creditterm:" + creditterm);
                            if (double.Parse(creditlimit) > 0)
                            {
                                writeLog("Credit Limit  is grater than 0 creditlimit:" + creditlimit);
                                avalcredit = double.Parse(creditlimit) - double.Parse(totalAgentAmount);
                                if (avalcredit >= agentAmount)
                                {
                                    writeLog("Credit Enough = Agent ID : " + agentID.ToString() + " | Credit : " + avalcredit.ToString());
                                }
                                else
                                {
                                    writeLog("Credit Limit Exceeded = Agent ID : " + agentID.ToString() + "| CreditLimit = " + creditlimit + "| Total Using Amount :" + totalAgentAmount.ToString() + " | Avaliable Credit : " + avalcredit.ToString() + " | Agent Amount :" + agentAmount.ToString());

                                    rescode = "10";
                                    resdecs = "Credit Limit Exceeded";
                                    return Utils.getErrorRes(rescode, resdecs);
                                }
                            }
                            else if (double.Parse(creditterm) > 0)
                            {
                                writeLog("Credit Credit Terms is grater than 0 creditterm:" + creditterm);
                                if (dtNow < dtStartplusCreditterm)
                                {
                                    writeLog("Credit Terms Still avaliable CurrentDate:" + dtNow + "ExpiryDate:" + dtStartplusCreditterm);
                                }
                                else
                                {
                                    writeLog("Credit Term Expired = Agent ID : " + agentID.ToString() + " | CreditTerm : " + creditterm + " | CreditTermStartDate :" + credittemrstart + " | CurrentDate " + dtNow);

                                    rescode = "10";
                                    resdecs = "Credit Term Expired";
                                    return Utils.getErrorRes(rescode, resdecs);
                                }
                            }
                        }


                    }
                    #endregion

                    RequestData.ResCode = "00";
                    RequestData.ResDesc = "Success";

                }
                else
                {
                    rescode = "01";
                    resdecs = "Invalid Services";
                    return Utils.getErrorRes(rescode, resdecs);
                }
            }
            else
            {
                rescode = "01";
                resdecs = "System Busy";
                return Utils.getErrorRes(rescode, resdecs);
            }
            #endregion
        }
        RepaymentServiceFeesResMdl resmodel = new RepaymentServiceFeesResMdl();
        resmodel.Version = RequestData.Version;
        resmodel.MessageID = RequestData.MessageID;
        resmodel.ResCode = RequestData.ResCode;
        resmodel.ResDesc = RequestData.ResDesc;
        resmodel.ServiceFee = serviceFee;
        resmodel.Amount = RequestData.Amount;

        string repaymentSerFeeRes = Utils.getRepaymentServiceFeeRes(resmodel);
        return repaymentSerFeeRes;
    }

    public RepaymentServiceFeesReqMdl IsValidateRepaymentServiceFeeReq(Hashtable ht)
    {
        RepaymentServiceFeesReqMdl requestData = new RepaymentServiceFeesReqMdl();

        requestData.Result = true;
        if (ht.ContainsKey("Version"))
        {
            requestData.Version = ht["Version"].ToString();
        }
        else
        {
            requestData.ResCode = "06";
            requestData.ResDesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            requestData.Result = false;
            return requestData;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            requestData.TimeStamp = ht["TimeStamp"].ToString();
        }
        else
        {
            requestData.ResCode = "06";
            requestData.ResDesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            requestData.Result = false;
            return requestData;
        }

        if (ht.ContainsKey("MessageID"))
        {
            requestData.MessageID = ht["MessageID"].ToString();
        }
        else
        {
            requestData.ResCode = "06";
            requestData.ResDesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            requestData.Result = false;
            return requestData;
        }

        if (ht.ContainsKey("Email"))
        {
            requestData.Email = ht["Email"].ToString();
        }
        else
        {
            requestData.ResCode = "06";
            requestData.ResDesc = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            requestData.Result = false;
            return requestData;
        }

        if (ht.ContainsKey("Password"))
        {
            requestData.Password = ht["Password"].ToString();
        }
        else
        {
            requestData.ResCode = "06";
            requestData.ResDesc = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            requestData.Result = false;
            return requestData;
        }

        if (ht.ContainsKey("TaxID"))
        {
            requestData.TaxID = ht["TaxID"].ToString();
        }
        else
        {
            requestData.ResCode = "06";
            requestData.ResDesc = "Invalid Request";
            writeLog("Error in Validation : Missing TaxID <TaxID> Tag");
            requestData.Result = false;
            return requestData;
        }
        if (ht.ContainsKey("Amount"))
        {
            requestData.Amount = ht["Amount"].ToString();
        }
        else
        {
            requestData.ResCode = "06";
            requestData.ResDesc = "Invalid Request";
            writeLog("Error in validation : Missing Amount <Amount> Tag");
            requestData.Result = false;
            return requestData;
        }


        if (String.IsNullOrEmpty(requestData.Version) || String.IsNullOrEmpty(requestData.TimeStamp) || String.IsNullOrEmpty(requestData.MessageID) || String.IsNullOrEmpty(requestData.Email) || String.IsNullOrEmpty(requestData.Password) || String.IsNullOrEmpty(requestData.Email) || String.IsNullOrEmpty(requestData.Amount))//|| String.IsNullOrEmpty(ref1))// || String.IsNullOrEmpty(amount)) //String.IsNullOrEmpty(ref2) ||
        {
            requestData.ResCode = "07";
            requestData.ResDesc = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            requestData.Result = false;
            return requestData;
        }

        //Check Authecation
        string errmsg = string.Empty;
        DataSet ds = null;
        // DataSet dsBiller = null;
        bool flg = false;
        string passwordDB = "";
        string userStatusDB = "";
        string appver = string.Empty;
        flg = _agentWCF.getAuthentication(requestData.Email, requestData.Password,out ds, out errmsg);
        if (flg)
        {
            try
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    int.TryParse(ds.Tables[0].Rows[0]["AGENTID"].ToString(), out agentID);
                    this.agentCode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
                    this.servicePercent = Convert.ToString(ds.Tables[0].Rows[0]["AGENTFEEPERCENT"]);
                    this.agentName = ds.Tables[0].Rows[0]["AGENTNAME"].ToString();
                    this.branchCode = ds.Tables[0].Rows[0]["BRANCHCODE"].ToString();
                    this.branchName = ds.Tables[0].Rows[0]["BRANCHNAME"].ToString();
                    passwordDB = Convert.ToString(ds.Tables[0].Rows[0]["AGENTUSERPASSWORD"]);
                    userStatusDB = Convert.ToString(ds.Tables[0].Rows[0]["USERSTATUS"]);
                    appver = Convert.ToString(ds.Tables[0].Rows[0]["APPVERSION"]);

                    writeLog("APPVERSION:" + appver + " AGETN ID : " + agentID.ToString() + " | AGENT CODE : " + agentCode + " | AGENT NAME : " + agentName + " | BRANCH CODE : " + branchCode);


                    if (passwordDB != requestData.Password)
                    {
                        requestData.ResCode = "05";
                        requestData.ResDesc = "Incorrect Password";
                        writeLog(requestData.ResDesc + errmsg);
                        requestData.Result = false;
                        return requestData;

                    }
                    else if (userStatusDB != "Y")
                    {
                        requestData.ResCode = "05";
                        requestData.ResDesc = "Login ID Locked";
                        writeLog(requestData.ResDesc + errmsg);
                        requestData.Result = false;
                        return requestData;
                    }

                }
                else
                {
                    requestData.ResCode = "05";
                    requestData.ResDesc = "Incorrect LoginID";
                    writeLog(requestData.ResDesc + errmsg);
                    requestData.Result = false;
                }
                //}
                //else
                //{
                //    code = "05";
                //    desp = "Authentication Failed";
                //    writeLog("Error in Authentication : " + errmsg);
                //    return false;
                //}
            }
            catch (Exception ex)
            {
                writeLog("Error In Authtentication Inquiry Request" + ex.Message);
            }
        }
        else
        {
            requestData.ResCode = "--";
            requestData.ResDesc = "DB Error";
            writeLog("Error in Authentication : " + errmsg);
            requestData.Result = false;
            return requestData;
        }
        return requestData;
    }
    #endregion

    #region <-- Inquiry -->
    
    public string inquiry2Biller(string reqXml)
    {
        writeLog("$$$$$$$$$$$$$$$ inquiry2Biller $$$$$$$$$$$$$$$");
        writeLog("REQ XML : " + reqXml);
        #region <-- Variable region -->
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;

        string ref1 = string.Empty;
        string ref2 = string.Empty;
        string ref3 = string.Empty;
        string ref4 = string.Empty;
        string ref5 = string.Empty;
        var aeonref5 = string.Empty;
        string ref1Name = string.Empty;
        string ref2Name = string.Empty;
        string ref3Name = string.Empty;
        string ref4Name = string.Empty;
        string ref5Name = string.Empty;
        string amount = string.Empty;
        string inquirytype = string.Empty;
        string locLatitude = string.Empty;
        string locLongitude = string.Empty;
        string rescode = string.Empty;
        string resdecs = string.Empty;
        string merchantname = string.Empty;
        string merchantid = string.Empty;
        string merchantlogo = string.Empty;
        string productdesc = string.Empty;
        string status = string.Empty;
        string expiry = string.Empty;
        string taxID = string.Empty;
        string MapTaxID = string.Empty;

        string messageid = string.Empty;
        string requestedby = string.Empty;
        string hashvalue = string.Empty;
        string invoiceno = string.Empty;
        string isAgreement = "N";
        string response = "";
        string topupType;
        string TodayTxnCount = string.Empty;
        string TodayTxnAmount = string.Empty;
        string totalAgentAmount = string.Empty;
        string totalAmount = string.Empty;
        string qr = string.Empty;
        string taxxid = string.Empty;
        string esbaGiftCardInqMethod = "EnquiryGiftCardPIN";
        string esbaGiftCardAirtimeInqMethod = "EnquiryGiftCardAirTime";
        string canalPlusReqType = string.Empty;
        string sessionID = string.Empty;
        string partnerCode = string.Empty;
        string customerID = string.Empty;

        #endregion

        try
        {
            string imgURL = string.Empty;
            Hashtable ht = Utils.getHTableFromXML(reqXml);
            if (!IsValidateInquiryReq(ht, out code, out desp, out version, out ts, out email, out password, out ref1, out ref2, out ref3, out ref4, out ref5, out inquirytype, out amount, out taxID, out ref1Name, out ref2Name, out ref3Name, out requestedby, out messageid, out qr, out MapTaxID, out canalPlusReqType, out sessionID))
            {
                return Utils.getErrorRes(code, desp);
            }
            else
            {
                #region <-- Check the biller is 123 Or Airline not using start from 25-April-2016 Tz -->

                #endregion

                #region <-- Check the biller is 123  25-April-2016 Tz -->
                // MapTaxID
                if (MapTaxID == "1230000000000")
                {
                    if (IsABCCashCard(ref1))
                    {
                        if (CheckAbcCashAmount(amount))
                        {
                            writeLog("$$$$$$$$$$$$$$$$$$$$$$$ This Is ABC CashCard $$$$$$$$$$$$$$$$$$$$$$$$");
                            this.serviceFlatFee = ConfigurationManager.AppSettings["AbcCardServiceFlatFee"].ToString();
                            this.servicePercent = ConfigurationManager.AppSettings["AbcCardServicePercentFee"].ToString();
                            this.agentFlatFee = ConfigurationManager.AppSettings["AbcCardAgentFlatFee"].ToString();
                            this.agentPercent = ConfigurationManager.AppSettings["AbcCardAgentPercentFee"].ToString();
                            this.oneStopFlatFee = ConfigurationManager.AppSettings["AbcCard1StopFlatFee"].ToString();
                            this.oneStopPercent = ConfigurationManager.AppSettings["AbcCard1StopPercentFee"].ToString();
                            taxxid = "AbcCashCard";
                        }
                        else
                        {
                            string minamt = string.Empty;
                            string maxamt = string.Empty;
                            minamt = ConfigurationManager.AppSettings["MinAmount"].ToString();
                            maxamt = ConfigurationManager.AppSettings["MaxAmount"].ToString();
                            return Utils.getErrorRes("06", string.Format("Topup amount must be between {0} and {1}", int.Parse(minamt).ToString("#,###"), int.Parse(maxamt).ToString("#,###")));
                        }
                    }
                    else
                    {
                        #region <-- If Request is from 123  get Merchent ID from 123 to set service fees for Airline. -->
                        writeLog("$$$$$$$$$$$$$$$$$$Request From QR$$$$$$$$$$$$$$$$$$$$$$");
                        string agentcode = ConfigurationManager.AppSettings["123ChannelCode"].ToString();//"1STOP";
                        string hashstr = Utils.hashstrReq123(version, ts, messageid, agentcode, ref1);
                        string reqXML123 = "<InquiryReq><Version>" + version + "</Version><TimeStamp>" + ts
                            + "</TimeStamp>"
                            + "<MessageID>" + messageid + "</MessageID>"
                            + "<AgentCode>" + agentcode + "</AgentCode>"
                           + "<PaymentCode>" + ref1
                            + "</PaymentCode><RequestBy>" + MapTaxID
                            + "</RequestBy><Hash>" + hashstr
                            + "</Hash></InquiryReq>";
                        writeLog("MESSAGE ID :" + merchantid + "| Payment Code :" + ref1 + "taxID :" + MapTaxID);

                        RouteAPI api_service = new RouteAPI();
                        writeLog("123 Inquiry Req QR : " + reqXML123);
                        response = api_service.Apicalling123(reqXML123);
                        writeLog("123 Inquiry Res QR : " + response);
                        Hashtable htt = Utils.getHTableFromXML(response);
                        string responseCode = string.Empty;
                        string resDesc = string.Empty;
                        if (IsValidateInquiryFirstRes123(htt, out taxxid, out responseCode, out resDesc))
                        {
                            writeLog("$$$$$$$$$$$$$$$$QR 123 RESPONSE OK Old Tax ID" + MapTaxID + "| taxid:" + taxxid + "$$$$$$$$$$$$$$$$$$$$$$$$");
                        }
                        else
                        {

                            writeLog("$$$$$$$$$$$$$$$$$VALADATE NOT OK$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
                            return Utils.getErrorRes(responseCode, resDesc);
                        }
                        #endregion
                    }
                }
                #endregion

                DataSet dsBiller = null;
                string errmsg = string.Empty;
                string billerid = string.Empty;
                StringBuilder sb = new StringBuilder();
                if (_agentWCF.checkBillerID(taxID, agentID, email,out dsBiller, out errmsg))
                {
                    if (dsBiller.Tables[0].Rows.Count > 0)

                    {
                        billerid = Convert.ToString(dsBiller.Tables[0].Rows[0]["BILLERID"]);
                        billerName = dsBiller.Tables[0].Rows[0]["BILLERNAME"].ToString();

                        if (!string.IsNullOrEmpty(dsBiller.Tables[0].Rows[0]["BILLERLOGO"].ToString()))
                            billerLogo = Convert.ToBase64String((byte[])dsBiller.Tables[0].Rows[0]["BILLERLOGO"]);

                        imgURL = ConfigurationManager.AppSettings["BillerLogoPath"] + dsBiller.Tables[0].Rows[0]["BILLERID"].ToString() + ".png";

                        //billerlogo = dsBiller.Tables[0].Rows[0]["IMAGESTRING"].ToString();

                        ref1Name = dsBiller.Tables[0].Rows[0]["REF1NAME"].ToString();
                        ref2Name = dsBiller.Tables[0].Rows[0]["REF2NAME"].ToString();
                        ref3Name = dsBiller.Tables[0].Rows[0]["REF3NAME"].ToString();
                        ref4Name = dsBiller.Tables[0].Rows[0]["REF4NAME"].ToString();
                        ref5Name = dsBiller.Tables[0].Rows[0]["REF5NAME"].ToString();
                        if (MapTaxID == "1230000000000")
                        {
                            if (taxxid == "1230000000000")
                            {
                                serviceFlatFee = dsBiller.Tables[0].Rows[0]["SERVICEFLATFEE"].ToString();
                                servicePercent = dsBiller.Tables[0].Rows[0]["SERVICEPERCENTFEE"].ToString();
                                agentFlatFee = dsBiller.Tables[0].Rows[0]["AGENTFLATFEE"].ToString();
                                agentPercent = dsBiller.Tables[0].Rows[0]["AGENTPERCENTFEE"].ToString();
                                oneStopFlatFee = dsBiller.Tables[0].Rows[0]["ONESTOPFLATFEE"].ToString();
                                oneStopPercent = dsBiller.Tables[0].Rows[0]["ONESTOPPERCENTFEE"].ToString();
                            }
                            else
                            {
                                //will use servicefees/agentfees and onestopfees from web config for airline that implement at IsValidateInquiryFirstRes123(htt, out taxxid)
                            }
                        }
                        else
                        {
                            serviceFlatFee = dsBiller.Tables[0].Rows[0]["SERVICEFLATFEE"].ToString();
                            servicePercent = dsBiller.Tables[0].Rows[0]["SERVICEPERCENTFEE"].ToString();
                            agentFlatFee = dsBiller.Tables[0].Rows[0]["AGENTFLATFEE"].ToString();
                            agentPercent = dsBiller.Tables[0].Rows[0]["AGENTPERCENTFEE"].ToString();
                            oneStopFlatFee = dsBiller.Tables[0].Rows[0]["ONESTOPFLATFEE"].ToString();
                            oneStopPercent = dsBiller.Tables[0].Rows[0]["ONESTOPPERCENTFEE"].ToString();
                        }

                        #region <-- Add By Tz To check Credit terms and Limited For Non Balance Agent -->
                        if (string.IsNullOrEmpty(ref1)) ref1 = dsBiller.Tables[0].Rows[0]["REFID1"].ToString(); //Added By hnt 25-Mar-2015

                        creditlimit = dsBiller.Tables[0].Rows[0]["CREDITLIMIT"].ToString();
                        creditterm = dsBiller.Tables[0].Rows[0]["CREDITTERM"].ToString();
                        credittemrstart = dsBiller.Tables[0].Rows[0]["CREDITTERMSTART"].ToString();
                        isAutoCreditReset = dsBiller.Tables[0].Rows[0]["ISAUTORESETCREDIT"] == DBNull.Value ? "N" : dsBiller.Tables[0].Rows[0]["ISAUTORESETCREDIT"].ToString();
                        isSendCreditResetEmail = dsBiller.Tables[0].Rows[0]["ISSENDCREDITRESETEMAIL"] == DBNull.Value ? "N" : dsBiller.Tables[0].Rows[0]["ISSENDCREDITRESETEMAIL"].ToString();

                        isAgreement = dsBiller.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString(); //Added By HNT 26-03-2015                     
                        if (dsBiller.Tables[1].Rows.Count > 0)
                        {
                            TodayTxnCount = String.IsNullOrEmpty(dsBiller.Tables[1].Rows[0]["TODAYTXNCOUNT"].ToString()) ? "0" : dsBiller.Tables[1].Rows[0]["TODAYTXNCOUNT"].ToString();
                            TodayTxnAmount = String.IsNullOrEmpty(dsBiller.Tables[1].Rows[0]["TODAYTXNAMOUNT"].ToString()) ? "0" : dsBiller.Tables[1].Rows[0]["TODAYTXNAMOUNT"].ToString();
                        }
                        if (dsBiller.Tables[2].Rows.Count > 0)
                        {
                            totalAgentAmount = String.IsNullOrEmpty(dsBiller.Tables[2].Rows[0]["AGENTAMOUNT"].ToString()) ? "0" : dsBiller.Tables[2].Rows[0]["AGENTAMOUNT"].ToString();
                        }

                        if (String.IsNullOrEmpty(amount))
                            amount = "0";

                        if (string.IsNullOrEmpty(serviceFlatFee))
                            serviceFlatFee = "0";
                        if (string.IsNullOrEmpty(servicePercent))
                            servicePercent = "0";

                        if (string.IsNullOrEmpty(agentFlatFee))
                            agentFlatFee = "0";

                        if (string.IsNullOrEmpty(agentPercent))
                            agentPercent = "0";
                        if (string.IsNullOrEmpty(creditterm))
                            creditterm = "0";
                        if (string.IsNullOrEmpty(creditlimit))
                            creditlimit = "0.00";

                        if (MapTaxID == "0000000000009")//663 Remit Calculate  fees as below
                        {
                            writeLog("$$$$$$$$$$$$$$$$$$ This IS 663 Cashout $$$$$$$$$$$$$$$$$$$$$$");
                            DataSet ds = new DataSet();
                            string minAmount = string.Empty;
                            string maxAmount = string.Empty;
                            string txnFee = string.Empty;
                            string serviceCharge = string.Empty;
                            string agentCommissionPercent = string.Empty;
                            string superAgentCommissionPercent = string.Empty;
                            if (_agentWCF.get663FeesByAmount(int.Parse(billerid), decimal.Parse(amount),out ds, out errmsg))
                            {
                                minAmount = ds.Tables[0].Rows[0]["MINAMOUNT"].ToString();
                                maxAmount = ds.Tables[0].Rows[0]["MAXAMOUNT"].ToString();
                                txnFee = ds.Tables[0].Rows[0]["TRANSACTIONFEES"].ToString();
                                serviceCharge = "0"; //ds.Tables[0].Rows[0]["SERVICECHARGE"].ToString();
                                agentCommissionPercent = ds.Tables[0].Rows[0]["AGENTCOMMISSIONPERCENT"].ToString();
                                superAgentCommissionPercent = ds.Tables[0].Rows[0]["SUPERAGENTCOMMISSIONPERCENT"].ToString();
                                writeLog("amount range:" + minAmount + "to" + maxAmount + "|TransactionFees:" + txnFee + "|ServiceCharge:" + serviceCharge + "|AgentCommissionPercent:" + agentCommissionPercent + "|SuperAgentComissionPercent:" + superAgentCommissionPercent);
                                //serviceFeeDbl = (double.Parse(txnFee) + double.Parse(serviceCharge));
                                serviceFeeDbl = double.Parse(serviceCharge);
                                serviceFee = serviceFeeDbl.ToString("###0.00");
                                totalAmount = (double.Parse(amount) + serviceFeeDbl).ToString("###0.00");

                                //  oneStopFeeDbl = ((double.Parse(txnFee) + double.Parse(serviceCharge)) - ((double.Parse(txnFee) * double.Parse(agentCommissionPercent)) / 100));
                                oneStopFeeDbl = 0;
                                oneStopFee = oneStopFeeDbl.ToString("###0.00");

                                agentFeeDbl = ((double.Parse(txnFee) * double.Parse(agentCommissionPercent)) / 100);
                                agentAmount = double.Parse(amount) + agentFeeDbl;
                                agentAmount += oneStopFeeDbl;
                                writeLog("Amount : " + amount + " | ServiceFee : " + serviceFee +
                               " | AgentFee : " + agentFee + " | 1-Stop Fee : " + oneStopFee.ToString() +
                               " | AgentAmount : " + agentAmount.ToString());
                            }
                            else
                            {
                                writeLog("Error In Getting 663 Service Fees");
                                return Utils.getErrorRes("06", "Transaction not successful cannot calculate service fees.");
                            }
                        }
                        else
                        {
                            // <-- Calculate Agent Fee -->
                            writeLog("Service Percent : " + servicePercent + ", Service Flat Fee : " + serviceFlatFee + " Amount : " + amount);
                            serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                            serviceFee = serviceFeeDbl.ToString("###0.00");

                            totalAmount = (double.Parse(amount) + serviceFeeDbl).ToString("###0.00");

                            oneStopFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(oneStopPercent), double.Parse(oneStopFlatFee));
                            oneStopFee = oneStopFeeDbl.ToString("###0.00");

                            agentFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(agentPercent), double.Parse(agentFlatFee));
                            agentAmount = double.Parse(amount) - agentFeeDbl;

                            agentAmount += oneStopFeeDbl;

                            writeLog("Amount : " + amount + " | ServiceFee : " + serviceFee +
                                " | AgentFee : " + agentFee + " | 1-Stop Fee : " + oneStopFee.ToString() +
                                " | AgentAmount : " + agentAmount.ToString());
                        }
                        #endregion

                        #region <-- Add By Tz Check Credit Limit and Terms For Non Balance Agent -->
                        if (isAgreement == "Y")
                        {
                            writeLog("Agent Total Amount : " + totalAgentAmount);
                            writeLog("AGREEMENT TYPE is Y. Balance will not be needed.");
                            writeLog("Credit Limit Start:" + credittemrstart);
                            writeLog("Credit Limit:" + creditlimit);
                            writeLog("Creditterm:" + creditterm);
                            if (MapTaxID == "0000000000009")
                            {
                                writeLog("$$$$$$$$$$$$$$ 663 CashOut is not allow for Non BalanceBase Agent $$$$$$$$$$$$$$$$$$$");
                                return Utils.getErrorRes("10", "Agent not allowed");
                            }

                            CreditLimitResultModel result = new CreditLimitResultModel();
                            CreditLimitModel CreditLimitMdl = new CreditLimitModel();
                            CreditLimitMdl.totalAgentAmount = totalAgentAmount;
                            result = isEnoughCreditTermsAndLimit(CreditLimitMdl);
                            if (!result.result)
                            {
                                return Utils.getErrorRes(result.rescode, result.resdesc);
                            }
                            #region <-- Not use credit terms checking old -->
                            //if (!String.IsNullOrEmpty(credittemrstart))
                            //{
                            //    writeLog("Credit term strt Not NULL");
                            //    dtStart = DateTime.Parse(credittemrstart);
                            //    double convertcreditterm = double.Parse(creditterm);
                            //    dtStartplusCreditterm = dtStart.AddDays(convertcreditterm);
                            //}

                            //// dtStart.Date.AddDays(addday);
                            //if ((double.Parse(creditlimit) > 0 && double.Parse(creditterm) > 0))//if ((creditlimit != "0.00" && creditterm != "0"))//This condition will work if both creditlimit and creditterm have values
                            //{
                            //    writeLog("Credit Limit and Credit Terms is grater than 0 creditlimit:" + creditlimit + "|creditterm:" + creditterm);
                            //    if (dtNow < dtStartplusCreditterm)
                            //    {
                            //        writeLog("Credit Term Not Expired yet currentdate:" + dtNow + "|creditterms:" + dtStartplusCreditterm);

                            //        avalcredit = double.Parse(creditlimit) - double.Parse(totalAgentAmount);
                            //        writeLog("avaliable credit:" + avalcredit);
                            //        if (avalcredit >= agentAmount)
                            //        {
                            //            writeLog("Credit Enough = Agent ID : " + agentID.ToString() + "| CreditLimit = " + creditlimit + "| Total Using Amount :" + totalAgentAmount.ToString() + " | Avaliable Credit : " + avalcredit.ToString());

                            //        }
                            //        else
                            //        {
                            //            writeLog("Credit Limit Exceeded = Agent ID : " + agentID.ToString() + "| CreditLimit = " + creditlimit + "| Total Using Amount :" + totalAgentAmount.ToString() + " | Avaliable Credit : " + avalcredit.ToString() + " | Agent Amount :" + agentAmount.ToString());

                            //            rescode = "10";
                            //            resdecs = "Credit Limit Exceeded";
                            //            return Utils.getErrorRes(rescode, resdecs);
                            //        }
                            //    }
                            //    else
                            //    {
                            //        writeLog("Credit Term Expired = Agent ID : " + agentID.ToString() + " | CreditTerm : " + creditterm + " | CreditTermStartDate :" + credittemrstart + " | CurrentDate " + dtNow);

                            //        if (isAutoCreditReset == "Y")
                            //        {
                            //            writeLog("Auto Reset Credit Terms is Yes");
                            //            if (_agentWCF.resetCredit(out errmsg, this.branchCode, this.agentCode))
                            //            {
                            //                writeLog("ResetCreditLimit Success");
                            //                if (isSendCreditResetEmail == "Y")
                            //                {

                            //                    Task.Factory.StartNew(() => sendCreditResetEmail(this.agentCode, this.agentName, this.branchCode, creditterm, creditlimit, dtNow.ToShortDateString()));

                            //                }
                            //            }
                            //            else
                            //            {
                            //                writeLog("Error in reset Credit Terms" + errmsg);
                            //                rescode = "10";
                            //                resdecs = "Credit Term Expired";

                            //                return Utils.getErrorRes(rescode, resdecs);
                            //            }

                            //        }
                            //        else
                            //        {
                            //            rescode = "10";
                            //            resdecs = "Credit Term Expired";

                            //            return Utils.getErrorRes(rescode, resdecs);
                            //        }
                            //    }


                            //}
                            //else if (double.Parse(creditlimit) > 0 || double.Parse(creditterm) > 0)//else if (creditlimit != "0.00" || creditterm != "0")//This Condition will work if there have value in creditlimit or in creditterm
                            //{
                            //    writeLog("Credit Limit OR Credit Terms is grater than 0 creditlimit:" + creditlimit + "|creditterm:" + creditterm);
                            //    if (double.Parse(creditlimit) > 0)
                            //    {
                            //        writeLog("Credit Limit  is grater than 0 creditlimit:" + creditlimit);
                            //        avalcredit = double.Parse(creditlimit) - double.Parse(totalAgentAmount);
                            //        if (avalcredit >= agentAmount)
                            //        {
                            //            writeLog("Credit Enough = Agent ID : " + agentID.ToString() + " | Credit : " + avalcredit.ToString());

                            //        }
                            //        else
                            //        {
                            //            writeLog("Credit Limit Exceeded = Agent ID : " + agentID.ToString() + "| CreditLimit = " + creditlimit + "| Total Using Amount :" + totalAgentAmount.ToString() + " | Avaliable Credit : " + avalcredit.ToString() + " | Agent Amount :" + agentAmount.ToString());

                            //            rescode = "10";
                            //            resdecs = "Credit Limit Exceeded";

                            //            return Utils.getErrorRes(rescode, resdecs);
                            //        }
                            //    }
                            //    else if (double.Parse(creditterm) > 0)
                            //    {
                            //        writeLog("Credit Credit Terms is grater than 0 creditterm:" + creditterm);
                            //        if (dtNow < dtStartplusCreditterm)
                            //        {
                            //            writeLog("Credit Terms Still avaliable CurrentDate:" + dtNow + "ExpiryDate:" + dtStartplusCreditterm);
                            //        }
                            //        else
                            //        {
                            //            writeLog("Credit Term Expired = Agent ID : " + agentID.ToString() + " | CreditTerm : " + creditterm + " | CreditTermStartDate :" + credittemrstart + " | CurrentDate " + dtNow);
                            //            if (isAutoCreditReset == "Y")
                            //            {
                            //                writeLog("Auto Reset Credit Terms is Yes");
                            //                if (_agentWCF.resetCredit(out errmsg, this.branchCode, this.agentCode))
                            //                {
                            //                    writeLog("ResetCreditLimit Success");
                            //                    if (isSendCreditResetEmail == "Y")
                            //                    {

                            //                        Task.Factory.StartNew(() => sendCreditResetEmail(this.agentCode, this.agentName, this.branchCode, creditterm, creditlimit, dtNow.ToShortDateString()));

                            //                    }
                            //                }
                            //                else
                            //                {
                            //                    writeLog("Error in reset Credit Terms" + errmsg);
                            //                    rescode = "10";
                            //                    resdecs = "Credit Term Expired";

                            //                    return Utils.getErrorRes(rescode, resdecs);
                            //                }

                            //            }
                            //            else
                            //            {
                            //                rescode = "10";
                            //                resdecs = "Credit Term Expired";

                            //                return Utils.getErrorRes(rescode, resdecs);
                            //            }
                            //        }
                            //    }
                            //}
                            #endregion

                        }
                        else
                        {
                            writeLog("Agent Total Amount : " + totalAgentAmount);
                            writeLog("AGREEMENT TYPE is N. Balance will be needed.");
                            writeLog("Credit Limit Start:" + credittemrstart);
                            writeLog("Credit Limit:" + creditlimit);
                            writeLog("Creditterm:" + creditterm);
                            double avlBal = 0;
                            double ledBal = 0;


                            if (MapTaxID != "7777777777777" && MapTaxID != ConfigurationManager.AppSettings["123RemitCashOut"].ToString() && MapTaxID != "0000000000018" && MapTaxID != "0000000000009" && MapTaxID != "0000000000010" && MapTaxID != "0000000000011" && MapTaxID != "0000000000056")//if not MalarMyaineRedeem,123RemitCashOut , MalarMyaineCodeGenerate , 663 Cashout , MercyCorps Generate,MercyCorpsRedeem will check balance.
                            {
                                #region <-- Balance Base -->
                                writeLog("AGREEMENT TYPE is N. Balance must be available.");
                                if (!_agentWCF.getBalance(agentID,out avlBal, out ledBal))
                                {
                                    writeLog("Error in getBalance");
                                }

                                if (avlBal >= agentAmount)
                                {
                                    writeLog("Balance Enough = Agent ID : " + agentID.ToString() + " | Balance : " + avlBal.ToString());

                                    CreditLimitResultModel result = new CreditLimitResultModel();
                                    CreditLimitModel CreditLimitMdl = new CreditLimitModel();
                                    CreditLimitMdl.totalAgentAmount = totalAgentAmount;
                                    result = isEnoughCreditTermsAndLimit(CreditLimitMdl);
                                    if (!result.result)
                                    {
                                        return Utils.getErrorRes(result.rescode, result.resdesc);
                                    }
                                }
                                else
                                {
                                    writeLog("Balance NOT Enough = Agent ID : " + agentID.ToString() + " | Balance : " + avlBal.ToString());

                                    rescode = "10";
                                    resdecs = "Insufficient amount. Please load your balance.";

                                    return Utils.getErrorRes(rescode, resdecs);
                                }
                                #endregion
                            }
                        }
                        #endregion
                    }
                    else
                    {
                        rescode = "01";
                        resdecs = "Invalid Services";
                        return Utils.getErrorRes(rescode, resdecs);
                    }
                }
                writeLog("$$$$$$$$$$$$$$$$ This is Biller Requests $$$$$$$$$$$$$$$$");

                #region <-- 123 Biller -->
                // Request to Biller API 
                
                if (MapTaxID == "1230000000000")// || taxID == "0000000000010" || taxID == "0000000000012" || taxID == "0000000000011" ||  taxID == "0000000000013" || taxID == "0000000000014") /////123
                {

                    //  0000000000008 Man Yatanar bone
                    //  0000000000007 Myanmar National
                    writeLog("This is 1-2-3.");
                    if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                    {

                        #region Enquiry Response When simulator is turn on
                        writeLog("Simulator Y");
                        //agentFee = "000000030000";
                        status = "PE";
                        productdesc = "Air Ticket";
                        amount = "2000";
                        serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));//double.Parse((double.Parse(agentFee)).ToString("#,##0.00"));
                        serviceFee = serviceFeeDbl.ToString("###0.00");

                        inquiryResponseModel inqRes = new inquiryResponseModel();
                        inqRes.ResCode = "00";
                        inqRes.ResDesc = "Success";
                        inqRes.taxID = taxID;
                        inqRes.merchantname = merchantname;
                        inqRes.merchantlogo = merchantlogo;
                        inqRes.billername = billerName;
                        inqRes.billerlogo = billerLogo;
                        inqRes.ref1 = ref1;
                        inqRes.ref2 = ref2;
                        inqRes.ref3 = ref3;
                        inqRes.ref4 = ref4;
                        inqRes.ref5 = ref5;
                        inqRes.ref1Name = ref1Name;
                        inqRes.ref2Name = ref2Name;
                        inqRes.ref3Name = ref3Name;
                        inqRes.ref4Name = ref4Name;
                        inqRes.ref5Name = ref5Name;
                        inqRes.amount = amount;
                        inqRes.serviceFee = serviceFee;
                        inqRes.status = status;
                        inqRes.expiry = expiry;
                        inqRes.productDescription = productdesc;
                        inqRes.imgUrl = imgURL;

                        return Utils.getInquiryRes(inqRes);

                        #endregion
                    }
                    else
                    {
                        #region <-- Enquery Request xml sample -->
                        // string amountTo123 = Utils.getFromOrginalTo12Digit(amount);
                        //    string hashstr = Utils.hashstrInquiry(version, ts, "1STOP",  inquirytype, ref1, ref2, amountTo123);
                        //                        <InquiryReq>
                        //<Version>1.0</Version>
                        //<TimeStamp>yyyyMMddhhmmssffff</TimeStamp>
                        //   <MessageID>eee43434333</MessageID>
                        //<AgentCode>1STOP</AgentCode> // Agent Code from 1-2-3 system
                        //<PaymentCode></PaymentCode> //Payment Code
                        //<RequestedBy></RequestedBy> //UserEmail
                        //<Hash></Hash> // Version+ TimeStamp+ MessageID + AgentCode+ PaymentCode 
                        //</InquiryReq>
                        #endregion

                        #region <-- When Simulater is turn off -->
                        string agentcode = string.Empty;
                        string hashstr = string.Empty;
                        string reqXML123 = string.Empty;
                        agentcode = ConfigurationManager.AppSettings["123ChannelCode"].ToString();
                        hashstr = Utils.hashstrReq123(version, ts, messageid, agentcode, ref1);

                        if (IsABCCashCard(ref1))
                        {
                            //                            <InquiryReq>
                            //<Version></Version>
                            //<TimeStamp> </TimeStamp>
                            //                <MessageID> </MessageID>
                            //<AgentCode></AgentCode>
                            //<PaymentCode></PaymentCode> // PAN
                            //<InvoiceNo></InvoiceNo>// InvoiceNo
                            //<Amount></Amount> // Amount 12 digits with padding 0
                            //<RequestedBy></RequestedBy> // MerchantID
                            //<Hash></Hash>
                            //</InquiryReq>
                            reqXML123 = "<InquiryReq><Version>" + version + "</Version><TimeStamp>" + ts
                                + "</TimeStamp>"
                                + "<MessageID>" + messageid + "</MessageID>"
                                + "<AgentCode>" + agentcode + "</AgentCode>"
                               + "<PaymentCode>" + ref1
                                + "</PaymentCode><RequestBy>" + ConfigurationManager.AppSettings["AbcCardMerchantID"].ToString()
                                + "</RequestBy><Amount>" + Utils.getFromOrginalTo12Digit(amount) + "</Amount><InvoiceNo></InvoiceNo><Hash>" + hashstr
                                + "</Hash></InquiryReq>";
                        }
                        else
                        {
                            reqXML123 = "<InquiryReq><Version>" + version + "</Version><TimeStamp>" + ts
                                + "</TimeStamp>"
                                + "<MessageID>" + messageid + "</MessageID>"
                                + "<AgentCode>" + agentcode + "</AgentCode>"
                               + "<PaymentCode>" + ref1
                                + "</PaymentCode><RequestBy>" + taxID
                                + "</RequestBy><Hash>" + hashstr
                                + "</Hash></InquiryReq>";
                        }
                        RouteAPI api_service = new RouteAPI();
                        writeLog("123 Inquiry Req : " + reqXML123);
                        response = api_service.Apicalling123(reqXML123);
                        writeLog("123 Inquiry Res : " + response);
                        Hashtable htt = Utils.getHTableFromXML(response);
                        // break response from Biller 

                        //out string version,out string ts,out string messageid,out string agentcode,out string code,out string desp,out string merchantid,out string merchantname,out string ref1,out string invoiceno,out string amount,out string productdesc,out string transtatus, out string expiry
                        //old  (htt, out  expiry, out  code, out  desp, out  version, out  ts, out  rescode, out  resdecs, out  merchantname, out  billerLogo, out  ref1, out  ref2, out  inquirytype, out  amount, out  productdesc, out  status))

                        if (!IsValidateInquiryRes123(htt, taxID, out  version, out ts, out  messageid, out agentcode, out  code, out  desp, out  merchantid, out  merchantname, out  ref1, out  ref2, out  amount, out  productdesc, out  status, out expiry))
                        {
                            return Utils.getErrorRes(code, desp);
                        }
                        if (code != "00")
                        {
                            return Utils.getErrorRes(code, desp);
                        }
                        else
                        {
                            writeLog("Amount : " + Utils.getFrom12DigitToOrginal(amount) + " | Service Percent : " + servicePercent + " | ServiceFlatFee : " + serviceFlatFee + "......");
                            serviceFeeDbl = Utils.getFee(double.Parse(Utils.getFrom12DigitToOrginal(amount)),
                                float.Parse(servicePercent), double.Parse(serviceFlatFee));//double.Parse((double.Parse(agentFee)).ToString("#,##0.00"));
                            serviceFee = serviceFeeDbl.ToString("###0.00");
                            writeLog("serviceFee : " + serviceFee);
                            //billerlogo = "iVBORw0KGgoAAAANSUhEUgAAADwAAAAyCAYAAAAA9rgCAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOxAAADsQBlSsOGwAABQpJREFUaEPtml8sJVccx2fuXKppmjT+/00aLYosWpI+dLd/ti3Vl1LdZrvXYld2V0sj2mqzb4KtJSkWdbnXbqXx3CckFUEED7pll40QJARPEhLEG9+ec2aGuXdmuPdSurfzSz6ZceZ3fuZzzz1nxgkOJPz8/MBxnNdD4/8n7NzozYSFhYHjeV7zojfi7+9Pj9oXvRFD+Kw4r2mkK1xVVcVWNDnq6+tVOVoMDg5ib2/vALm9r69Ps/0o4uPjsbW1Jd0BMD8/z9pDQ0OxtLQktQKLi4usPTAwkJ3Lsbm56VCPoitcUVEhdROjtrZWlaPF0NCQ1EMMub2/v19qEUPZR4+4uDhsbGxIPYCZmRnWHhwcjIWFBakVmJubY+0BAQHsXI719XWHehRDWMYQNoS1MYSldkNY0UcPQ9gQFsMQlsIQJhjCMoawIayNISy1G8KKPno818LDw8NSixjKPnroCYeEhGBlZUVqBdv9oO10x0O5E0J3S5T1KGcmTG8yIiKCERkZ6dBHDz1hs9nM9pflWvSc7pEJgoDw8PCDdorz3tmZCXuCnrAWepuCpyLMcyYHOO6wqGvCZtJPgIncDL0hCj2n7Rx/mOeOsKt4KHx4NMnn0o2e1whroTXqLgvX1dVBIAVi79Qi4fcZxP02jYRHT/FG5xRi79qIuFj8KGGWwwt4OFWI9qcFsE4VoHVahJ5bp28gI/ctmEwCOBOP5ORkbG9vS5XUwkdFZWUlm+vKfIqbwgKC385EfHkH4n56hNh7f+B1+9+I/r7FNWGeTAHejO9as/CjPRvldnoUKbdl4f6fFrQ/yUN6QQqpZ0JKSgp2dnakSmrh3t5ejI6OYmxszIHV1VWW39DQ4JBPcfMrLUrx5MbpKAReykbswylEl1td/krz5ENjdUgNzqSA/Fx471P8OnkdGTeTyHThjxXWw2azsfy2tjbV19qjOSwTeDHLbWE96I0V/vwJWiZyyQhfOJFwR0cHy29tbVVdOyVh+knS1do1YZ7zIUf6yTtyu/pjND35Cuk3ksmocx4LW61Wlk+P/9IIuydM5Xxe9IPPCz4Ms3S8VZuBpgkyh2+6J+zr68v+g4FCzwcGBlh+dXW168I1NTWskxyNjY2qHC3h8fFxqYcYynyBLER0cfulj6zIz3LR9iyPkH9A4+QVNA3nIfrNcLbApaamSlXEkF8hlczOzkpXHYMuZlTeOV9XODExEdnZ2YycnBwkJSWpctTCPDIzM5Gfn3+AMp++bHBklbaSx9KDv3IJeXjw+LoIOW9+bMG7n5PfQ2rRZ3xQUBCKiopQXFyMkpISWCwWh3oUu90uKR7G/v4+1tbW2HPc5RF2BWdhutBo5R1C3rDIs7FlwoKLnyVqXKePruNqHE9nZycTb25uVl07B2GBCb//xQWN66eDR6u0K3gk7COgefIa3vtSX1is4/lI/yeFb91PxwdXUnH56iEfXk1DWkYszC/RPy7ERfAoCgoKUFpaqmJkZORA+HTn8Dvim9ZrP7SzV8HjR0Ugwj7k0XONSFvQRt6f28h7tIxtKh/2idtIy4xxSfi4KCsrO11h//hUxHzbhFezvoFAnptaOUrohyKQOVzS9BGK6i/jjhNfEyx3L+GV0JfFV0+NGkq6urrQ3d2toqenB1FRUZp9TiRMHx0yJ5lzjtA6p1VLzYmEn0cMYW/nQNh5NfNW6FYut7u7i4SEBERHR3s1MTExWF5exj8VUvKfWoOKfQAAAABJRU5ErkJggg==";

                            inquiryResponseModel inqRes = new inquiryResponseModel();
                            inqRes.ResCode = code;
                            inqRes.ResDesc = desp;
                            inqRes.taxID = taxID;
                            inqRes.merchantname = merchantname;
                            inqRes.merchantlogo = string.Empty;
                            inqRes.billername = billerName;
                            inqRes.billerlogo = billerLogo;
                            inqRes.ref1 = ref1;
                            inqRes.ref2 = ref2;
                            inqRes.ref3 = ref3;
                            inqRes.ref4 = ref4;
                            inqRes.ref5 = ref5;
                            inqRes.ref1Name = ref1Name;
                            inqRes.ref2Name = ref2Name;
                            inqRes.ref3Name = ref3Name;
                            inqRes.ref4Name = ref4Name;
                            inqRes.ref5Name = ref5Name;
                            inqRes.amount = Utils.getFrom12DigitToOrginal(amount);
                            inqRes.serviceFee = serviceFee;
                            inqRes.status = status;
                            inqRes.expiry = expiry;
                            inqRes.productDescription = productdesc;
                            inqRes.imgUrl = imgURL;

                            return Utils.getInquiryRes(inqRes);
                        }
                        #endregion
                    }
                }
                #endregion

                #region <-- GiftCard -->
                //taxID == "0000000000001" ||
                else if (MapTaxID == "0000000000002" || MapTaxID == "0000000000003" || MapTaxID == "0000000000004" || MapTaxID == "0000000000015" || MapTaxID == "0000000000016" || MapTaxID == "0000000000057") ////GiftCard
                {
                    writeLog("This is GIFTCARD.");

                    if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                    {
                        writeLog("Simulator Y");

                        rescode = "00";
                        resdecs = "Success";

                        inquiryResponseModel inqRes = new inquiryResponseModel();
                        inqRes.ResCode = "00";
                        inqRes.ResDesc = "Success";
                        inqRes.taxID = taxID;
                        inqRes.merchantname = merchantname;
                        inqRes.merchantlogo = merchantlogo;
                        inqRes.billername = billerName;
                        inqRes.billerlogo = billerLogo;
                        inqRes.ref1 = ref1;
                        inqRes.ref2 = ref2;
                        inqRes.ref3 = ref3;
                        inqRes.ref4 = ref4;
                        inqRes.ref5 = ref5;
                        inqRes.ref1Name = ref1Name;
                        inqRes.ref2Name = ref2Name;
                        inqRes.ref3Name = ref3Name;
                        inqRes.ref4Name = ref4Name;
                        inqRes.ref5Name = ref5Name;
                        inqRes.amount = "5000";
                        inqRes.serviceFee = serviceFee;
                        inqRes.status = status;
                        inqRes.expiry = expiry;
                        inqRes.productDescription = productdesc;
                        inqRes.imgUrl = imgURL;

                        return Utils.getInquiryRes(inqRes);
                    }
                    else
                    {
                        if (CheckIsESBAGiftCard(MapTaxID))
                        {
                            string billercode = string.Empty;

                            #region <-- This is easybills -->
                            #region <-- Initialize Variable -->
                            writeLog("$$$$$$$$$ This Is ESBA Inquiry$$$$$$$$$$$$$");

                            billercode = getBillerCode(MapTaxID);
                            giftcardInqReq pinreq = new giftcardInqReq();
                            inquiryResponseModel inqresmdl = new inquiryResponseModel();
                            EnquiryGiftCardPINResults pinres = new EnquiryGiftCardPINResults();
                            string aesKey = string.Empty;
                            aesKey = ConfigurationManager.AppSettings["EsbaAesKey"].ToString();

                            if (IsTokenNullOrExpire(Token))
                            {
                                Token = GetOAuthToken();
                            }

                            //  string cardtype =
                            pinreq.Token = Token.Token;
                            pinreq.BillerCode = billercode;
                            pinreq.PriceType = ref2;
                            pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();



                            var json_serializer1 = new JavaScriptSerializer();

                            string jsonReq = json_serializer1.Serialize(pinreq);
                            writeLog("ESBA JasonReq:" + jsonReq);
                            #endregion
                            //Request PIN To ESBA
                            string jsonres = Utils.pinRequest(jsonReq, esbaGiftCardInqMethod);
                            writeLog("ESBA JasonRes:" + jsonres);
                            var json_serializerpinres = new JavaScriptSerializer();
                            pinres = json_serializerpinres.Deserialize<EnquiryGiftCardPINResults>(jsonres);
                            bool inqresult = false;
                            if (!string.IsNullOrEmpty(pinres.EnquiryGiftCardPINResult.ResponseCode))
                            {
                                if (pinres.EnquiryGiftCardPINResult.ResponseCode == "0")
                                {
                                    if (!string.IsNullOrEmpty(pinres.EnquiryGiftCardPINResult.Amount))
                                    {
                                        if (double.Parse(pinres.EnquiryGiftCardPINResult.Amount) > 0)
                                        {
                                            amount = pinres.EnquiryGiftCardPINResult.Amount;
                                            inqresult = true;
                                        }
                                    }
                                }
                            }

                            if (inqresult)
                            {
                                writeLog("GiftCard  Response : Amount = " + amount);
                                serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                                serviceFee = serviceFeeDbl.ToString("###0.00");

                                rescode = "00";
                                resdecs = "Success";
                                inqresmdl.ResCode = rescode;
                                inqresmdl.ResDesc = resdecs;
                                inqresmdl.taxID = taxID;
                                inqresmdl.merchantname = merchantname;
                                inqresmdl.merchantlogo = merchantlogo;
                                inqresmdl.billername = billerName;
                                inqresmdl.billerlogo = billerLogo;
                                inqresmdl.ref1 = ref1;
                                inqresmdl.ref2 = ref2;
                                inqresmdl.ref3 = ref3;
                                inqresmdl.ref4 = ref4;
                                inqresmdl.ref5 = ref5;
                                inqresmdl.ref1Name = ref1Name;
                                inqresmdl.ref2Name = ref2Name;
                                inqresmdl.ref3Name = ref3Name;
                                inqresmdl.ref4Name = ref4Name;
                                inqresmdl.ref5Name = ref5Name;
                                inqresmdl.amount = amount;
                                inqresmdl.serviceFee = serviceFee;
                                inqresmdl.status = status;
                                inqresmdl.expiry = expiry;
                                inqresmdl.productDescription = productdesc;
                                inqresmdl.imgUrl = imgURL;
                                return Utils.getInquiryRes(inqresmdl);



                            }
                            else
                            {
                                writeLog("Error in Paid Response.");
                                if (!String.IsNullOrEmpty(errmsg))
                                {
                                    string customMessage = errmsg.ToString();
                                }

                                return Utils.getErrorRes("06", Utils.EsbResponseDescription(pinres.EnquiryGiftCardPINResult.ResponseCode));



                            }
                            #endregion
                        }
                        else
                        {
                            #region <-- This Is Myanpay -->
                            TopupService.ResellerServiceClient topupwcf = new TopupService.ResellerServiceClient();

                            TopupService.CardPriceEnquiryRequest topuprequest = new TopupService.CardPriceEnquiryRequest();
                            TopupService.CardPriceEnquiryResponse topupresponse = new TopupService.CardPriceEnquiryResponse();
                            TopupService.AuthenticationRequest authrequest = new TopupService.AuthenticationRequest();
                            TopupService.AuthenticationResponse authresponse = new TopupService.AuthenticationResponse();
                            string reqresellerID, reqresellerName, reqstrPassword, IV, KEY, reqCardType, reqCardPrice;
                            IV = ConfigurationManager.AppSettings["TopupIV"].ToString();
                            KEY = ConfigurationManager.AppSettings["TopupKEY"].ToString();
                            reqresellerID = ConfigurationManager.AppSettings["TopupResellerID"].ToString();
                            reqresellerName = ConfigurationManager.AppSettings["TopupResellerName"].ToString();
                            reqstrPassword = ConfigurationManager.AppSettings["TopupResellerPassword"].ToString();
                            reqCardType = ref1;
                            reqCardPrice = ref2;
                            //string tokenkey = "";
                            StringBuilder sberror = new StringBuilder();
                            bool authResult = false;
                            // string mobileNo = "";
                            mobileNo = ref3;
                            string resResponseMessage, resErrorMessage, resResellerID, resExpiryDate = "", resSerialNumber = "", resPinNumber = "", resInvoiceID = "";
                            /////AuthRequest & Response
                            try
                            {
                                authrequest.CredentialPassword = TopupEncrypt(reqstrPassword, KEY, IV);
                                authrequest.CredentialUserName = TopupEncrypt(reqresellerName, KEY, IV);
                                writeLog("GiftCard Auth Request : CredentialUserName = " + reqresellerName + ",CredentialPassword = " + reqstrPassword);
                                authresponse = topupwcf.AuthenticationAPI(authrequest);

                                if (authresponse.ResponseMessage != null)
                                {
                                    if (authresponse.ResponseMessage == "Success")
                                    {
                                        authResult = true;
                                    }
                                    else
                                    {
                                        writeLog("Fail Auth Request");
                                    }
                                }

                                if (authresponse.ResellerAPIToken != null)
                                {
                                    //tokenkey = authresponse.ResellerAPIToken;

                                    authResult = true;
                                }

                                if (!String.IsNullOrEmpty(authresponse.ErrorMessage))
                                {
                                    resdecs = authresponse.ErrorMessage;
                                    writeLog("Auth Error Message : " + authresponse.ErrorMessage);
                                }

                                if (!authResult)
                                {

                                    return Utils.getErrorRes("06", resdecs);
                                }
                            }
                            catch (Exception ex)
                            {
                                writeLog("Error in GiftCard Auth Request :" + ex.ToString());
                                rescode = "05";
                                resdecs = "Authentication Failed";
                                return Utils.getErrorRes(rescode, resdecs);

                            }

                            if (authResult && !String.IsNullOrEmpty(authresponse.ResellerAPIToken))
                            {
                                writeLog("Success Auth Request");
                                writeLog("GiftCard Auth Response : ResponseMessage = " + authresponse.ResponseMessage + ",ResellerAPIToken = " + authresponse.ResellerAPIToken);
                                bool topupresult = false;
                                try
                                {
                                    ////Request

                                    topuprequest.CardType = TopupEncrypt(reqCardType, KEY, IV);
                                    topuprequest.CardPrice = TopupEncrypt(reqCardPrice, KEY, IV);
                                    topuprequest.CredentialPassword = TopupEncrypt(reqstrPassword, KEY, IV);
                                    topuprequest.CredentialUserName = TopupEncrypt(reqresellerName, KEY, IV);

                                    topupresponse = topupwcf.EnquiryLastestCardPrice(topuprequest); //topupwcf.SoldOutPrepaidCard(topuprequest);

                                    writeLog("GiftCard Paid Request : ResellerID = " + reqresellerID + ",ResellerAPIToken = " + authresponse.ResellerAPIToken + ",CardType = " + reqCardType + ",CardPrice = " + reqCardPrice);


                                    /////Response

                                    if (!String.IsNullOrEmpty(topupresponse.ResponseMessage))
                                    {
                                        if (topupresponse.ResponseMessage == "Success")
                                        {
                                            topupresult = true;
                                            resResponseMessage = topupresponse.ResponseMessage;
                                        }

                                    }
                                    if (!String.IsNullOrEmpty(topupresponse.ResponseMessage))
                                    {
                                        resErrorMessage = topupresponse.ResponseMessage;
                                        writeLog("GiftCard Response Error : " + topupresponse.ResponseMessage);
                                    }


                                    if (topupresponse.LastestCardPrice > 0)
                                    {
                                        //resExpiryDate = TopupDecrypt(topupresponse.ExpiredDate, KEY, IV);
                                        //ref4 = ref4 + " " + resExpiryDate;
                                        amount = topupresponse.LastestCardPrice.ToString();
                                        topupresult = true;
                                    }

                                    if (topupresult)
                                    {
                                        writeLog("GiftCard  Response : Amount = " + amount);
                                        serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                                        serviceFee = serviceFeeDbl.ToString("###0.00");
                                        int batchid = 0;
                                        double availablebalance = 0;
                                        rescode = "00";
                                        resdecs = "Success";

                                        inquiryResponseModel inqRes = new inquiryResponseModel();
                                        inqRes.ResCode = "00";
                                        inqRes.ResDesc = "Success";
                                        inqRes.taxID = taxID;
                                        inqRes.merchantname = merchantname;
                                        inqRes.merchantlogo = merchantlogo;
                                        inqRes.billername = billerName;
                                        inqRes.billerlogo = billerLogo;
                                        inqRes.ref1 = ref1;
                                        inqRes.ref2 = ref2;
                                        inqRes.ref3 = ref3;
                                        inqRes.ref4 = ref4;
                                        inqRes.ref5 = ref5;
                                        inqRes.ref1Name = ref1Name;
                                        inqRes.ref2Name = ref2Name;
                                        inqRes.ref3Name = ref3Name;
                                        inqRes.ref4Name = ref4Name;
                                        inqRes.ref5Name = ref5Name;
                                        inqRes.amount = amount;
                                        inqRes.serviceFee = serviceFee;
                                        inqRes.status = status;
                                        inqRes.expiry = expiry;
                                        inqRes.productDescription = productdesc;
                                        inqRes.imgUrl = imgURL;

                                        return Utils.getInquiryRes(inqRes);
                                        //}
                                    }
                                    else
                                    {
                                        writeLog("Error in Paid Response.");
                                        if (!String.IsNullOrEmpty(errmsg))
                                        {
                                            string customMessage = errmsg.ToString();
                                        }

                                        return Utils.getErrorRes("06", topupresponse.ResponseMessage);
                                    }
                                }
                                catch (Exception Ex)
                                {
                                    writeLog("Error in GiftCard Paid Request :" + Ex.ToString());
                                    rescode = "99";
                                    resdecs = "System Error";

                                    return Utils.getErrorRes(rescode, resdecs);
                                }
                            }
                            #endregion
                        }
                    }
                }
                #endregion

                

                #region <-- I TuneGiftCard -->

                else if (MapTaxID == "0000000000001") ////GiftCard
                {
                    writeLog("This is Itune.");

                    StringBuilder sberror = new StringBuilder();
                    if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                    {

                        writeLog("Simulator Y");

                        rescode = "00";
                        resdecs = "Success";
                        inquiryResponseModel inqRes = new inquiryResponseModel();
                        inqRes.ResCode = "00";
                        inqRes.ResDesc = "Success";
                        inqRes.taxID = taxID;
                        inqRes.merchantname = merchantname;
                        inqRes.merchantlogo = merchantlogo;
                        inqRes.billername = billerName;
                        inqRes.billerlogo = billerLogo;
                        inqRes.ref1 = ref1;
                        inqRes.ref2 = ref2;
                        inqRes.ref3 = ref3;
                        inqRes.ref4 = ref4;
                        inqRes.ref5 = ref5;
                        inqRes.ref1Name = ref1Name;
                        inqRes.ref2Name = ref2Name;
                        inqRes.ref3Name = ref3Name;
                        inqRes.ref4Name = ref4Name;
                        inqRes.ref5Name = ref5Name;
                        inqRes.amount = "5000";
                        inqRes.serviceFee = serviceFee;
                        inqRes.status = status;
                        inqRes.expiry = expiry;
                        inqRes.productDescription = productdesc;
                        inqRes.imgUrl = imgURL;

                        return Utils.getInquiryRes(inqRes);
                    }
                    else
                    {
                        try
                        {

                            string digitamt12 = string.Empty;
                            double dblamt = 0;
                            if (CheckIsESBAGiftCard(MapTaxID))
                            {
                                string billercode = string.Empty;

                                #region <-- This is easybills -->
                                #region <-- Initialize Variable -->
                                writeLog("$$$$$$$$$ This Is ESBA Inquiry$$$$$$$$$$$$$");

                                billercode = getBillerCode(MapTaxID);
                                giftcardInqReq pinreq = new giftcardInqReq();
                                inquiryResponseModel inqresmdl = new inquiryResponseModel();
                                EnquiryGiftCardPINResults pinres = new EnquiryGiftCardPINResults();
                                string aesKey = string.Empty;
                                aesKey = ConfigurationManager.AppSettings["EsbaAesKey"].ToString();
                                if (IsTokenNullOrExpire(Token))
                                {
                                    Token = GetOAuthToken();
                                }

                                //  string cardtype =
                                pinreq.Token = Token.Token;
                                pinreq.BillerCode = billercode;
                                pinreq.PriceType = ref2;
                                pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();



                                var json_serializer1 = new JavaScriptSerializer();

                                string jsonReq = json_serializer1.Serialize(pinreq);
                                writeLog("ESBA JasonReq:" + jsonReq);
                                #endregion
                                //Request PIN To ESBA
                                string jsonres = Utils.pinRequest(jsonReq, esbaGiftCardInqMethod);
                                writeLog("ESBA JasonRes:" + jsonres);
                                var json_serializerpinres = new JavaScriptSerializer();
                                pinres = json_serializerpinres.Deserialize<EnquiryGiftCardPINResults>(jsonres);
                                bool inqresult = false;
                                if (!string.IsNullOrEmpty(pinres.EnquiryGiftCardPINResult.ResponseCode))
                                {
                                    if (pinres.EnquiryGiftCardPINResult.ResponseCode == "0")
                                    {
                                        if (!string.IsNullOrEmpty(pinres.EnquiryGiftCardPINResult.Amount))
                                        {
                                            if (double.Parse(pinres.EnquiryGiftCardPINResult.Amount) > 0)
                                            {
                                                amount = pinres.EnquiryGiftCardPINResult.Amount;
                                                inqresult = true;
                                            }
                                        }
                                    }
                                }

                                if (inqresult)
                                {
                                    writeLog("GiftCard  Response : Amount = " + amount);
                                    serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                                    serviceFee = serviceFeeDbl.ToString("###0.00");

                                    rescode = "00";
                                    resdecs = "Success";
                                    inqresmdl.ResCode = rescode;
                                    inqresmdl.ResDesc = resdecs;
                                    inqresmdl.taxID = taxID;
                                    inqresmdl.merchantname = merchantname;
                                    inqresmdl.merchantlogo = merchantlogo;
                                    inqresmdl.billername = billerName;
                                    inqresmdl.billerlogo = billerLogo;
                                    inqresmdl.ref1 = ref1;
                                    inqresmdl.ref2 = ref2;
                                    inqresmdl.ref3 = ref3;
                                    inqresmdl.ref4 = ref4;
                                    inqresmdl.ref5 = ref5;
                                    inqresmdl.ref1Name = ref1Name;
                                    inqresmdl.ref2Name = ref2Name;
                                    inqresmdl.ref3Name = ref3Name;
                                    inqresmdl.ref4Name = ref4Name;
                                    inqresmdl.ref5Name = ref5Name;
                                    inqresmdl.amount = amount;
                                    inqresmdl.serviceFee = serviceFee;
                                    inqresmdl.status = status;
                                    inqresmdl.expiry = expiry;
                                    inqresmdl.productDescription = productdesc;
                                    inqresmdl.imgUrl = imgURL;
                                    return Utils.getInquiryRes(inqresmdl);



                                }
                                else
                                {
                                    writeLog("Error in Paid Response.");
                                    if (!String.IsNullOrEmpty(errmsg))
                                    {
                                        string customMessage = errmsg.ToString();
                                    }

                                    return Utils.getErrorRes("06", Utils.EsbResponseDescription(pinres.EnquiryGiftCardPINResult.ResponseCode));



                                }
                                #endregion
                            }
                            else
                            {
                                payhereMPTWCF.PINServiceClient payherepinwcf = new payhereMPTWCF.PINServiceClient();
                                if (payherepinwcf.ConfirmiTunesPIN(out resdecs, out digitamt12, double.Parse(ref2), ref1))
                                {
                                    #region <-- 1stop Itunes -->
                                    writeLog("Inquiry Pin Price OK amount:" + digitamt12);
                                    amount = Utils.getFrom12DigitToOrginal(digitamt12);
                                    dblamt = double.Parse(amount);
                                    // amount = dblamt.ToString();
                                    writeLog("GiftCard  Response : Amount = " + dblamt);
                                    serviceFeeDbl = Utils.getFee(Math.Round(dblamt), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                                    serviceFee = serviceFeeDbl.ToString("###0.00");
                                    int batchid = 0;
                                    double availablebalance = 0;
                                    rescode = "00";
                                    resdecs = "Success";

                                    inquiryResponseModel inqRes = new inquiryResponseModel();
                                    inqRes.ResCode = "00";
                                    inqRes.ResDesc = "Success";
                                    inqRes.taxID = taxID;
                                    inqRes.merchantname = merchantname;
                                    inqRes.merchantlogo = merchantlogo;
                                    inqRes.billername = billerName;
                                    inqRes.billerlogo = billerLogo;
                                    inqRes.ref1 = ref1;
                                    inqRes.ref2 = ref2;
                                    inqRes.ref3 = ref3;
                                    inqRes.ref4 = ref4;
                                    inqRes.ref5 = ref5;
                                    inqRes.ref1Name = ref1Name;
                                    inqRes.ref2Name = ref2Name;
                                    inqRes.ref3Name = ref3Name;
                                    inqRes.ref4Name = ref4Name;
                                    inqRes.ref5Name = ref5Name;
                                    inqRes.amount = Math.Round(dblamt).ToString();
                                    inqRes.serviceFee = serviceFee;
                                    inqRes.status = status;
                                    inqRes.expiry = expiry;
                                    inqRes.productDescription = productdesc;
                                    inqRes.imgUrl = imgURL;

                                    return Utils.getInquiryRes(inqRes);
                                    #endregion
                                    //}
                                }
                                else
                                {

                                    writeLog("Error in Paid Response.");
                                    if (!String.IsNullOrEmpty(errmsg))
                                    {
                                        string customMessage = errmsg.ToString();
                                    }



                                    return Utils.getErrorRes("06", resdecs);
                                }
                            }
                        }
                        catch (Exception Ex)
                        {
                            writeLog("Error in GiftCard Paid Request :" + Ex.ToString());
                            rescode = "99";
                            resdecs = "System Error";
                            return Utils.getErrorRes(rescode, resdecs);
                        }
                    }

                }
                #endregion

                #region <-- 1-Stop+ -->
                else if (MapTaxID == "0000000000005") ////OneStop+
                {
                    writeLog("This is Channel+.");
                    writeLog("Agent Code : " + this.agentCode + "Load Agent Code:" + ref1);
                    if (this.agentCode == ref1)
                    {
                        rescode = "01";
                        resdecs = "Same partner code NOT allowed";

                        return Utils.getErrorRes(rescode, resdecs);
                    }
                    DataSet ds = null;
                    DataSet dsFirstUser = null;
                    //writeLog("*********Ref1************************ :" + ref1);
                    _agentWCF.getMaHaOneStopPlusPartnerFirstUser(ref1,out dsFirstUser, out errmsg);
                    _agentWCF.getAgentNameByAgentCode(ref1,out ds, out errmsg); //Ref1 is agentCode
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        if (ds.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString() != "Y") // AGREEMENT TYPE IS NO
                        {

                            inquiryResponseModel inqRes = new inquiryResponseModel();
                            inqRes.ResCode = "00";
                            inqRes.ResDesc = "Success";
                            inqRes.taxID = taxID;
                            inqRes.merchantname = merchantname;
                            inqRes.merchantlogo = merchantlogo;
                            inqRes.billername = billerName;
                            inqRes.billerlogo = billerLogo;
                            inqRes.ref1 = ref1;
                            inqRes.ref2 = ds.Tables[0].Rows[0]["AGENTNAME"].ToString();
                            inqRes.ref3 = ref3;
                            if (dsFirstUser.Tables[0].Rows.Count > 0)
                            {
                                inqRes.ref4 = dsFirstUser.Tables[0].Rows[0]["AGENTUSERNAME"].ToString() + "," + dsFirstUser.Tables[0].Rows[0]["PHNO"].ToString() + "," + dsFirstUser.Tables[0].Rows[0]["NRC"].ToString();
                            }
                            //inqRes.ref4 = ref4;
                            inqRes.ref5 = ref5;
                            inqRes.ref1Name = ref1Name;
                            inqRes.ref2Name = ref2Name;
                            inqRes.ref3Name = ref3Name;
                            //inqRes.ref4Name = ref4Name;
                            inqRes.ref4Name = "";
                            inqRes.ref5Name = ref5Name;
                            inqRes.amount = amount;
                            inqRes.serviceFee = serviceFee;
                            inqRes.status = status;
                            inqRes.expiry = expiry;
                            inqRes.productDescription = productdesc;
                            inqRes.imgUrl = imgURL;

                            return Utils.getInquiryRes(inqRes);
                        }
                        else
                        {
                            rescode = "01";
                            resdecs = "Agent NOT Applicable";
                            return Utils.getErrorRes(rescode, resdecs);
                        }
                    }
                    else
                    {

                        rescode = "01";
                        resdecs = "Agent NOT Found";

                        return Utils.getErrorRes(rescode, resdecs);
                    }
                    //}
                }
                #endregion

                #region <-- MLM/MercyCorps  Redeem -->
                if (MapTaxID == "7777777777777" || MapTaxID == "0000000000011")
                {
                    writeLog("Malarmyaing/Mercy Corp  Redeem Inquiry AgentCode:" + agentCode);
                    DataSet ds = null;
                    _agentWCF.getAgentNameByAgentCode( agentCode,out ds, out errmsg); //Ref1 is agentCode
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        //if (ds.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString() != "Y")
                        //{

                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {

                            #region <-- Enquiry Response When simulator is turn on -->
                            writeLog("Simulator Y");
                            //agentFee = "000000030000";
                            // status = "PE";
                            productdesc = "Mercy Crops Redeem";
                            amount = "2000";
                            serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));//double.Parse((double.Parse(agentFee)).ToString("#,##0.00"));
                            serviceFee = serviceFeeDbl.ToString("###0.00");

                            inquiryResponseModel inqRes = new inquiryResponseModel();
                            inqRes.ResCode = "00";
                            inqRes.ResDesc = "Success";
                            inqRes.taxID = taxID;
                            inqRes.merchantname = string.Empty;
                            inqRes.merchantlogo = string.Empty;
                            inqRes.billername = billerName;
                            inqRes.billerlogo = billerLogo;
                            inqRes.ref1 = ref1;
                            inqRes.ref2 = agentCode;
                            inqRes.ref3 = "Redeem";
                            inqRes.ref4 = ref4;
                            inqRes.ref5 = "12";
                            inqRes.ref1Name = ref1Name;
                            inqRes.ref2Name = ref2Name;
                            inqRes.ref3Name = ref3Name;
                            inqRes.ref4Name = ref4Name;
                            inqRes.ref5Name = ref5Name;
                            inqRes.amount = Utils.getFrom12DigitToOrginal(amount);
                            inqRes.serviceFee = serviceFee;
                            inqRes.status = status;
                            inqRes.expiry = expiry;
                            inqRes.productDescription = productdesc;
                            inqRes.imgUrl = imgURL;

                            return Utils.getInquiryRes(inqRes);
                            #endregion

                        }
                        else
                        {
                            //                        <InquiryReq>
                            //    <Version></Version>
                            //    <TimeStamp></TimeStamp>
                            //    <MessageID></MessageID>
                            //    <PartnerID></PartnerID>
                            //    <DigitalCode></DigitalCode>
                            //    <HashValue></HashValue>
                            //</InquiryReq>
                            #region <-- If Simulator is turn off -->
                            string agentcode = MapTaxID == "7777777777777" ? ConfigurationManager.AppSettings["easyPointMercyRedeemID"].ToString() : ConfigurationManager.AppSettings["MercyCorpsPartnerID"].ToString();
                            string key = MapTaxID == "7777777777777" ? ConfigurationManager.AppSettings["easyPointMercyRedeemKey"].ToString() : ConfigurationManager.AppSettings["MercyCorpsRedeemKey"].ToString();
                            string hashstr = Utils.hashstrRedeemEnquiryEasyPointReq(version, ts, messageid, agentcode, ref1, key);

                            string agnref = string.Empty;
                            // string digitalcodedesc = string.Empty;
                            string reqXMLeasypoint = "<InquiryReq><Version>" + version + "</Version><TimeStamp>" + ts
                                + "</TimeStamp>"
                                + "<MessageID>" + messageid + "</MessageID>"
                                + "<PartnerID>" + agentcode + "</PartnerID>"
                               + "<DigitalCode>" + ref1
                                + "</DigitalCode><HashValue>" + hashstr
                                + "</HashValue></InquiryReq>";

                            RouteAPI api_service = new RouteAPI();
                            writeLog("EasyPoint Inquiry Req : " + reqXMLeasypoint);
                            response = api_service.RedeemApicallingEasypoint(reqXMLeasypoint);
                            writeLog("EasyPoint Inquiry Res : " + response);
                            Hashtable htt = Utils.getHTableFromXML(response);
                            if (!IsValidateInquiryResMercyEasyPoint(htt, MapTaxID, out code, out  desp, out version, out  messageid, out ref1, out amount, out agnref, out ref3))
                            {

                                return Utils.getErrorRes(code, desp);

                            }
                            if (code != "00")
                            {

                                return Utils.getErrorRes(code, desp);
                            }
                            else
                            {


                                writeLog("Amount : " + Utils.getFrom12DigitToOrginal(amount) + " | Service Percent : " + servicePercent + " | ServiceFlatFee : " + serviceFlatFee + "......");
                                serviceFeeDbl = Utils.getFee(double.Parse(Utils.getFrom12DigitToOrginal(amount)),
                                    float.Parse(servicePercent), double.Parse(serviceFlatFee));//double.Parse((double.Parse(agentFee)).ToString("#,##0.00"));
                                serviceFee = serviceFeeDbl.ToString("###0.00");
                                writeLog("serviceFee : " + serviceFee);
                                //billerlogo = "iVBORw0KGgoAAAANSUhEUgAAADwAAAAyCAYAAAAA9rgCAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOxAAADsQBlSsOGwAABQpJREFUaEPtml8sJVccx2fuXKppmjT+/00aLYosWpI+dLd/ti3Vl1LdZrvXYld2V0sj2mqzb4KtJSkWdbnXbqXx3CckFUEED7pll40QJARPEhLEG9+ec2aGuXdmuPdSurfzSz6ZceZ3fuZzzz1nxgkOJPz8/MBxnNdD4/8n7NzozYSFhYHjeV7zojfi7+9Pj9oXvRFD+Kw4r2mkK1xVVcVWNDnq6+tVOVoMDg5ib2/vALm9r69Ps/0o4uPjsbW1Jd0BMD8/z9pDQ0OxtLQktQKLi4usPTAwkJ3Lsbm56VCPoitcUVEhdROjtrZWlaPF0NCQ1EMMub2/v19qEUPZR4+4uDhsbGxIPYCZmRnWHhwcjIWFBakVmJubY+0BAQHsXI719XWHehRDWMYQNoS1MYSldkNY0UcPQ9gQFsMQlsIQJhjCMoawIayNISy1G8KKPno818LDw8NSixjKPnroCYeEhGBlZUVqBdv9oO10x0O5E0J3S5T1KGcmTG8yIiKCERkZ6dBHDz1hs9nM9pflWvSc7pEJgoDw8PCDdorz3tmZCXuCnrAWepuCpyLMcyYHOO6wqGvCZtJPgIncDL0hCj2n7Rx/mOeOsKt4KHx4NMnn0o2e1whroTXqLgvX1dVBIAVi79Qi4fcZxP02jYRHT/FG5xRi79qIuFj8KGGWwwt4OFWI9qcFsE4VoHVahJ5bp28gI/ctmEwCOBOP5ORkbG9vS5XUwkdFZWUlm+vKfIqbwgKC385EfHkH4n56hNh7f+B1+9+I/r7FNWGeTAHejO9as/CjPRvldnoUKbdl4f6fFrQ/yUN6QQqpZ0JKSgp2dnakSmrh3t5ejI6OYmxszIHV1VWW39DQ4JBPcfMrLUrx5MbpKAReykbswylEl1td/krz5ENjdUgNzqSA/Fx471P8OnkdGTeTyHThjxXWw2azsfy2tjbV19qjOSwTeDHLbWE96I0V/vwJWiZyyQhfOJFwR0cHy29tbVVdOyVh+knS1do1YZ7zIUf6yTtyu/pjND35Cuk3ksmocx4LW61Wlk+P/9IIuydM5Xxe9IPPCz4Ms3S8VZuBpgkyh2+6J+zr68v+g4FCzwcGBlh+dXW168I1NTWskxyNjY2qHC3h8fFxqYcYynyBLER0cfulj6zIz3LR9iyPkH9A4+QVNA3nIfrNcLbApaamSlXEkF8hlczOzkpXHYMuZlTeOV9XODExEdnZ2YycnBwkJSWpctTCPDIzM5Gfn3+AMp++bHBklbaSx9KDv3IJeXjw+LoIOW9+bMG7n5PfQ2rRZ3xQUBCKiopQXFyMkpISWCwWh3oUu90uKR7G/v4+1tbW2HPc5RF2BWdhutBo5R1C3rDIs7FlwoKLnyVqXKePruNqHE9nZycTb25uVl07B2GBCb//xQWN66eDR6u0K3gk7COgefIa3vtSX1is4/lI/yeFb91PxwdXUnH56iEfXk1DWkYszC/RPy7ERfAoCgoKUFpaqmJkZORA+HTn8Dvim9ZrP7SzV8HjR0Ugwj7k0XONSFvQRt6f28h7tIxtKh/2idtIy4xxSfi4KCsrO11h//hUxHzbhFezvoFAnptaOUrohyKQOVzS9BGK6i/jjhNfEyx3L+GV0JfFV0+NGkq6urrQ3d2toqenB1FRUZp9TiRMHx0yJ5lzjtA6p1VLzYmEn0cMYW/nQNh5NfNW6FYut7u7i4SEBERHR3s1MTExWF5exj8VUvKfWoOKfQAAAABJRU5ErkJggg==";

                                inquiryResponseModel inqRes = new inquiryResponseModel();
                                inqRes.ResCode = code;
                                inqRes.ResDesc = desp;
                                inqRes.taxID = taxID;
                                inqRes.merchantname = string.Empty;
                                inqRes.merchantlogo = string.Empty;
                                inqRes.billername = agentName;
                                inqRes.billerlogo = billerLogo;
                                inqRes.ref1 = ref1;
                                inqRes.ref2 = ref3;
                                inqRes.ref3 = string.Empty;
                                inqRes.ref4 = ref4;
                                inqRes.ref5 = agnref;
                                inqRes.ref1Name = ref1Name;
                                inqRes.ref2Name = ref2Name;
                                inqRes.ref3Name = string.Empty;
                                inqRes.ref4Name = ref4Name;
                                inqRes.ref5Name = string.Empty;
                                inqRes.amount = Utils.getFrom12DigitToOrginal(amount);
                                inqRes.serviceFee = serviceFee;
                                inqRes.status = status;
                                inqRes.expiry = expiry;
                                inqRes.productDescription = string.Empty;// ref3;
                                inqRes.imgUrl = imgURL;

                                return Utils.getInquiryRes(inqRes);
                            }

                            #endregion
                        }
                        //}
                        //else
                        //{
                        //    writeLog("Agreement Type Is No");
                        //    rescode = "01";
                        //    resdecs = "Agent NOT Applicable";
                        //    return Utils.getErrorRes(rescode, resdecs);
                        //}
                    }
                    else
                    {
                        writeLog("No Agent Found");

                        rescode = "01";
                        resdecs = "Agent NOT Found";
                        return Utils.getErrorRes(rescode, resdecs);
                    }
                }
                #endregion

                #region <-- YCDC/04-Jan-2016 Tz -->
                if (MapTaxID == "0000000000020")
                {
                    if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                    {
                        writeLog("Simulator Y");

                        #region <-- If simulator is Y Do this job -->
                        rescode = "00";
                        resdecs = "Success";

                        inquiryResponseModel inqRes = new inquiryResponseModel();
                        inqRes.ResCode = "00";
                        inqRes.ResDesc = "Success";
                        inqRes.taxID = taxID;
                        inqRes.merchantname = merchantname;
                        inqRes.merchantlogo = merchantlogo;
                        inqRes.billername = billerName;
                        inqRes.billerlogo = billerLogo;
                        inqRes.ref1 = ref1;
                        inqRes.ref2 = string.Empty;
                        inqRes.ref3 = "Tester";
                        inqRes.ref4 = string.Empty;
                        inqRes.ref5 = "200:100";
                        inqRes.ref1Name = ref1Name;
                        inqRes.ref2Name = ref2Name;
                        inqRes.ref3Name = ref3Name;
                        inqRes.ref4Name = ref4Name;
                        inqRes.ref5Name = ref5Name;
                        inqRes.amount = "5000";
                        inqRes.serviceFee = "300";
                        inqRes.status = "Success";
                        inqRes.expiry = expiry;
                        inqRes.productDescription = productdesc;
                        inqRes.imgUrl = imgURL;

                        return Utils.getInquiryRes(inqRes);
                        #endregion
                    }
                    else
                    {
                        BillPayment billpay = new BillPayment();
                        ReqBillAmount reqbilamt = new ReqBillAmount();
                        ResBillAmount resbillamt = new ResBillAmount();
                        ResError reserr = new ResError();
                        // double totalamt = 0;
                        string success = ConfigurationManager.AppSettings["payeesuccess"].ToString().Trim();
                        string fail = ConfigurationManager.AppSettings["payeefailed"].ToString().Trim();
                        string merchantcode = MapTaxID == "0000000000020" ? ConfigurationManager.AppSettings["YCDCMerchantCode"].ToString().Trim() : MapTaxID == "0000000000021" ? ConfigurationManager.AppSettings["MPTLandLineMearchantCode"].ToString().Trim() : ConfigurationManager.AppSettings["YESCMerchantCode"].ToString().Trim();
                        reqbilamt.apiKey = ConfigurationManager.AppSettings["payeeApiKey"].ToString().Trim();
                        reqbilamt.billRefNo = ref1;
                        reqbilamt.custRefNo = (MapTaxID == "0000000000021" || MapTaxID == "0000000000022") ? ref1 : "";
                        reqbilamt.locale = ConfigurationManager.AppSettings["payeelocale"].ToString().Trim();
                        reqbilamt.billingMerchantCode = merchantcode.Trim();
                        reqbilamt.currencyCode = ConfigurationManager.AppSettings["payeeCurrencyCode"].ToString().Trim();
                        BillPayment payment = new BillPayment();

                        if (MapTaxID == "0000000000022")
                        {
                            writeLog("$$$$$$$$$ This Is YESC Checking Payment Due Date $$$$$$$$$$$$$$$");
                            #region <-- If taxID is YESC Doing This Job To Check Payment Due Date -->
                            payment.BillDetails(reqbilamt, out resbillamt, out reserr, out errMsg);
                            if (!string.IsNullOrEmpty(resbillamt.status))
                            {
                                if (resbillamt.status == success)
                                {
                                    writeLog("Payment DueDate Before Convert" + resbillamt.paymentDueDate + "Current Date Before Convert: " + DateTime.Now);
                                    DateTime DueDate;
                                    DateTime CurrentDate = DateTime.Now;
                                    // CurrentDate = new DateTime(CurrentDate.Date.Year, CurrentDate.Date.Month, CurrentDate.Date.Day, 15, 00, 00);
                                    if (ConfigurationManager.AppSettings["YescIsDeductDueDate"].ToString() == "N")
                                    {
                                        DueDate = DateTime.Parse(resbillamt.paymentDueDate);

                                    }
                                    else
                                    {
                                        writeLog("it is deduct Yes");
                                        string strDeduct = ConfigurationManager.AppSettings["YescTotalDeductDate"].ToString();
                                        writeLog("total deductday:" + strDeduct);
                                        int deduct = int.Parse(strDeduct);
                                        DueDate = (DateTime.Parse(resbillamt.paymentDueDate).AddDays(deduct));
                                        DueDate = new DateTime(DueDate.Date.Year, DueDate.Date.Month, DueDate.Date.Day, 15, 00, 00);
                                    }

                                    writeLog("Payment DueDate AFTER Convert" + DueDate + "Current Date AFTER Convert: " + CurrentDate);
                                    if (DueDate < CurrentDate)
                                    {

                                        writeLog("Payment Expired");
                                        rescode = "03";
                                        resdecs = "Expired Already";
                                        return Utils.getErrorRes(rescode, resdecs);
                                    }
                                    else
                                    {
                                        writeLog("Payment Due Date not expired yet");

                                        if (!string.IsNullOrEmpty(resbillamt.paidstatus))
                                        {
                                            resbillamt.paidstatus = resbillamt.paidstatus.ToUpper();
                                        }
                                        writeLog("Paid Status:" + resbillamt.paidstatus);
                                        if (resbillamt.paidstatus == "YES" || resbillamt.paidstatus == "PENDING")//|| resbillamt.paidstatus.ToUpper().Trim() == "NULL" string.IsNullOrEmpty(resbillamt.paidstatus) ||
                                        {
                                            rescode = "03";
                                            resdecs = "Paid Already";
                                            return Utils.getErrorRes(rescode, resdecs);
                                        }
                                        else if (string.IsNullOrEmpty(resbillamt.paidstatus) || resbillamt.paidstatus == "NULL")
                                        {
                                            writeLog("Paid Status is Null Check Duplicated YESC customer ref in 1Stop DB");
                                            if (_agentWCF.IsDuplicatedCNPYESCPayment(ref1, DueDate.AddDays(-30), DueDate,out  errMsg))
                                            {
                                                writeLog("Customer Reference Number:" + ref1 + "Is already paid at 1STOP");
                                                rescode = "03";
                                                resdecs = "Paid Already";
                                                return Utils.getErrorRes(rescode, resdecs);
                                            }

                                        }


                                    }
                                }
                                else if (resbillamt.status == fail)
                                {
                                    writeLog("Response From PayYee Amount Detail inquiry is fail status=" + resbillamt.status);
                                    writeLog("Error Code:" + reserr.errorCode);
                                    writeLog("Error Description:" + reserr.errorMessage);
                                    return Utils.getErrorRes(reserr.errorCode, getCNPErrMsg(reserr.errorCode));
                                }
                            }
                            else
                            {
                                writeLog("Response From PayYee Amount Detail Inquiry status is empty");
                                writeLog("Error Code:" + reserr.errorCode);
                                writeLog("Error Description:" + reserr.errorMessage);
                                return Utils.getErrorRes("06", getCNPErrMsg(reserr.errorCode));
                            }
                            #endregion
                        }


                        payment.EnquiryBillAmount(reqbilamt, out resbillamt, out reserr, out errMsg);

                        if (!string.IsNullOrEmpty(resbillamt.status))
                        {

                            if (resbillamt.status == success)
                            {
                                if (MapTaxID == "0000000000020")
                                {
                                    writeLog("Response Bill Amount:" + resbillamt.amount);
                                    string amtToCompare = ConfigurationManager.AppSettings["YCDCMiniumAmount"].ToString();
                                    string ycdcServicePercentFee = ConfigurationManager.AppSettings["YCDCServicePercentFee"].ToString();
                                    string ycdcServiceFlatFee = ConfigurationManager.AppSettings["YCDCServiceFlatFee"].ToString();
                                    string ycdc1StopPercentFee = ConfigurationManager.AppSettings["YCDC1StopPercentFee"].ToString();
                                    string ycdc1StopFlatFee = ConfigurationManager.AppSettings["YCDCAgentFlatFee"].ToString();
                                    string ycdcAgentPercentFee = ConfigurationManager.AppSettings["YCDCAgentPercentFee"].ToString();
                                    string ycdcAgentFlatFee = ConfigurationManager.AppSettings["YCDCAgentFlatFee"].ToString();

                                    if (double.Parse(resbillamt.amount) <= double.Parse(amtToCompare))
                                    {
                                        serviceFeeDbl = Utils.getFee(double.Parse(resbillamt.amount), float.Parse(ycdcServicePercentFee), double.Parse(ycdcServiceFlatFee));
                                        serviceFee = serviceFeeDbl.ToString("###0.00");

                                        totalAmount = (double.Parse(amount) + serviceFeeDbl).ToString("###0.00");

                                        oneStopFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(ycdc1StopPercentFee), double.Parse(ycdc1StopFlatFee));
                                        oneStopFee = oneStopFeeDbl.ToString("###0.00");

                                        agentFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(ycdcAgentPercentFee), double.Parse(ycdcAgentFlatFee));
                                        agentAmount = double.Parse(amount) - agentFeeDbl;

                                        agentAmount += oneStopFeeDbl;
                                    }
                                }
                                writeLog("Response From PayYee Inquiry is success status=" + resbillamt.status);

                                inquiryResponseModel inqRes = new inquiryResponseModel();
                                inqRes.ResCode = "00";
                                inqRes.ResDesc = "Success";
                                inqRes.taxID = taxID;
                                inqRes.merchantname = merchantname;
                                inqRes.merchantlogo = merchantlogo;
                                inqRes.billername = billerName;
                                inqRes.billerlogo = billerLogo;
                                inqRes.ref1 = ref1;
                                inqRes.ref2 = resbillamt.name;
                                inqRes.ref3 = string.Empty;
                                inqRes.ref4 = string.Empty;
                                inqRes.ref5 = resbillamt.Camount + ":" + resbillamt.Coamount;//Charge and Commission 
                                inqRes.ref1Name = ref1Name;
                                inqRes.ref2Name = ref3Name;
                                inqRes.ref3Name = string.Empty;
                                inqRes.ref4Name = string.Empty;
                                inqRes.ref5Name = string.Empty;
                                inqRes.amount = resbillamt.amount;
                                inqRes.serviceFee = serviceFee;
                                inqRes.status = resbillamt.status;
                                inqRes.expiry = expiry;
                                inqRes.productDescription = productdesc;
                                inqRes.imgUrl = imgURL;

                                return Utils.getInquiryRes(inqRes);
                            }
                            else if (resbillamt.status == fail)
                            {
                                writeLog("Response From PayYee Inquiry is fail status=" + resbillamt.status);
                                writeLog("Response Code:" + resbillamt.failcode);
                                writeLog("Response Message:" + resbillamt.message);
                                return Utils.getErrorRes(resbillamt.failcode, getCNPErrMsg(resbillamt.failcode));
                            }
                        }
                        else
                        {
                            writeLog("Response From PayYee Inquiry status is empty");
                            writeLog("Error Code:" + reserr.errorCode);
                            writeLog("Error Description:" + reserr.errorMessage);
                            return Utils.getErrorRes("06", getCNPErrMsg(reserr.errorCode));
                        }
                    }
                }

                #endregion

                #region Aeon
                else if (MapTaxID == ConfigurationManager.AppSettings["AEONMapTaxID"].ToString())
                {
                    writeLog("This is Aeon.");
                    inquiryResponseModel inqresmdl = new inquiryResponseModel();
                    rescode = "00";
                    resdecs = "Success";
                    inqresmdl.ResCode = rescode;
                    inqresmdl.ResDesc = resdecs;
                    inqresmdl.taxID = taxID;
                    inqresmdl.merchantname = merchantname;
                    inqresmdl.merchantlogo = merchantlogo;
                    inqresmdl.billername = billerName;
                    inqresmdl.billerlogo = billerLogo;
                    inqresmdl.ref1 = ref1;
                    inqresmdl.ref2 = ref2;
                    inqresmdl.ref3 = string.Empty;
                    inqresmdl.ref4 = ref4;
                    inqresmdl.ref5 = ref5;
                    inqresmdl.ref1Name = ref1Name;
                    inqresmdl.ref2Name = ref2Name;
                    inqresmdl.ref3Name = string.Empty;
                    inqresmdl.ref4Name = ref4Name;
                    inqresmdl.ref5Name = string.Empty;
                    inqresmdl.amount = amount;
                    inqresmdl.serviceFee = serviceFee;
                    inqresmdl.status = status;
                    inqresmdl.expiry = expiry;
                    inqresmdl.productDescription = productdesc;
                    inqresmdl.imgUrl = imgURL;
                    return Utils.getInquiryRes(inqresmdl);
                }

                #endregion

                #region <-- OfflinePayment -->
                if (MapTaxID == "0000000000021")
                {
                    inquiryResponseModel inqresmdl = new inquiryResponseModel();
                    if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                    {
                        writeLog("Simulator Y");


                        rescode = "00";
                        resdecs = "Success";
                        inqresmdl.ResCode = rescode;
                        inqresmdl.ResDesc = resdecs;
                        inqresmdl.taxID = taxID;
                        inqresmdl.merchantname = merchantname;
                        inqresmdl.merchantlogo = merchantlogo;
                        inqresmdl.billername = billerName;
                        inqresmdl.billerlogo = billerLogo;
                        inqresmdl.ref1 = ref1;
                        inqresmdl.ref2 = ref2;
                        inqresmdl.ref3 = ref3;
                        inqresmdl.ref4 = ref4;
                        inqresmdl.ref5 = ref5;
                        inqresmdl.ref1Name = ref1Name;
                        inqresmdl.ref2Name = ref2Name;
                        inqresmdl.ref3Name = ref3Name;
                        inqresmdl.ref4Name = ref4Name;
                        inqresmdl.ref5Name = ref5Name;
                        inqresmdl.amount = amount;
                        inqresmdl.serviceFee = serviceFee;
                        inqresmdl.status = status;
                        inqresmdl.expiry = expiry;
                        inqresmdl.productDescription = productdesc;
                        inqresmdl.imgUrl = imgURL;
                        return Utils.getInquiryRes(inqresmdl);

                    }
                    else
                    {
                        rescode = "00";
                        resdecs = "Success";
                        inqresmdl.ResCode = rescode;
                        inqresmdl.ResDesc = resdecs;
                        inqresmdl.taxID = taxID;
                        inqresmdl.merchantname = merchantname;
                        inqresmdl.merchantlogo = merchantlogo;
                        inqresmdl.billername = billerName;
                        inqresmdl.billerlogo = billerLogo;
                        inqresmdl.ref1 = ref1;
                        inqresmdl.ref2 = ref2;
                        inqresmdl.ref3 = ref3;
                        inqresmdl.ref4 = ref4;
                        inqresmdl.ref5 = ref5;
                        inqresmdl.ref1Name = ref1Name;
                        inqresmdl.ref2Name = ref2Name;
                        inqresmdl.ref3Name = ref3Name;
                        inqresmdl.ref4Name = ref4Name;
                        inqresmdl.ref5Name = ref5Name;
                        inqresmdl.amount = amount;
                        inqresmdl.serviceFee = serviceFee;
                        inqresmdl.status = status;
                        inqresmdl.expiry = expiry;
                        inqresmdl.productDescription = productdesc;
                        inqresmdl.imgUrl = imgURL;
                        return Utils.getInquiryRes(inqresmdl);
                    }
                }
                #endregion

                #region <-- TitanSource Electric Meter Bills -->
                if (MapTaxID == "0000000000022")
                {
                    if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                    {

                        writeLog("This is Simulator Mode: status=" + "OK");
                        #region <-- Simulator -->

                        inquiryResponseModel inqRes = new inquiryResponseModel();
                        inqRes.ResCode = "00";
                        inqRes.ResDesc = "Success";
                        inqRes.taxID = taxID;
                        inqRes.merchantname = merchantname;
                        inqRes.merchantlogo = merchantlogo;
                        inqRes.billername = billerName;
                        inqRes.billerlogo = billerLogo;
                        inqRes.ref1 = ref1;
                        inqRes.ref2 = "Meter Bill Tester";
                        inqRes.ref3 = string.Empty;
                        inqRes.ref4 = string.Empty;
                        inqRes.ref5 = "CNP" + ":" + "300" + ":" + "0";
                        inqRes.ref1Name = ref1Name;
                        inqRes.ref2Name = ref3Name;
                        inqRes.ref3Name = string.Empty;
                        inqRes.ref4Name = string.Empty;
                        inqRes.ref5Name = string.Empty;
                        inqRes.amount = amount;
                        inqRes.serviceFee = serviceFee;
                        inqRes.status = "Success";
                        inqRes.expiry = "25-10-2030";
                        inqRes.productDescription = productdesc;
                        inqRes.imgUrl = imgURL;

                        return Utils.getInquiryRes(inqRes);
                        #endregion
                    }
                    else
                    {
                        writeLog("$$$$$$$ This YESC BILL $$$$$$$$$$");
                        DataSet ds = null;
                        string biller = string.Empty;
                        string UserName = ConfigurationManager.AppSettings["titalUserName"].ToString();
                        string ApiKey = ConfigurationManager.AppSettings["titanApiKey"].ToString();
                        string passPhrase = ConfigurationManager.AppSettings["titanpassPhrase"].ToString();
                        string inquiryUrl = ConfigurationManager.AppSettings["titanInquiryUrl"].ToString();
                        string inqResString = string.Empty;
                        ref2 = string.IsNullOrEmpty(ref2) ? "0" : ref2;
                        if (ref2 == "0")
                        {
                            biller = "CNP";
                        }
                        else if (_agentWCF.getMeterBillerByTownshipCode(ref2,out ds, out errMsg))
                        {
                            writeLog("This is check billerby township");
                            if (ds.Tables.Count > 0)
                            {
                                if (ds.Tables[0].Rows.Count > 0)
                                {
                                    biller = ds.Tables[0].Rows[0]["BILLER"] == DBNull.Value ? string.Empty : ds.Tables[0].Rows[0]["BILLER"].ToString();
                                    writeLog("MeterBiller :" + biller);
                                }
                            }
                        }
                        else
                        {
                            biller = "CNP";
                        }
                        if (biller == "TITAN")
                        {
                            #region <-- TITAN -->Titan Inquiry

                            writeLog("$$$$$$$$ This Is Titan Inquiry$$$$$$$$$$$$$$$$$$$");

                            //For 1D
                            string temp = ApiKey + "," + ref1 + "," + amount;

                            writeLog("Titan Source Temp : " + temp);

                            string encodedKey = Utils.EncryptString(temp, passPhrase);

                            //For 1D barcode that allow user to insert barcode in Account Number Textbox.
                            string completeUrl = inquiryUrl + UserName + "/" + encodedKey;

                            HttpWebResponse titanresponse = null;
                            writeLog("Titan Inq Req:" + completeUrl);
                            // Get the stream containing content returned by the server.
                            Stream dataStream = Utils.CallTitanSourceApi(completeUrl, ref titanresponse);
                            // Open the stream using a StreamReader for easy access.
                            StreamReader reader = new StreamReader(dataStream);
                            // Read the content.
                            string responseXML = reader.ReadToEnd();
                            writeLog("Titan Response function :" + responseXML);
                            reader.Close();
                            reader.Dispose();
                            dataStream.Close();
                            dataStream.Dispose();
                            //Fatch Inquiry Response Date from response DataStream
                            TitanInquiryResultSet InquiryResult = Utils.MapTitanInquiryResponse(responseXML);

                            if (!string.IsNullOrEmpty(InquiryResult.Status) && InquiryResult.Status == "OK")
                            {
                                #region <-- Inquiry to titan OK response back success inquiry response -->
                                rescode = "00";
                                resdecs = "Success";

                                inquiryResponseModel inqres = new inquiryResponseModel();
                                inqres.ResCode = rescode;
                                inqres.ResDesc = resdecs;
                                inqres.taxID = taxID;
                                inqres.merchantname = merchantname;
                                inqres.merchantlogo = merchantlogo;
                                inqres.billerlogo = billerLogo;
                                inqres.billername = billerName;
                                inqres.ref1 = ref1;
                                inqres.ref2 = InquiryResult.MeterNumber;
                                inqres.ref3 = InquiryResult.ConsumerName;
                                inqres.ref4 = InquiryResult.TotalUnitUsed;
                                inqres.ref5 = biller + ":" + InquiryResult.Status + ":" + InquiryResult.TownshipCode + ":" + InquiryResult.ConsumerReferenceNo + ":" + InquiryResult.ConsumerName + ":" + InquiryResult.TotalUnitUsed;//TITANOrCNP:result (OK/insificent):townshipcode: ConsumerRefNo:Customer Name: TotalUnituse

                                inqres.ref1Name = ref1Name;
                                inqres.ref2Name = ref2Name;
                                inqres.ref3Name = ref3Name;
                                inqres.ref4Name = "Total Unit Use";
                                inqres.ref5Name = string.Empty;
                                inqres.amount = InquiryResult.Amount;
                                inqres.serviceFee = serviceFee;
                                inqres.status = "Success";
                                inqres.expiry = InquiryResult.DueDate;
                                inqres.productDescription = productdesc;
                                inqres.imgUrl = imgURL;

                                inqResString = Utils.getInquiryRes(inqres);

                                writeLog("Inquiry Res:" + inqResString);
                                return inqResString;
                                #endregion

                            }
                            else
                            {
                                writeLog("inquiry fail" + InquiryResult.Status);
                                if (InquiryResult.Status.ToLower().Contains("paid"))
                                {
                                    return Utils.getErrorRes("06", "Already Paid!");
                                }
                                return Utils.getErrorRes("06", InquiryResult.Status);
                            }
                            #endregion
                        }
                        else
                        {
                            writeLog("$$$$$$$$ This Is CNP Inquiry $$$$$$$$$$$$$$$$$$$");
                            BillPayment billpay = new BillPayment();
                            ReqBillAmount reqbilamt = new ReqBillAmount();
                            ResBillAmount resbillamt = new ResBillAmount();
                            ResError reserr = new ResError();
                            // double totalamt = 0;
                            string success = ConfigurationManager.AppSettings["payeesuccess"].ToString().Trim();
                            string fail = ConfigurationManager.AppSettings["payeefailed"].ToString().Trim();
                            string merchantcode = ConfigurationManager.AppSettings["YESCMerchantCode"].ToString().Trim();
                            reqbilamt.apiKey = ConfigurationManager.AppSettings["payeeApiKey"].ToString().Trim();
                            reqbilamt.billRefNo = ref1;
                            reqbilamt.custRefNo = ref1;
                            reqbilamt.locale = ConfigurationManager.AppSettings["payeelocale"].ToString().Trim();
                            reqbilamt.billingMerchantCode = merchantcode.Trim();
                            reqbilamt.currencyCode = ConfigurationManager.AppSettings["payeeCurrencyCode"].ToString().Trim();
                            BillPayment payment = new BillPayment();

                            if (MapTaxID == "0000000000022")
                            {
                                writeLog("$$$$$$$$$ This Is YESC Checking Payment Due Date $$$$$$$$$$$$$$$");
                                #region <-- If taxID is YESC Doing This Job To Check Payment Due Date -->
                                payment.BillDetails(reqbilamt, out resbillamt, out reserr, out errMsg);
                                if (!string.IsNullOrEmpty(resbillamt.status))
                                {
                                    if (resbillamt.status == success)
                                    {

                                        writeLog("Payment DueDate Before Convert" + resbillamt.paymentDueDate + "Current Date Before Convert: " + DateTime.Now);
                                        DateTime DueDate;
                                        DateTime CurrentDate = DateTime.Now;
                                        // CurrentDate = new DateTime(CurrentDate.Date.Year, CurrentDate.Date.Month, CurrentDate.Date.Day, 15, 00, 00);
                                        if (ConfigurationManager.AppSettings["YescIsDeductDueDate"].ToString() == "N")
                                        {
                                            DueDate = DateTime.Parse(resbillamt.paymentDueDate);

                                        }
                                        else
                                        {
                                            writeLog("it is deduct Yes");
                                            string strDeduct = ConfigurationManager.AppSettings["YescTotalDeductDate"].ToString();
                                            writeLog("total deductday:" + strDeduct);
                                            int deduct = int.Parse(strDeduct);
                                            DueDate = (DateTime.Parse(resbillamt.paymentDueDate).AddDays(deduct));
                                            DueDate = new DateTime(DueDate.Date.Year, DueDate.Date.Month, DueDate.Date.Day, 15, 00, 00);
                                        }

                                        writeLog("Payment DueDate AFTER Convert" + DueDate + "Current Date AFTER Convert: " + CurrentDate);
                                        if (DueDate < CurrentDate)
                                        {

                                            writeLog("Payment Expired");
                                            rescode = "03";
                                            resdecs = "Expired Already";
                                            return Utils.getErrorRes(rescode, resdecs);
                                        }
                                        else
                                        {
                                            writeLog("Payment Due Date not expired yet");

                                            if (!string.IsNullOrEmpty(resbillamt.paidstatus))
                                            {
                                                resbillamt.paidstatus = resbillamt.paidstatus.ToUpper();
                                            }
                                            writeLog("Paid Status:" + resbillamt.paidstatus);
                                            if (resbillamt.paidstatus == "YES" || resbillamt.paidstatus == "PENDING")//|| resbillamt.paidstatus.ToUpper().Trim() == "NULL" string.IsNullOrEmpty(resbillamt.paidstatus) ||
                                            {
                                                rescode = "03";
                                                resdecs = "Paid Already";
                                                return Utils.getErrorRes(rescode, resdecs);
                                            }
                                            else if (string.IsNullOrEmpty(resbillamt.paidstatus) || resbillamt.paidstatus == "NULL")
                                            {
                                                writeLog("Paid Status is Null Check Duplicated YESC customer ref in 1Stop DB");
                                                if (_agentWCF.IsDuplicatedCNPYESCPayment(ref1, DueDate.AddDays(-30), DueDate,out  errMsg))
                                                {
                                                    writeLog("Customer Reference Number:" + ref1 + "Is already paid at 1STOP");
                                                    rescode = "03";
                                                    resdecs = "Paid Already";
                                                    return Utils.getErrorRes(rescode, resdecs);
                                                }

                                            }


                                        }
                                    }
                                    else if (resbillamt.status == fail)
                                    {
                                        writeLog("Response From PayYee Amount Detail inquiry is fail status=" + resbillamt.status);
                                        writeLog("Error Code:" + reserr.errorCode);
                                        writeLog("Error Description:" + reserr.errorMessage);

                                        return Utils.getErrorRes(reserr.errorCode, getCNPErrMsg(reserr.errorCode));
                                    }
                                }
                                else
                                {
                                    writeLog("Response From PayYee Amount Detail Inquiry status is empty");
                                    writeLog("Error Code:" + reserr.errorCode);
                                    writeLog("Error Description:" + reserr.errorMessage);

                                    return Utils.getErrorRes("06", getCNPErrMsg(reserr.errorCode));
                                }
                                #endregion
                            }


                            payment.EnquiryBillAmount(reqbilamt, out resbillamt, out reserr, out errMsg);

                            if (!string.IsNullOrEmpty(resbillamt.status))
                            {

                                if (resbillamt.status == success)
                                {
                                    if (!string.IsNullOrEmpty(amount))//Check Amount if CNP new version for old version no need to check 
                                    {
                                        if (double.Parse(amount) > 0)
                                        {
                                            writeLog("Request Amount:" + amount + "|CNP Amount:" + resbillamt.amount);
                                            if (double.Parse(amount) != double.Parse(resbillamt.amount))//Check Amount if CNP new version for old version no need to check 
                                            {
                                                return Utils.getErrorRes("06", "Amount Missmatch");
                                            }
                                        }
                                    }
                                    writeLog("Response From PayYee Inquiry is success status=" + resbillamt.status);

                                    inquiryResponseModel inqRes = new inquiryResponseModel();
                                    inqRes.ResCode = "00";
                                    inqRes.ResDesc = "Success";
                                    inqRes.taxID = taxID;
                                    inqRes.merchantname = merchantname;
                                    inqRes.merchantlogo = merchantlogo;
                                    inqRes.billername = billerName;
                                    inqRes.billerlogo = billerLogo;
                                    inqRes.ref1 = ref1;
                                    inqRes.ref2 = resbillamt.name;
                                    inqRes.ref3 = string.Empty;
                                    inqRes.ref4 = string.Empty;
                                    inqRes.ref5 = biller + ":" + resbillamt.Camount + ":" + resbillamt.Coamount;
                                    inqRes.ref1Name = ref1Name;
                                    inqRes.ref2Name = ref3Name;
                                    inqRes.ref3Name = string.Empty;
                                    inqRes.ref4Name = string.Empty;
                                    inqRes.ref5Name = string.Empty;
                                    inqRes.amount = resbillamt.amount;
                                    inqRes.serviceFee = serviceFee;
                                    inqRes.status = status;
                                    inqRes.expiry = expiry;
                                    inqRes.productDescription = productdesc;
                                    inqRes.imgUrl = imgURL;

                                    return Utils.getInquiryRes(inqRes);
                                    // " + (double.Parse(resbillamt.Camount)+double.Parse(resbillamt.Coamount)) + "
                                }
                                else if (resbillamt.status == fail)
                                {
                                    writeLog("Response From PayYee Inquiry is fail status=" + resbillamt.status);
                                    writeLog("Response Code:" + resbillamt.failcode);
                                    writeLog("Response Message:" + resbillamt.message);
                                    return Utils.getErrorRes(resbillamt.failcode, getCNPErrMsg(resbillamt.failcode));

                                }
                            }
                            else
                            {
                                writeLog("Response From PayYee Inquiry status is empty");
                                writeLog("Error Code:" + reserr.errorCode);
                                writeLog("Error Description:" + reserr.errorMessage);
                                return Utils.getErrorRes("06", getCNPErrMsg(reserr.errorCode));

                            }

                        }

                    }





                }
                #endregion

                #region <-- Rent2Own -->
                if (MapTaxID == "0000000000029")
                {
                    if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                    {
                        #region <-- Simulator Mode On -->
                        rescode = "00";
                        resdecs = "Success";

                        inquiryResponseModel inqres = new inquiryResponseModel();
                        inqres.ResCode = rescode;
                        inqres.ResDesc = resdecs;
                        inqres.taxID = taxID;
                        inqres.merchantname = merchantname;
                        inqres.merchantlogo = merchantlogo;
                        inqres.billerlogo = billerLogo;
                        inqres.billername = billerName;
                        inqres.ref1 = ref1;
                        inqres.ref2 = "Test User";
                        inqres.ref3 = "R2O Contract";
                        inqres.ref4 = "31-10-2020";
                        inqres.ref5 = "R2O Contract" + " " + "31-10-2020";
                        inqres.ref1Name = ref1Name;
                        inqres.ref2Name = ref2Name;
                        inqres.ref3Name = "Description";
                        inqres.ref4Name = "DueDate";
                        inqres.ref5Name = string.Empty;
                        inqres.amount = "400000";
                        inqres.serviceFee = serviceFee;
                        inqres.status = "Success";
                        inqres.expiry = "31-10-2020";
                        inqres.productDescription = string.Empty;// inqRes.ContractDescription;
                        inqres.imgUrl = imgURL;

                        string inqResString = Utils.getInquiryRes(inqres);
                        return inqResString;
                        #endregion
                    }
                    else
                    {
                        #region <-- Simulater Mode Off -->
                        string inqmethod = ConfigurationManager.AppSettings["Rent2OwnInquiry"].ToString();
                        string agncode = ConfigurationManager.AppSettings["Rent2OwnAgnCode"].ToString();
                        string rent2OwnKey = ConfigurationManager.AppSettings["Rent2OwnKey"].ToString();
                        string rent2Ownuri = ConfigurationManager.AppSettings["Rent2OwnUri"].ToString();
                        Rent2OwnInquiryRequest inqReq = new Rent2OwnInquiryRequest();
                        Rent2OwnInquiryResponse inqRes = new Rent2OwnInquiryResponse();
                        inqReq.ContractNumber = ref1;
                        inqReq.AgentCode = agncode;
                        inqReq.PaymentType = ref5;
                        inqReq.TimeStamp = DateTime.Now.ToString("yyyyMMddhhmmssffff");

                        writeLog("Rent2Own inqReq:");
                        writeLog("Rent2Own inqReq:" + inqReq);

                        inqReq.HashValue = Utils.generateHashValue((inqReq.ContractNumber + inqReq.TimeStamp + inqReq.AgentCode), rent2OwnKey).ToLower();
                        //var json_serializer1 = new JavaScriptSerializer();                        
                        //string jsonReq = json_serializer1.Serialize(inqReq);
                        string jsonReq = JsonConvert.SerializeObject(inqReq, Newtonsoft.Json.Formatting.Indented, new JsonSerializerSettings { DefaultValueHandling = DefaultValueHandling.Ignore });
                        string uri = string.Empty;
                        uri = rent2Ownuri + inqmethod;
                        writeLog("Rent2Own inqRequest URL:" + uri);
                        writeLog("Rent2Own jsonRequest:");
                        writeLog("Rent2Own jsonRequest:" + jsonReq);
                        string jsonres = Utils.Rent2OwnRequest(jsonReq, uri);

                        string res = jsonres;
                        writeLog("Rent2Own InqRes:" + res);
                        var json_serializerres = new JavaScriptSerializer();
                        inqRes = json_serializerres.Deserialize<Rent2OwnInquiryResponse>(jsonres);
                        //ContractNumber + ContractDescription+ResponseCode+ResponseDescription+CustomerName+Amount+DueDate 
                        string temphash = inqRes.HashValue;
                        string HashCompare = Utils.generateHashValue((inqRes.ContractNumber + inqRes.ContractDescription + inqRes.ResponseCode + inqRes.ResponseDescription + inqRes.CustomerName + inqRes.Amount + inqRes.DueDate), rent2OwnKey).ToLower();
                        if (temphash == HashCompare)
                        {
                            if (inqRes.ResponseCode == "00")
                            {
                                writeLog("Rent2Own  Response : Amount = " + amount);
                                

                                serviceFeeDbl = Utils.getFee(double.Parse(inqRes.Amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                                serviceFee = serviceFeeDbl.ToString("###0.00");
                                string inqResString = string.Empty;
                                #region <-- Inquiry to titan OK response back success inquiry response -->
                                rescode = "00";
                                resdecs = "Success";

                                inquiryResponseModel inqres = new inquiryResponseModel();
                                inqres.ResCode = rescode;
                                inqres.ResDesc = resdecs;
                                inqres.taxID = taxID;
                                inqres.merchantname = merchantname;
                                inqres.merchantlogo = merchantlogo;
                                inqres.billerlogo = billerLogo;
                                inqres.billername = billerName;
                                inqres.ref1 = ref1;
                                inqres.ref2 = inqRes.CustomerName;
                                inqres.ref3 = inqRes.ContractDescription;
                                inqres.ref4 = inqRes.DueDate;
                                inqres.ref5 = inqRes.ContractDescription.Replace(" ", "") + ":" + inqReq.PaymentType + " " + inqRes.DueDate;
                                inqres.ref1Name = ref1Name;
                                inqres.ref2Name = ref2Name;
                                inqres.ref3Name = "Description";
                                inqres.ref4Name = "DueDate";
                                inqres.ref5Name = string.Empty;
                                inqres.amount = inqRes.Amount;
                                inqres.serviceFee = serviceFee;
                                inqres.status = "Success";
                                inqres.expiry = inqRes.DueDate;
                                inqres.productDescription = string.Empty;// inqRes.ContractDescription;
                                inqres.imgUrl = imgURL;

                                inqResString = Utils.getInquiryRes(inqres);
                                return inqResString;
                                #endregion
                            }
                            else
                            {
                                return Utils.getErrorRes(inqRes.ResponseCode, inqRes.ResponseDescription);
                            }
                        }
                        else
                        {
                            return Utils.getErrorRes(inqRes.ResponseCode, inqRes.ResponseDescription);

                        }
                        #endregion
                    }


                }
                #endregion

                #region <-- Awba Repayment -->
                else if (MapTaxID == "0000000000023")
                {
                    if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                    {
                        //if Simulator is on Do something Here
                        serviceFeeDbl = Utils.getFee(double.Parse("100000"), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                        serviceFee = serviceFeeDbl.ToString("###0.00");

                        code = "00";
                        desp = "Success";

                        inquiryResponseModel inqRes = new inquiryResponseModel();
                        inqRes.ResCode = code;
                        inqRes.ResDesc = desp;
                        inqRes.taxID = taxID;
                        inqRes.merchantname = string.Empty;
                        inqRes.merchantlogo = string.Empty;
                        inqRes.billername = billerName;
                        inqRes.billerlogo = billerLogo;
                        inqRes.ref1 = ref1;
                        inqRes.ref2 = ref2;
                        inqRes.ref3 = string.Empty;
                        inqRes.ref4 = string.Empty;
                        inqRes.ref5 = "100000";
                        inqRes.ref1Name = ref1Name;
                        inqRes.ref2Name = ref2Name;
                        inqRes.ref3Name = string.Empty;
                        inqRes.ref4Name = string.Empty;
                        inqRes.ref5Name = "Total Loan";
                        inqRes.amount = amount;
                        inqRes.serviceFee = serviceFee;
                        inqRes.status = status;
                        inqRes.expiry = DateTime.Now.Date.ToShortDateString();
                        inqRes.productDescription = "1000:10:OneYearLoan:YearlyLoan:12/12/2015";
                        inqRes.imgUrl = imgURL;

                        return Utils.getInquiryRes(inqRes);
                    }
                    else
                    {
                        if (ConfigurationManager.AppSettings["IsAwbaMIT"].ToString() == "Y")
                        {
                            writeLog("This Is Awba MIT MFI");
                            #region <-- Awba MIT -->
                            string awbaMitUrl = string.Empty;
                            string awbaMitInquiryMethod = "RepayInquiry";
                            awbaMitUrl = ConfigurationManager.AppSettings["MitAwbaUrl"].ToString() + awbaMitInquiryMethod;
                            string loanType = string.Empty;

                            string loandesc = string.Empty;
                            string amt = string.Empty;
                            string ref6 = string.Empty;
                            StringBuilder hb = new StringBuilder();
                            //Guid id = new Guid();

                            string tsp = System.DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss:fff");
                            // Version + TimeStamp + MessageID + CustomerID + SlipNo
                            string hashkeystr = Utils.GethashKeyawbaInqReq("1.0", tsp, messageid, ref2, ref1);

                            hb.Append("<InquiryReq>");
                            hb.Append("<Version>1.0</Version>");
                            hb.Append("<TimeStamp>" + tsp + "</TimeStamp>");
                            hb.Append("<MessageID>" + messageid + "</MessageID>");
                            hb.Append("<CustomerID>" + ref2 + "</CustomerID>");
                            hb.Append("<SlipNo>" + ref1 + "</SlipNo>");
                            hb.Append("<HashValue>" + hashkeystr + "</HashValue>");
                            hb.Append("</InquiryReq>");
                            writeLog("Inquiry Request To MFI Before Encrypt:" + hb.ToString());
                            SinaptIQPKCS7.PKCS7 pkcs7 = new SinaptIQPKCS7.PKCS7();
                            string encryptedMsg = pkcs7.encryptMessage(hb.ToString(), pkcs7.getPublicCert(ConfigurationManager.AppSettings["publicKeyPathawba"].ToString()));//Convert.ToBase64String(encodedEncryptedCms);
                            writeLog("Inquiry Request To MFI After Encrypt:" + encryptedMsg);
                            string responsestr = string.Empty;
                            string decryptedresdata = string.Empty;
                            MahaAwbaWCF.RouteWebServiceSoapClient mobilewcf = new MahaAwbaWCF.RouteWebServiceSoapClient();
                            SSLPost post = new SSLPost();
                            //    awbaRepayWCF.RouteWebServiceSoapClient mobilwcf = new awbaRepayWCF.RouteWebServiceSoapClient("RouteWebServiceSoap1");
                            try
                            {

                                if (!post.postToMitAwba(awbaMitUrl, encryptedMsg, out responsestr, out errMsg))
                                {


                                    // responsestr = mobilewcf.GetRepaymentInquiryInfo(encryptedMsg);

                                    writeLog("cannot Post To Awba MIT:" + errMsg);
                                    return Utils.getErrorRes("99", "Null Response From MFI");

                                }
                            }
                            catch (Exception ex)
                            {
                                writeLog("Error Response From  MFI WCF:" + ex.Message);

                                return Utils.getErrorRes("99", "Error Response From MFI");
                            }
                            string privatecer = ConfigurationManager.AppSettings["privateKeyPathawba"].ToString();
                            string pass = ConfigurationManager.AppSettings["privateKeyPWDawba"].ToString();
                            decryptedresdata = pkcs7.decryptMessage(responsestr, pkcs7.getPrivateCert(ConfigurationManager.AppSettings["privateKeyPathawba"].ToString(), ConfigurationManager.AppSettings["privateKeyPWDawba"].ToString()));
                            writeLog("Inquiry Response form awba after Decrypted:" + decryptedresdata);
                            Hashtable htt = Utils.getHTableFromXML(decryptedresdata);
                            try
                            {
                                if (!IsValidateInquiryResAwba(htt, out rescode, out resdecs, out version, out messageid, out ref1, out ref2, out ref3, out ref4, out ref5, out ref6, out loanType, out loandesc, out hashvalue, out amt, out ts))
                                {

                                    return Utils.getErrorRes(rescode, resdecs);
                                }
                                else
                                {

                                    if (rescode != "00")
                                    {

                                        return Utils.getErrorRes(rescode, resdecs);
                                    }
                                    else
                                    {
                                        amt = Utils.getFrom12DigitToOrginal(amt);
                                        ref5 = Utils.getFrom12DigitToOrginal(ref5);
                                        ref6 = Utils.getFrom12DigitToOrginal(ref6);
                                        string totalloan = (double.Parse(amt) + double.Parse(ref5) + double.Parse(ref6)).ToString();
                                        serviceFeeDbl = Utils.getFee(double.Parse(totalloan), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                                        serviceFee = serviceFeeDbl.ToString("###0.00");

                                        writeLog("Total Loan:" + totalloan);
                                        inquiryResponseModel inqRes = new inquiryResponseModel();
                                        inqRes.ResCode = rescode;
                                        inqRes.ResDesc = resdecs;
                                        inqRes.taxID = taxID;
                                        inqRes.merchantname = string.Empty;
                                        inqRes.merchantlogo = string.Empty;
                                        inqRes.billername = billerName;
                                        inqRes.billerlogo = billerLogo;
                                        inqRes.ref1 = ref1;
                                        inqRes.ref2 = ref2;
                                        inqRes.ref3 = string.Empty;
                                        inqRes.ref4 = string.Empty;
                                        inqRes.ref5 = totalloan;
                                        inqRes.ref1Name = ref1Name;
                                        inqRes.ref2Name = ref2Name;
                                        inqRes.ref3Name = string.Empty;
                                        inqRes.ref4Name = string.Empty;
                                        inqRes.ref5Name = "Total Loan";
                                        inqRes.amount = string.Empty;
                                        inqRes.serviceFee = serviceFee;
                                        inqRes.status = status;
                                        inqRes.expiry = ref3;
                                        inqRes.productDescription = ref5 + ":" + ref6 + ":" + loanType + ":" + loandesc + ":" + ref3;
                                        inqRes.imgUrl = imgURL;
                                        return Utils.getInquiryRes(inqRes);
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                writeLog("Excepiton Error" + ex.Message);

                                return Utils.getErrorRes("99", "System Error");
                            }
                            #endregion
                        }
                        else
                        {
                            #region <-- Awba ACE MFI -->
                            writeLog("This Is Awba ACE MFI");
                            string loanType = string.Empty;

                            string loandesc = string.Empty;
                            string amt = string.Empty;
                            string ref6 = string.Empty;
                            StringBuilder hb = new StringBuilder();
                            //Guid id = new Guid();

                            string tsp = System.DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss:fff");
                            // Version + TimeStamp + MessageID + CustomerID + SlipNo
                            string hashkeystr = Utils.GethashKeyawbaInqReq("1.0", tsp, messageid, ref2, ref1);

                            hb.Append("<InquiryReq>");
                            hb.Append("<Version>1.0</Version>");
                            hb.Append("<TimeStamp>" + tsp + "</TimeStamp>");
                            hb.Append("<MessageID>" + messageid + "</MessageID>");
                            hb.Append("<CustomerID>" + ref2 + "</CustomerID>");
                            hb.Append("<SlipNo>" + ref1 + "</SlipNo>");
                            hb.Append("<HashValue>" + hashkeystr + "</HashValue>");
                            hb.Append("</InquiryReq>");
                            writeLog("Inquiry Request To MFI Before Encrypt:" + hb.ToString());
                            SinaptIQPKCS7.PKCS7 pkcs7 = new SinaptIQPKCS7.PKCS7();
                            string encryptedMsg = pkcs7.encryptMessage(hb.ToString(), pkcs7.getPublicCert(ConfigurationManager.AppSettings["publicKeyPathawba"].ToString()));//Convert.ToBase64String(encodedEncryptedCms);
                            writeLog("Inquiry Request To MFI After Encrypt:" + encryptedMsg);
                            string responsestr = string.Empty;
                            string decryptedresdata = string.Empty;
                            MahaAwbaWCF.RouteWebServiceSoapClient mobilewcf = new MahaAwbaWCF.RouteWebServiceSoapClient();
                            // awbaRepayWCF.RouteWebServiceSoapClient mobilwcf = new awbaRepayWCF.RouteWebServiceSoapClient("RouteWebServiceSoap1");
                            try
                            {
                                responsestr = mobilewcf.GetRepaymentInquiryInfo(encryptedMsg);
                                writeLog("Response From MFI Before Decrypt:" + responsestr);
                                if (string.IsNullOrEmpty(responsestr))
                                {

                                    return Utils.getErrorRes("99", "Null Response From MFI");
                                }
                            }
                            catch (Exception ex)
                            {
                                writeLog("Error Response From MFI WCF:" + ex.Message);

                                return Utils.getErrorRes("99", "Error Response From MFI");
                            }
                            string privatecer = ConfigurationManager.AppSettings["privateKeyPathawba"].ToString();
                            string pass = ConfigurationManager.AppSettings["privateKeyPWDawba"].ToString();
                            decryptedresdata = pkcs7.decryptMessage(responsestr, pkcs7.getPrivateCert(ConfigurationManager.AppSettings["privateKeyPathawba"].ToString(), ConfigurationManager.AppSettings["privateKeyPWDawba"].ToString()));
                            writeLog("Inquiry Response form awba after Decrypted:" + decryptedresdata);
                            Hashtable htt = Utils.getHTableFromXML(decryptedresdata);
                            try
                            {
                                if (!IsValidateInquiryResAwba(htt, out rescode, out resdecs, out version, out messageid, out ref1, out ref2, out ref3, out ref4, out ref5, out ref6, out loanType, out loandesc, out hashvalue, out amt, out ts))
                                {

                                    return Utils.getErrorRes(rescode, resdecs);
                                }
                                else
                                {

                                    if (rescode != "00")
                                    {

                                        return Utils.getErrorRes(rescode, resdecs);
                                    }
                                    else
                                    {
                                        amt = Utils.getFrom12DigitToOrginal(amt);
                                        ref5 = Utils.getFrom12DigitToOrginal(ref5);
                                        ref6 = Utils.getFrom12DigitToOrginal(ref6);
                                        string totalloan = (double.Parse(amt) + double.Parse(ref5) + double.Parse(ref6)).ToString();
                                        serviceFeeDbl = Utils.getFee(double.Parse(totalloan), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                                        serviceFee = serviceFeeDbl.ToString("###0.00");

                                        writeLog("Total Loan:" + totalloan);
                                        inquiryResponseModel inqRes = new inquiryResponseModel();
                                        inqRes.ResCode = rescode;
                                        inqRes.ResDesc = resdecs;
                                        inqRes.taxID = taxID;
                                        inqRes.merchantname = string.Empty;
                                        inqRes.merchantlogo = string.Empty;
                                        inqRes.billername = billerName;
                                        inqRes.billerlogo = billerLogo;
                                        inqRes.ref1 = ref1;
                                        inqRes.ref2 = ref2;
                                        inqRes.ref3 = string.Empty;
                                        inqRes.ref4 = string.Empty;
                                        inqRes.ref5 = totalloan;
                                        inqRes.ref1Name = ref1Name;
                                        inqRes.ref2Name = ref2Name;
                                        inqRes.ref3Name = string.Empty;
                                        inqRes.ref4Name = string.Empty;
                                        inqRes.ref5Name = "Total Loan";
                                        inqRes.amount = string.Empty;
                                        inqRes.serviceFee = serviceFee;
                                        inqRes.status = status;
                                        inqRes.expiry = ref3;
                                        inqRes.productDescription = ref5 + ":" + ref6 + ":" + loanType + ":" + loandesc + ":" + ref3;
                                        inqRes.imgUrl = imgURL;
                                        return Utils.getInquiryRes(inqRes);
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                writeLog("Excepiton Error" + ex.Message);

                                return Utils.getErrorRes("99", "System Error");
                            }
                            #endregion
                        }

                    }
                }
                #endregion

                #region <-- MyKyat-cashInOneStopPreauthorisation -->
                /*
                if (taxID == "0000000000025")
                {
                    writeLog("MyKyat CashIn Inquiry AgentCode:" + agentCode);
                    DataSet ds = null;

                    writeLog("Amount" + amount + "servicePercent" + servicePercent + "serviceFlatFee" + serviceFlatFee);

                    if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                    {

                        #region Enquiry Response When simulator is turn on
                        writeLog("Simulator Y");
                        //agentFee = "000000030000";
                        // status = "PE";
                        productdesc = "MyKyat CashIn";
                      
                        serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));//double.Parse((double.Parse(agentFee)).ToString("#,##0.00"));
                        serviceFee = serviceFeeDbl.ToString("###0.00");
                        sb = new StringBuilder();
                        sb.Append("<InquiryRes>");
                        sb.Append("<Version>1.0</Version>");
                        sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                        sb.Append("<ResCode>" + code + "</ResCode>");
                        sb.Append("<ResDesc>" + desp + "</ResDesc>");
                        sb.Append("<TaxID>" + taxID + "</TaxID>");

                        sb.Append("<BillerName>" + agentName + "</BillerName>");
                        sb.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                        sb.Append("<Ref1>12aghjfghj4353</Ref1>");
                        sb.Append("<Ref2>123456</Ref2>");
                        sb.Append("<Ref3>OneStop</Ref3>");
                        sb.Append("<Ref4>Sandar</Ref4>");
                        sb.Append("<Ref5>" + ref3 + "</Ref5>");
                        sb.Append("<Ref1Name></Ref1Name>");
                        sb.Append("<Ref2Name></Ref2Name>");
                        sb.Append("<Ref3Name>Payer Name</Ref3Name>");
                        sb.Append("<Ref4Name>Payee Name</Ref4Name>");
                        sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                        sb.Append("<Amount>" + amount + "</Amount>");
                        sb.Append("<AgentFee>" + serviceFee + "</AgentFee>");
                        sb.Append("<Status>" + status + "</Status>");
                        sb.Append("<Expiry></Expiry>");
                        sb.Append("<ProductDesc>" + productdesc + "</ProductDesc>");
                        sb.Append("<ImageURL>" + imgURL + "</ImageURL>");
                        sb.Append("</InquiryRes>");
                        writeLog("RES XML : " + sb.ToString());
                        return sb.ToString();
                        #endregion

                    }
                    else
                    {

                        #region if Simulator is turn off

                        StringBuilder signatureString = new StringBuilder();

                        string agnref = string.Empty;
                        // string digitalcodedesc = string.Empty;

                        mobileNo = ref3;

                        signatureString.Append(MyKyatUserName);
                        signatureString.Append("~");
                        signatureString.Append(MyKyatPassword);
                        signatureString.Append("~");
                        signatureString.Append(ref3);//payeeMobile
                        signatureString.Append("~");
                        signatureString.Append("MMK");
                        signatureString.Append("~");
                        signatureString.Append(amount);
                        signatureString.Append("~");
                        signatureString.Append(ref4);//message

                        string API = string.Empty;

                        API = ConfigurationManager.AppSettings["cashInOneStopPreauthorisation"].ToString();

                        writeLog("MyKyat cashInOneStopPreauthorisation Req-signature string : " + signatureString.ToString());

                        RouteAPI api_service = new RouteAPI();

                        string decryptData = api_service.ApicallingMyKyat(API, signatureString.ToString(), 0, string.Empty);

                        string[] responseData = decryptData.Split('~');

                        if (responseData[0].ToString() != "0")
                        {
                            sb = new StringBuilder();
                            sb.Append("<Error>");
                            sb.Append("<Version>1.0</Version>");
                            sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            sb.Append("<ResCode>" + responseData[0].ToString() + "</ResCode>");
                            sb.Append("<ResDesc>" + responseData[1].ToString() + "</ResDesc>");
                            sb.Append("</Error>");
                            writeLog("RES XML : " + sb.ToString());
                            return sb.ToString();

                        }
                        else
                        {


                            ref1 = responseData[1].ToString(); // authKey
                            ref2 = responseData[2].ToString(); // txnId 
                            ref5 = responseData[3].ToString(); // payeeMobile   
                            ref3 = responseData[4].ToString(); // payerName
                            ref4 = responseData[5].ToString(); // payeeName     
                            //string mykyatfee = responseData[7].ToString(); // mykyatfee  

                            writeLog("Amount : " + amount + " | Service Percent : " + servicePercent + " | ServiceFlatFee : " + serviceFlatFee + "......");
                            serviceFeeDbl = Utils.getFee(double.Parse(amount),
                                float.Parse(servicePercent), double.Parse(serviceFlatFee));//double.Parse((double.Parse(agentFee)).ToString("#,##0.00"));

                            serviceFee = serviceFeeDbl.ToString("###0.00");
                           
                            writeLog("serviceFee : " + serviceFee);
                            //billerlogo = "iVBORw0KGgoAAAANSUhEUgAAADwAAAAyCAYAAAAA9rgCAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOxAAADsQBlSsOGwAABQpJREFUaEPtml8sJVccx2fuXKppmjT+/00aLYosWpI+dLd/ti3Vl1LdZrvXYld2V0sj2mqzb4KtJSkWdbnXbqXx3CckFUEED7pll40QJARPEhLEG9+ec2aGuXdmuPdSurfzSz6ZceZ3fuZzzz1nxgkOJPz8/MBxnNdD4/8n7NzozYSFhYHjeV7zojfi7+9Pj9oXvRFD+Kw4r2mkK1xVVcVWNDnq6+tVOVoMDg5ib2/vALm9r69Ps/0o4uPjsbW1Jd0BMD8/z9pDQ0OxtLQktQKLi4usPTAwkJ3Lsbm56VCPoitcUVEhdROjtrZWlaPF0NCQ1EMMub2/v19qEUPZR4+4uDhsbGxIPYCZmRnWHhwcjIWFBakVmJubY+0BAQHsXI719XWHehRDWMYQNoS1MYSldkNY0UcPQ9gQFsMQlsIQJhjCMoawIayNISy1G8KKPno818LDw8NSixjKPnroCYeEhGBlZUVqBdv9oO10x0O5E0J3S5T1KGcmTG8yIiKCERkZ6dBHDz1hs9nM9pflWvSc7pEJgoDw8PCDdorz3tmZCXuCnrAWepuCpyLMcyYHOO6wqGvCZtJPgIncDL0hCj2n7Rx/mOeOsKt4KHx4NMnn0o2e1whroTXqLgvX1dVBIAVi79Qi4fcZxP02jYRHT/FG5xRi79qIuFj8KGGWwwt4OFWI9qcFsE4VoHVahJ5bp28gI/ctmEwCOBOP5ORkbG9vS5XUwkdFZWUlm+vKfIqbwgKC385EfHkH4n56hNh7f+B1+9+I/r7FNWGeTAHejO9as/CjPRvldnoUKbdl4f6fFrQ/yUN6QQqpZ0JKSgp2dnakSmrh3t5ejI6OYmxszIHV1VWW39DQ4JBPcfMrLUrx5MbpKAReykbswylEl1td/krz5ENjdUgNzqSA/Fx471P8OnkdGTeTyHThjxXWw2azsfy2tjbV19qjOSwTeDHLbWE96I0V/vwJWiZyyQhfOJFwR0cHy29tbVVdOyVh+knS1do1YZ7zIUf6yTtyu/pjND35Cuk3ksmocx4LW61Wlk+P/9IIuydM5Xxe9IPPCz4Ms3S8VZuBpgkyh2+6J+zr68v+g4FCzwcGBlh+dXW168I1NTWskxyNjY2qHC3h8fFxqYcYynyBLER0cfulj6zIz3LR9iyPkH9A4+QVNA3nIfrNcLbApaamSlXEkF8hlczOzkpXHYMuZlTeOV9XODExEdnZ2YycnBwkJSWpctTCPDIzM5Gfn3+AMp++bHBklbaSx9KDv3IJeXjw+LoIOW9+bMG7n5PfQ2rRZ3xQUBCKiopQXFyMkpISWCwWh3oUu90uKR7G/v4+1tbW2HPc5RF2BWdhutBo5R1C3rDIs7FlwoKLnyVqXKePruNqHE9nZycTb25uVl07B2GBCb//xQWN66eDR6u0K3gk7COgefIa3vtSX1is4/lI/yeFb91PxwdXUnH56iEfXk1DWkYszC/RPy7ERfAoCgoKUFpaqmJkZORA+HTn8Dvim9ZrP7SzV8HjR0Ugwj7k0XONSFvQRt6f28h7tIxtKh/2idtIy4xxSfi4KCsrO11h//hUxHzbhFezvoFAnptaOUrohyKQOVzS9BGK6i/jjhNfEyx3L+GV0JfFV0+NGkq6urrQ3d2toqenB1FRUZp9TiRMHx0yJ5lzjtA6p1VLzYmEn0cMYW/nQNh5NfNW6FYut7u7i4SEBERHR3s1MTExWF5exj8VUvKfWoOKfQAAAABJRU5ErkJggg==";
                            sb = new StringBuilder();
                            sb.Append("<InquiryRes>");
                            sb.Append("<Version>1.0</Version>");
                            sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            sb.Append("<ResCode>00</ResCode>");
                            sb.Append("<ResDesc>Sussess</ResDesc>");
                            sb.Append("<TaxID>" + taxID + "</TaxID>");
                            sb.Append("<BillerName>" + billerName + "</BillerName>");
                            sb.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                            sb.Append("<Ref1>" + ref1 + "</Ref1>"); // authKey
                            sb.Append("<Ref2>" + ref2 + "</Ref2>"); // txnId
                            sb.Append("<Ref3>" + ref3 + "</Ref3>"); // payerName
                            sb.Append("<Ref4>" + ref4 + "</Ref4>"); // payeeName
                            sb.Append("<Ref5>" + mobileNo + "</Ref5>"); // payeeMobile
                            sb.Append("<Ref1Name></Ref1Name>");
                            sb.Append("<Ref2Name></Ref2Name>");
                            sb.Append("<Ref3Name>Payer Name</Ref3Name>");
                            sb.Append("<Ref4Name>Payee Name</Ref4Name>");
                            sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                            sb.Append("<Amount>" + amount + "</Amount>");
                            sb.Append("<AgentFee>" + serviceFee + "</AgentFee>");
                            sb.Append("<Status>" + status + "</Status>");
                            sb.Append("<Expiry>" + expiry + "</Expiry>");
                            sb.Append("<ProductDesc> MyKyat Cash In</ProductDesc>");
                            sb.Append("<ImageURL>" + imgURL + "</ImageURL>");
                            sb.Append("</InquiryRes>");
                            writeLog("RES XML : " + sb.ToString());
                            return sb.ToString();
                        }

                        #endregion
                    }
                }

                */

                #endregion

                #region <-- MyKyat-cashOutOneStopPreauthorisation -->
                /*
                if (taxID == "0000000000026")
                {
                    writeLog("MyKyat CashOut Inquiry AgentCode:" + agentCode);
                    DataSet ds = null;

                    writeLog("Amount" + amount + "servicePercent" + servicePercent + "serviceFlatFee" + serviceFlatFee);

                    if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                    {

                        #region Enquiry Response When simulator is turn on
                        writeLog("Simulator Y");
                        //agentFee = "000000030000";
                        // status = "PE";
                        productdesc = "MyKyat Cash Out";
                      
                        serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));//double.Parse((double.Parse(agentFee)).ToString("#,##0.00"));
                        serviceFee = serviceFeeDbl.ToString("###0.00");
                        sb = new StringBuilder();
                        sb.Append("<InquiryRes>");
                        sb.Append("<Version>1.0</Version>");
                        sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                        sb.Append("<ResCode>" + code + "</ResCode>");
                        sb.Append("<ResDesc>" + desp + "</ResDesc>");
                        sb.Append("<TaxID>" + taxID + "</TaxID>");

                        sb.Append("<BillerName>" + agentName + "</BillerName>");
                        sb.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                        sb.Append("<Ref1>1ryw13sfe44</Ref1>");
                        sb.Append("<Ref2>123456</Ref2>");
                        sb.Append("<Ref3>" + ref1 + "</Ref3>");
                        sb.Append("<Ref4>12312312</Ref4>");
                        sb.Append("<Ref5>" + ref3 + "</Ref5>");
                        sb.Append("<Ref1Name></Ref1Name>");
                        sb.Append("<Ref2Name></Ref2Name>");
                        sb.Append("<Ref3Name>Pickup Code</Ref3Name>");
                        sb.Append("<Ref4Name></Ref4Name>");
                        sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                        sb.Append("<Amount>3000</Amount>");
                        sb.Append("<AgentFee>" + serviceFee + "</AgentFee>");
                        sb.Append("<Status>" + status + "</Status>");
                        sb.Append("<Expiry></Expiry>");
                        sb.Append("<ProductDesc>" + productdesc + "</ProductDesc>");
                        sb.Append("<ImageURL>" + imgURL + "</ImageURL>");
                        sb.Append("</InquiryRes>");
                        writeLog("RES XML : " + sb.ToString());
                        return sb.ToString();
                        #endregion

                    }
                    else
                    {

                        #region if Simulator is turn off

                        StringBuilder signatureString = new StringBuilder();

                        string agnref = string.Empty;
                        // string digitalcodedesc = string.Empty;
                        signatureString.Append(MyKyatUserName);
                        signatureString.Append("~");
                        signatureString.Append(MyKyatPassword);
                        signatureString.Append("~");
                        signatureString.Append(ref3); //payerMobile
                        signatureString.Append("~");
                        signatureString.Append(ref1); // pickupcode
                        signatureString.Append("~");
                        signatureString.Append("MMK");

                        mobileNo = ref3;
                        ref3 = ref1;

                        string API = string.Empty;

                        API = ConfigurationManager.AppSettings["cashOutOneStopPreauthorisation"].ToString();

                        writeLog("MyKyat cashOutOneStopPreauthorisation Req-signature string : " + signatureString.ToString());

                        RouteAPI api_service = new RouteAPI();

                        string decryptData = api_service.ApicallingMyKyat(API, signatureString.ToString(), 0, string.Empty);

                        string[] responseData = decryptData.Split('~');

                        if (responseData[0].ToString() != "0")
                        {
                            sb = new StringBuilder();
                            sb.Append("<Error>");
                            sb.Append("<Version>1.0</Version>");
                            sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            sb.Append("<ResCode>" + responseData[0].ToString() + "</ResCode>");
                            sb.Append("<ResDesc>" + responseData[1].ToString() + "</ResDesc>");
                            sb.Append("</Error>");
                            writeLog("RES XML : " + sb.ToString());
                            return sb.ToString();

                        }

                        else
                        {


                            ref1 = responseData[1].ToString(); // authKey
                            ref2 = responseData[2].ToString(); // txnId 
                            ref4 = responseData[3].ToString(); // pickupId 
                            amount = responseData[5].ToString(); // amount
                            //string mykyatfee = responseData[6].ToString(); // fee     

                            writeLog("Amount : " + amount + " | Service Percent : " + servicePercent + " | ServiceFlatFee : " + serviceFlatFee + "......");
                            serviceFeeDbl = Utils.getFee(double.Parse(amount),
                                float.Parse(servicePercent), double.Parse(serviceFlatFee));//double.Parse((double.Parse(agentFee)).ToString("#,##0.00"));
                                                      

                            serviceFee = serviceFeeDbl.ToString("###0.00");

                            writeLog("serviceFee : " + serviceFee);
                            //billerlogo = "iVBORw0KGgoAAAANSUhEUgAAADwAAAAyCAYAAAAA9rgCAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOxAAADsQBlSsOGwAABQpJREFUaEPtml8sJVccx2fuXKppmjT+/00aLYosWpI+dLd/ti3Vl1LdZrvXYld2V0sj2mqzb4KtJSkWdbnXbqXx3CckFUEED7pll40QJARPEhLEG9+ec2aGuXdmuPdSurfzSz6ZceZ3fuZzzz1nxgkOJPz8/MBxnNdD4/8n7NzozYSFhYHjeV7zojfi7+9Pj9oXvRFD+Kw4r2mkK1xVVcVWNDnq6+tVOVoMDg5ib2/vALm9r69Ps/0o4uPjsbW1Jd0BMD8/z9pDQ0OxtLQktQKLi4usPTAwkJ3Lsbm56VCPoitcUVEhdROjtrZWlaPF0NCQ1EMMub2/v19qEUPZR4+4uDhsbGxIPYCZmRnWHhwcjIWFBakVmJubY+0BAQHsXI719XWHehRDWMYQNoS1MYSldkNY0UcPQ9gQFsMQlsIQJhjCMoawIayNISy1G8KKPno818LDw8NSixjKPnroCYeEhGBlZUVqBdv9oO10x0O5E0J3S5T1KGcmTG8yIiKCERkZ6dBHDz1hs9nM9pflWvSc7pEJgoDw8PCDdorz3tmZCXuCnrAWepuCpyLMcyYHOO6wqGvCZtJPgIncDL0hCj2n7Rx/mOeOsKt4KHx4NMnn0o2e1whroTXqLgvX1dVBIAVi79Qi4fcZxP02jYRHT/FG5xRi79qIuFj8KGGWwwt4OFWI9qcFsE4VoHVahJ5bp28gI/ctmEwCOBOP5ORkbG9vS5XUwkdFZWUlm+vKfIqbwgKC385EfHkH4n56hNh7f+B1+9+I/r7FNWGeTAHejO9as/CjPRvldnoUKbdl4f6fFrQ/yUN6QQqpZ0JKSgp2dnakSmrh3t5ejI6OYmxszIHV1VWW39DQ4JBPcfMrLUrx5MbpKAReykbswylEl1td/krz5ENjdUgNzqSA/Fx471P8OnkdGTeTyHThjxXWw2azsfy2tjbV19qjOSwTeDHLbWE96I0V/vwJWiZyyQhfOJFwR0cHy29tbVVdOyVh+knS1do1YZ7zIUf6yTtyu/pjND35Cuk3ksmocx4LW61Wlk+P/9IIuydM5Xxe9IPPCz4Ms3S8VZuBpgkyh2+6J+zr68v+g4FCzwcGBlh+dXW168I1NTWskxyNjY2qHC3h8fFxqYcYynyBLER0cfulj6zIz3LR9iyPkH9A4+QVNA3nIfrNcLbApaamSlXEkF8hlczOzkpXHYMuZlTeOV9XODExEdnZ2YycnBwkJSWpctTCPDIzM5Gfn3+AMp++bHBklbaSx9KDv3IJeXjw+LoIOW9+bMG7n5PfQ2rRZ3xQUBCKiopQXFyMkpISWCwWh3oUu90uKR7G/v4+1tbW2HPc5RF2BWdhutBo5R1C3rDIs7FlwoKLnyVqXKePruNqHE9nZycTb25uVl07B2GBCb//xQWN66eDR6u0K3gk7COgefIa3vtSX1is4/lI/yeFb91PxwdXUnH56iEfXk1DWkYszC/RPy7ERfAoCgoKUFpaqmJkZORA+HTn8Dvim9ZrP7SzV8HjR0Ugwj7k0XONSFvQRt6f28h7tIxtKh/2idtIy4xxSfi4KCsrO11h//hUxHzbhFezvoFAnptaOUrohyKQOVzS9BGK6i/jjhNfEyx3L+GV0JfFV0+NGkq6urrQ3d2toqenB1FRUZp9TiRMHx0yJ5lzjtA6p1VLzYmEn0cMYW/nQNh5NfNW6FYut7u7i4SEBERHR3s1MTExWF5exj8VUvKfWoOKfQAAAABJRU5ErkJggg==";
                            sb = new StringBuilder();
                            sb.Append("<InquiryRes>");
                            sb.Append("<Version>1.0</Version>");
                            sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            sb.Append("<ResCode>00</ResCode>");
                            sb.Append("<ResDesc>Sussess</ResDesc>");
                            sb.Append("<TaxID>" + taxID + "</TaxID>");
                            sb.Append("<BillerName>" + billerName + "</BillerName>");
                            sb.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                            sb.Append("<Ref1>" + ref1 + "</Ref1>"); // authKey
                            sb.Append("<Ref2>" + ref2 + "</Ref2>"); // txnId
                            sb.Append("<Ref3>" + ref3 + "</Ref3>"); // pickupcode
                            sb.Append("<Ref4>" + ref4 + "</Ref4>"); // pickupId
                            sb.Append("<Ref5>" + mobileNo + "</Ref5>"); // payerMobile
                            sb.Append("<Ref1Name></Ref1Name>");
                            sb.Append("<Ref2Name></Ref2Name>");
                            sb.Append("<Ref3Name>Pickup Code</Ref3Name>");
                            sb.Append("<Ref4Name></Ref4Name>");
                            sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                            sb.Append("<Amount>" + amount + "</Amount>");
                            sb.Append("<AgentFee>" + serviceFee + "</AgentFee>");
                            sb.Append("<Status>" + status + "</Status>");
                            sb.Append("<Expiry></Expiry>");
                            sb.Append("<ProductDesc> MyKyat Cash Out</ProductDesc>");
                            sb.Append("<ImageURL>" + imgURL + "</ImageURL>");
                            sb.Append("</InquiryRes>");
                            writeLog("RES XML : " + sb.ToString());
                            return sb.ToString();
                        }

                        #endregion
                    }
                }
                */
                #endregion

                #region <-- MyKyat-remittancePreauthorisation -->
                /*
                if (taxID == "0000000000027")
                {
                    writeLog("MyKyat Remittance Inquiry AgentCode:" + agentCode);
                    DataSet ds = null;

                    writeLog("Amount" + amount + "servicePercent" + servicePercent + "serviceFlatFee" + serviceFlatFee);

                    if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                    {

                        #region Enquiry Response When simulator is turn on
                        writeLog("Simulator Y");
                        //agentFee = "000000030000";
                        // status = "PE";
                        productdesc = "MyKyat Remittance";
                     
                        serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));//double.Parse((double.Parse(agentFee)).ToString("#,##0.00"));
                        serviceFee = serviceFeeDbl.ToString("###0.00");
                        sb = new StringBuilder();
                        sb.Append("<InquiryRes>");
                        sb.Append("<Version>1.0</Version>");
                        sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                        sb.Append("<ResCode>" + code + "</ResCode>");
                        sb.Append("<ResDesc>" + desp + "</ResDesc>");
                        sb.Append("<TaxID>" + taxID + "</TaxID>");

                        sb.Append("<BillerName>" + agentName + "</BillerName>");
                        sb.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                        sb.Append("<Ref1>234dfsdf1234</Ref1>");
                        sb.Append("<Ref2>123456</Ref2>");
                        sb.Append("<Ref3></Ref3>");
                        sb.Append("<Ref4></Ref4>");
                        sb.Append("<Ref5>" + ref3 + "</Ref5>");
                        sb.Append("<Ref1Name></Ref1Name>");
                        sb.Append("<Ref2Name></Ref2Name>");
                        sb.Append("<Ref3Name></Ref3Name>");
                        sb.Append("<Ref4Name></Ref4Name>");
                        sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                        sb.Append("<Amount>" + amount + "</Amount>");
                        sb.Append("<AgentFee>" + serviceFee + "</AgentFee>");
                        sb.Append("<Status>" + status + "</Status>");
                        sb.Append("<Expiry></Expiry>");
                        sb.Append("<ProductDesc>" + productdesc + "</ProductDesc>");
                        sb.Append("<ImageURL>" + imgURL + "</ImageURL>");
                        sb.Append("</InquiryRes>");
                        writeLog("RES XML : " + sb.ToString());
                        return sb.ToString();
                        #endregion

                    }
                    else
                    {

                        #region if Simulator is turn off

                        StringBuilder signatureString = new StringBuilder();
                        mobileNo = ref3;
                        string agnref = string.Empty;
                        // string digitalcodedesc = string.Empty;
                        signatureString.Append(MyKyatUserName);
                        signatureString.Append("~");
                        signatureString.Append(MyKyatPassword);
                        signatureString.Append("~");
                        signatureString.Append(ref3);//payeeMobile
                        signatureString.Append("~");
                        signatureString.Append("MMK");
                        signatureString.Append("~");
                        signatureString.Append(amount);
                        signatureString.Append("~");
                        signatureString.Append(ref4);//message
                        signatureString.Append("~");
                        signatureString.Append(ref1);//payeeDisplayName
                        signatureString.Append("~");
                        signatureString.Append(ref2);//payeeIdentityValue
                        signatureString.Append("~");
                        signatureString.Append(ref5);//payeeAddress


                        string API = string.Empty;

                        API = ConfigurationManager.AppSettings["remittancePreauthorisation"].ToString();

                        writeLog("MyKyat remittancePreauthorisation Req-signature string : " + signatureString.ToString());

                        RouteAPI api_service = new RouteAPI();

                        string decryptData = api_service.ApicallingMyKyat(API, signatureString.ToString(), 0, string.Empty);

                        string[] responseData = decryptData.Split('~');

                        if (responseData[0].ToString() != "0")
                        {
                            sb = new StringBuilder();
                            sb.Append("<Error>");
                            sb.Append("<Version>1.0</Version>");
                            sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            sb.Append("<ResCode>" + responseData[0].ToString() + "</ResCode>");
                            sb.Append("<ResDesc>" + responseData[1].ToString() + "</ResDesc>");
                            sb.Append("</Error>");
                            writeLog("RES XML : " + sb.ToString());
                            return sb.ToString();

                        }
                        else
                        {


                            ref1 = responseData[1].ToString(); // authKey
                            ref2 = responseData[2].ToString(); // txnId 
                            ref3 = responseData[3].ToString(); // payeeMobile 
                            //string mykyatfee = responseData[5].ToString(); // fee     

                            writeLog("Amount : " + amount + " | Service Percent : " + servicePercent + " | ServiceFlatFee : " + serviceFlatFee + "......");

                            serviceFeeDbl = Utils.getFee(double.Parse(amount),
                            float.Parse(servicePercent), double.Parse(serviceFlatFee));//double.Parse((double.Parse(agentFee)).ToString("#,##0.00"));
                         
                            serviceFee = serviceFeeDbl.ToString("###0.00");

                            writeLog("serviceFee : " + serviceFee);
                            //billerlogo = "iVBORw0KGgoAAAANSUhEUgAAADwAAAAyCAYAAAAA9rgCAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOxAAADsQBlSsOGwAABQpJREFUaEPtml8sJVccx2fuXKppmjT+/00aLYosWpI+dLd/ti3Vl1LdZrvXYld2V0sj2mqzb4KtJSkWdbnXbqXx3CckFUEED7pll40QJARPEhLEG9+ec2aGuXdmuPdSurfzSz6ZceZ3fuZzzz1nxgkOJPz8/MBxnNdD4/8n7NzozYSFhYHjeV7zojfi7+9Pj9oXvRFD+Kw4r2mkK1xVVcVWNDnq6+tVOVoMDg5ib2/vALm9r69Ps/0o4uPjsbW1Jd0BMD8/z9pDQ0OxtLQktQKLi4usPTAwkJ3Lsbm56VCPoitcUVEhdROjtrZWlaPF0NCQ1EMMub2/v19qEUPZR4+4uDhsbGxIPYCZmRnWHhwcjIWFBakVmJubY+0BAQHsXI719XWHehRDWMYQNoS1MYSldkNY0UcPQ9gQFsMQlsIQJhjCMoawIayNISy1G8KKPno818LDw8NSixjKPnroCYeEhGBlZUVqBdv9oO10x0O5E0J3S5T1KGcmTG8yIiKCERkZ6dBHDz1hs9nM9pflWvSc7pEJgoDw8PCDdorz3tmZCXuCnrAWepuCpyLMcyYHOO6wqGvCZtJPgIncDL0hCj2n7Rx/mOeOsKt4KHx4NMnn0o2e1whroTXqLgvX1dVBIAVi79Qi4fcZxP02jYRHT/FG5xRi79qIuFj8KGGWwwt4OFWI9qcFsE4VoHVahJ5bp28gI/ctmEwCOBOP5ORkbG9vS5XUwkdFZWUlm+vKfIqbwgKC385EfHkH4n56hNh7f+B1+9+I/r7FNWGeTAHejO9as/CjPRvldnoUKbdl4f6fFrQ/yUN6QQqpZ0JKSgp2dnakSmrh3t5ejI6OYmxszIHV1VWW39DQ4JBPcfMrLUrx5MbpKAReykbswylEl1td/krz5ENjdUgNzqSA/Fx471P8OnkdGTeTyHThjxXWw2azsfy2tjbV19qjOSwTeDHLbWE96I0V/vwJWiZyyQhfOJFwR0cHy29tbVVdOyVh+knS1do1YZ7zIUf6yTtyu/pjND35Cuk3ksmocx4LW61Wlk+P/9IIuydM5Xxe9IPPCz4Ms3S8VZuBpgkyh2+6J+zr68v+g4FCzwcGBlh+dXW168I1NTWskxyNjY2qHC3h8fFxqYcYynyBLER0cfulj6zIz3LR9iyPkH9A4+QVNA3nIfrNcLbApaamSlXEkF8hlczOzkpXHYMuZlTeOV9XODExEdnZ2YycnBwkJSWpctTCPDIzM5Gfn3+AMp++bHBklbaSx9KDv3IJeXjw+LoIOW9+bMG7n5PfQ2rRZ3xQUBCKiopQXFyMkpISWCwWh3oUu90uKR7G/v4+1tbW2HPc5RF2BWdhutBo5R1C3rDIs7FlwoKLnyVqXKePruNqHE9nZycTb25uVl07B2GBCb//xQWN66eDR6u0K3gk7COgefIa3vtSX1is4/lI/yeFb91PxwdXUnH56iEfXk1DWkYszC/RPy7ERfAoCgoKUFpaqmJkZORA+HTn8Dvim9ZrP7SzV8HjR0Ugwj7k0XONSFvQRt6f28h7tIxtKh/2idtIy4xxSfi4KCsrO11h//hUxHzbhFezvoFAnptaOUrohyKQOVzS9BGK6i/jjhNfEyx3L+GV0JfFV0+NGkq6urrQ3d2toqenB1FRUZp9TiRMHx0yJ5lzjtA6p1VLzYmEn0cMYW/nQNh5NfNW6FYut7u7i4SEBERHR3s1MTExWF5exj8VUvKfWoOKfQAAAABJRU5ErkJggg==";
                            sb = new StringBuilder();
                            sb.Append("<InquiryRes>");
                            sb.Append("<Version>1.0</Version>");
                            sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            sb.Append("<ResCode>00</ResCode>");
                            sb.Append("<ResDesc>Sussess</ResDesc>");
                            sb.Append("<TaxID>" + taxID + "</TaxID>");

                            sb.Append("<BillerName>" + billerName + "</BillerName>");
                            sb.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                            sb.Append("<Ref1>" + ref1 + "</Ref1>"); // authKey
                            sb.Append("<Ref2>" + ref2 + "</Ref2>"); // txnId
                            sb.Append("<Ref3></Ref3>");
                            sb.Append("<Ref4></Ref4>");
                            sb.Append("<Ref5>" + mobileNo + "</Ref5>");  // payeeMobile
                            sb.Append("<Ref1Name></Ref1Name>");
                            sb.Append("<Ref2Name></Ref2Name>");
                            sb.Append("<Ref3Name></Ref3Name>");
                            sb.Append("<Ref4Name></Ref4Name>");
                            sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                            sb.Append("<Amount>" + amount + "</Amount>");
                            sb.Append("<AgentFee>" + serviceFee + "</AgentFee>");
                            sb.Append("<Status>" + status + "</Status>");
                            sb.Append("<Expiry></Expiry>");
                            sb.Append("<ProductDesc> MyKyat Remittance</ProductDesc>");
                            sb.Append("<ImageURL>" + imgURL + "</ImageURL>");
                            sb.Append("</InquiryRes>");
                            writeLog("RES XML : " + sb.ToString());
                            return sb.ToString();
                        }

                        #endregion
                    }

                }
                */
                #endregion

                #region <-- Four TV -->
                if (MapTaxID == "0000000000031")
                {
                    if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                    {
                        #region <-- Simulator Mode -->

                        writeLog("get 4TV Product Price List");
                        string fourTVProductPrice = ConfigurationManager.AppSettings["fourTVPrice"].ToString();//get ProductID:Price string set of 4TV.
                        writeLog("get 4TV Product Price List OK");
                        Hashtable fourTVProductPriceHt = Utils.getMerchantCodeHashtable(fourTVProductPrice);//Fatch productID and Price pair of 4TV

                        writeLog("get 4TV Product Price List");
                        string fourTVProductName = ConfigurationManager.AppSettings["fourTVProduct"].ToString();//get ProductID:Price string set of 4TV.
                        writeLog("get 4TV Product Price List OK");
                        Hashtable fourTVProductNameHt = Utils.getMerchantCodeHashtable(fourTVProductName);//Fatch productID and Price pair of 4TV
                        string productName = string.Empty;
                        string viewername = "4TV Tester";
                        if (fourTVProductPriceHt.ContainsKey(ref3))
                        {
                            amount = fourTVProductPriceHt[ref3].ToString();
                            writeLog("productPirce" + amount);
                            serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                            serviceFee = serviceFeeDbl.ToString("###0.00");
                            if (!(double.Parse(amount) > 0))
                            {
                                writeLog("Amount is 0 Need to check Config at fourTVPrice tag and fourTVProduct tag that productid and price pair are correct or not");
                                Utils.getErrorRes("06", "Price Not Avaliable");
                            }



                        }

                        if (fourTVProductNameHt.Contains(ref3))
                        {
                            productName = fourTVProductNameHt[ref3].ToString();
                        }

                        string inqResString = string.Empty;
                        rescode = "00";
                        resdecs = "Success";

                        inquiryResponseModel inqres = new inquiryResponseModel();
                        inqres.ResCode = rescode;
                        inqres.ResDesc = resdecs;
                        inqres.taxID = taxID;
                        inqres.merchantname = merchantname;
                        inqres.merchantlogo = merchantlogo;
                        inqres.billerlogo = billerLogo;
                        inqres.billername = billerName;
                        inqres.ref1 = ref1;
                        inqres.ref2 = viewername;
                        inqres.ref3 = productName;
                        inqres.ref4 = string.Empty;
                        inqres.ref5 = ref3 + ":" + productName;
                        inqres.ref1Name = ref1Name;
                        inqres.ref2Name = ref2Name;
                        inqres.ref3Name = "Product";
                        inqres.ref4Name = string.Empty;
                        inqres.ref5Name = string.Empty;
                        inqres.amount = amount;
                        inqres.serviceFee = serviceFee;
                        inqres.status = "Success";
                        inqres.expiry = string.Empty;
                        inqres.productDescription = string.Empty;// inqRes.ContractDescription;
                        inqres.imgUrl = imgURL;

                        inqResString = Utils.getInquiryRes(inqres);
                        return inqResString;


                        #endregion

                    }
                    else
                    {
                        #region <-- Simulator Mode Off -->
                        string username = ConfigurationManager.AppSettings["fourTVUserID"].ToString();
                        string pas = ConfigurationManager.AppSettings["fourTVPass"].ToString();
                        string parameter = "username=" + username + "&password=" + pas + "&viewers_smartcard_id=" + ref1;
                        // string parameter = ref1;
                        string url = ConfigurationManager.AppSettings["fourTVUri"].ToString();
                        url = url + "viewer.php";
                        string responseData = string.Empty;
                        string viewerstatus = string.Empty;
                        string viewername = string.Empty;

                        string productName = string.Empty;
                        writeLog("Request URL:" + url);
                        writeLog("Request Parameter:" + parameter);
                        SSLPost post = new SSLPost();
                        if (post.postData(url, parameter, out responseData, out errMsg))
                        {
                            writeLog("fourTV inqRes:" + responseData);
                            fourTVViewerListRes fourTVRes = new fourTVViewerListRes(responseData);
                            // StringBuilder sb = new StringBuilder();
                            if (fourTVRes.status == 1 && fourTVRes.responseDetail.Count == 1)
                            {
                                foreach (var data in fourTVRes.responseDetail)
                                {
                                    viewername = data.Value.viewerfirstname + " " + data.Value.viewerlastname;

                                    viewerstatus = data.Value.vieweractive;

                                }
                                if (viewerstatus == "1")//if viewer is active user do here.
                                {

                                    writeLog("get 4TV Product Price List");
                                    string fourTVProductPrice = ConfigurationManager.AppSettings["fourTVPrice"].ToString();//get ProductID:Price string set of 4TV.
                                    writeLog("get 4TV Product Price List OK");
                                    Hashtable fourTVProductPriceHt = Utils.getMerchantCodeHashtable(fourTVProductPrice);//Fatch productID and Price pair of 4TV

                                    writeLog("get 4TV Product Price List");
                                    string fourTVProductName = ConfigurationManager.AppSettings["fourTVProduct"].ToString();//get ProductID:Price string set of 4TV.
                                    writeLog("get 4TV Product Price List OK");
                                    Hashtable fourTVProductNameHt = Utils.getMerchantCodeHashtable(fourTVProductName);//Fatch productID and Price pair of 4TV


                                    if (fourTVProductPriceHt.ContainsKey(ref3))
                                    {
                                        amount = fourTVProductPriceHt[ref3].ToString();
                                        writeLog("productPirce" + amount);
                                        serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                                        serviceFee = serviceFeeDbl.ToString("###0.00");

                                        if (double.Parse(amount) > 0)
                                        {
                                            writeLog("checking productPirce is :" + amount);

                                        }
                                        else
                                        {
                                            Utils.getErrorRes("06", "Invalid PriceType");
                                        }
                                    }

                                    if (fourTVProductNameHt.Contains(ref3))
                                    {
                                        productName = fourTVProductNameHt[ref3].ToString();
                                    }

                                    string inqResString = string.Empty;
                                    rescode = "00";
                                    resdecs = "Success";

                                    inquiryResponseModel inqres = new inquiryResponseModel();
                                    inqres.ResCode = rescode;
                                    inqres.ResDesc = resdecs;
                                    inqres.taxID = taxID;
                                    inqres.merchantname = merchantname;
                                    inqres.merchantlogo = merchantlogo;
                                    inqres.billerlogo = billerLogo;
                                    inqres.billername = billerName;
                                    inqres.ref1 = ref1;
                                    inqres.ref2 = viewername;
                                    inqres.ref3 = productName;
                                    inqres.ref4 = string.Empty;
                                    inqres.ref5 = ref3 + ":" + productName;
                                    inqres.ref1Name = ref1Name;
                                    inqres.ref2Name = ref2Name;
                                    inqres.ref3Name = "Product";
                                    inqres.ref4Name = string.Empty;
                                    inqres.ref5Name = string.Empty;
                                    inqres.amount = amount;
                                    inqres.serviceFee = serviceFee;
                                    inqres.status = "Success";
                                    inqres.expiry = string.Empty;
                                    inqres.productDescription = string.Empty;// inqRes.ContractDescription;
                                    inqres.imgUrl = imgURL;

                                    inqResString = Utils.getInquiryRes(inqres);
                                    return inqResString;

                                }
                                else
                                {
                                    return Utils.getErrorRes("06", "Invalid Card Number");
                                }
                            }
                            else
                            {
                                return Utils.getErrorRes("06", "Invalid Card Number");
                            }

                            string product = sb.ToString();
                        }
                        else
                        {
                            writeLog("Error Posting To 4TV:" + errMsg);
                            return Utils.getErrorRes("06", "System Busy!");
                        }

                        #endregion
                    }
                }
                #endregion

                #region <-- 123Remit_CashIn -->


                if (MapTaxID.Trim() == "0000000000032")
                {
                    writeLog("123Remit CashIn Inquiry AgentCode:" + agentCode);

                    writeLog("Amount" + amount + "servicePercent" + servicePercent + "serviceFlatFee" + serviceFlatFee);
                    productdesc = "123Remit CashIn";
                    if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                    {

                        #region <-- Inquiry Response When simulator is turn on -->
                        writeLog("Simulator Y");
                        agentFee = "000000030000";
                        status = "PE";
                        serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));//double.Parse((double.Parse(agentFee)).ToString("#,##0.00"));
                        serviceFee = serviceFeeDbl.ToString("###0.00");
                        inquiryResponseModel responseCashIn = new inquiryResponseModel();
                        responseCashIn.ResCode = code;
                        responseCashIn.ResDesc = desp;
                        responseCashIn.taxID = taxID;
                        responseCashIn.billername = agentName;
                        responseCashIn.billerlogo = billerLogo;
                        responseCashIn.productDescription = productdesc;
                        string responseXML = Utils.getInquiryRes(responseCashIn);
                        writeLog("RES XML : " + responseXML);
                        return responseXML;
                        #endregion

                    }
                    else
                    {

                        #region <-- If Simulator is turn off -->
                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }
                        CashInInquiryRequest cashinRequest = new CashInInquiryRequest();
                        //string BranchId = string.Empty;
                        //string DivisionID = string.Empty;
                        //string TownshipID = string.Empty;

                        cashinRequest.Token = Token.Token;
                        cashinRequest.Channel = ConfigurationManager.AppSettings["123RemitChannelCode"].ToString();
                        writeLog("Payee Info " + ref4);
                        string[] strPayee = ref4.Split('-');
                        cashinRequest.PayerName = ref2;
                        cashinRequest.PayerEmail = string.Empty;
                        cashinRequest.PayerPhone = ref3;
                        cashinRequest.PayerNRC = string.Empty;
                        cashinRequest.PayeeName = strPayee[0].ToString();
                        cashinRequest.PayeeEmail = string.Empty;
                        cashinRequest.PayeePhone = strPayee[1].ToString();
                        cashinRequest.PayeeNRC = strPayee[2].ToString();
                        cashinRequest.Amount = amount;
                        cashinRequest.Remark = strPayee[3].ToString();
                        cashinRequest.PaidBy = ref5;
                        cashinRequest.BranchID = strPayee[4].ToString();
                        cashinRequest.DivisionID = strPayee[5].ToString();
                        cashinRequest.TownshipID = strPayee[6].ToString();

                        string API = ConfigurationManager.AppSettings["123RemitCashInInquiryUrl"].ToString();

                        var json_serializer1 = new JavaScriptSerializer();


                        string jsonReq = json_serializer1.Serialize(cashinRequest);

                        writeLog("123 Remit CashIn request:" + jsonReq);

                        string cashinResponseJson = SSLPost.SendRequestJson(jsonReq, API);

                        writeLog("123 Remit CashIn response:" + cashinResponseJson);

                        var json_serializerpinres = new JavaScriptSerializer();

                        GetInquiryCashInResult InquiryCashInResult = json_serializerpinres.Deserialize<GetInquiryCashInResult>(cashinResponseJson);

                        CashInInquiryResponse cashinResponse = InquiryCashInResult.InquiryCashInResult;

                        if (cashinResponse.ResponseCode != "0")
                        {
                            ErrorResponse errResponse = new ErrorResponse();
                            errResponse.ResCode = cashinResponse.ResponseCode;
                            errResponse.ResDesc = VerificationRemittanceResponse.VerifyResponse(Convert.ToInt16(cashinResponse.ResponseCode));
                            string apiResponse = Utils.getErrorRes(errResponse.ResCode, errResponse.ResDesc);
                            return apiResponse;

                        }
                        else
                        {
                            cashinResponse = DecryptionResponse.DecryptCashinInInquiryResponse(cashinResponse);

                            writeLog("Amount : " + cashinResponse.Amount + " | Payer Fee : " + cashinResponse.PayerFee + " | Payee Fee : " + cashinResponse.PayeeFee + "......");
                            status = "PE";
                            //serviceFeeDbl = Utils.getFee(double.Parse(amount),
                            //    float.Parse(servicePercent), double.Parse(serviceFlatFee));//double.Parse((double.Parse(agentFee)).ToString("#,##0.00"));                           
                            //serviceFee = serviceFeeDbl.ToString("###0.00");
                            //BillerInfo billerinfo = GetBillerFee(ConfigurationManager.AppSettings["123RemitCashOut"].ToString(), agentID, email);
                            //double cashoutfee = Utils.getFee(double.Parse(amount),
                            //  float.Parse(billerinfo.ServicePercent), double.Parse(billerinfo.ServiceFlatFee));//double.Parse((double.Parse(agentFee)).ToString("#,##0.00"));     
                            //amount = OneTwoThreeRemit.GetTransactionAmount(Convert.ToDecimal(amount), Convert.ToDecimal(serviceFeeDbl), Convert.ToDecimal(cashoutfee), Convert.ToInt16(cashinRequest.PaidBy), 1).ToString();
                            //serviceFee = OneTwoThreeRemit.GetServiceFee(Convert.ToDecimal(serviceFeeDbl), Convert.ToDecimal(cashoutfee), Convert.ToInt16(cashinRequest.PaidBy), 1).ToString("###0.00"); // 1 is CashIn
                            serviceFee = OneTwoThreeRemit.GetServiceFee(Convert.ToDecimal(cashinResponse.PayerFee), Convert.ToDecimal(cashinResponse.PayeeFee), Convert.ToInt16(cashinRequest.PaidBy), 1).ToString("###0.00");
                            writeLog("serviceFee : " + serviceFee);
                            inquiryResponseModel inquiryResponse = new inquiryResponseModel();
                            inquiryResponse.ResCode = "00";
                            inquiryResponse.ResDesc = "Success";
                            inquiryResponse.taxID = taxID;
                            inquiryResponse.billername = billerName;
                            inquiryResponse.billerlogo = billerLogo;
                            inquiryResponse.ref1 = cashinRequest.PayerName;
                            inquiryResponse.ref2 = cashinRequest.PayeeName;
                            inquiryResponse.ref3 = cashinRequest.PayeePhone;
                            inquiryResponse.ref4 = cashinRequest.PayeeNRC;
                            inquiryResponse.ref5 = cashinRequest.PayerPhone; ;
                            inquiryResponse.ref6 = cashinResponse.TxnRef + "-" + cashinRequest.PaidBy + "-" + cashinRequest.BranchID;
                            inquiryResponse.ref1Name = "Payer Name";
                            inquiryResponse.ref2Name = "Payee Name";
                            inquiryResponse.ref3Name = "Payee Mobile";
                            inquiryResponse.ref4Name = "Payee NRC";
                            inquiryResponse.ref5Name = "Payer Mobile";
                            inquiryResponse.ref6Name = string.Empty;
                            inquiryResponse.amount = amount;
                            inquiryResponse.serviceFee = serviceFee;
                            inquiryResponse.status = status;
                            inquiryResponse.expiry = System.DateTime.Now.AddYears(1).ToString("yyyyMMddhhmmssffff");
                            inquiryResponse.productDescription = productdesc;
                            inquiryResponse.imgUrl = imgURL;
                            string inquiryRes = Utils.getInquiryReswithRef6(inquiryResponse);
                            writeLog("RES XML : " + inquiryRes);
                            return inquiryRes;

                        }

                        #endregion
                    }
                }



                #endregion

                #region <-- 123Remit_CashOut -->

                if (MapTaxID.Trim() == "0000000000033")
                {
                    writeLog("123 Remit CashOut :" + agentCode);

                    DataSet dsAgent = null;
                    string agentBranchCode = string.Empty;
                    string agentDivision = string.Empty;
                    string agentTownship = string.Empty;


                    if (_agentWCF.checkAgentInfoforCashOut(agentID, email,out dsAgent, out errmsg))
                    {
                        if (dsAgent.Tables[0].Rows.Count > 0)
                        {
                            agentBranchCode = dsAgent.Tables[0].Rows[0]["AGENTBRANCHID"].ToString();
                            agentDivision = dsAgent.Tables[0].Rows[0]["Division"].ToString();
                            agentTownship = dsAgent.Tables[0].Rows[0]["Township"].ToString();
                        }
                    }

                    productdesc = "123Remit CashOut";
                    writeLog("Amount" + amount + "servicePercent" + servicePercent + "serviceFlatFee" + serviceFlatFee);

                    if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                    {

                        #region <-- Enquiry Response When simulator is turn on -->
                        writeLog("Simulator Y");
                        agentFee = "000000030000";
                        status = "PE";
                        productdesc = "123 Remit Cash Out";

                        serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));//double.Parse((double.Parse(agentFee)).ToString("#,##0.00"));
                        serviceFee = serviceFeeDbl.ToString("###0.00");
                        inquiryResponseModel responseCashIn = new inquiryResponseModel();

                        responseCashIn.ResCode = code;
                        responseCashIn.ResDesc = desp;
                        responseCashIn.taxID = taxID;
                        responseCashIn.billername = agentName;
                        responseCashIn.billerlogo = billerLogo;
                        responseCashIn.productDescription = productdesc;
                        string responseXML = Utils.getInquiryReswithRef6(responseCashIn);// APIResponse.GetInquiryResponse(responseCashIn);

                        return responseXML;

                        #endregion

                    }
                    else
                    {

                        #region <-- If Simulator is turn off -->
                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }
                        CashOutInquiryRequest cashoutRequest = new CashOutInquiryRequest();
                        cashoutRequest.Token = Token.Token;
                        cashoutRequest.Channel = ConfigurationManager.AppSettings["123RemitChannelCode"].ToString();
                        // cashoutRequest.DigitalCode = ref2;
                        cashoutRequest.DigitalCode = ref1;
                        cashoutRequest.TownshipID = agentTownship;
                        cashoutRequest.BranchCode = agentBranchCode;
                        cashoutRequest.DivisionID = agentDivision;
                        string API = ConfigurationManager.AppSettings["123RemitCashOutInquiryUrl"].ToString();

                        var json_serializer1 = new JavaScriptSerializer();

                        string jsonReq = json_serializer1.Serialize(cashoutRequest);

                        writeLog("123 Remit CashOut request:" + jsonReq);

                        string cashoutResponseJson = SSLPost.SendRequestJson(jsonReq, API);

                        writeLog("123 Remit CashOut response:" + cashoutResponseJson);


                        var json_serializerpinres = new JavaScriptSerializer();

                        GetInquiryCashOutResult InquiryCashOutResult = json_serializerpinres.Deserialize<GetInquiryCashOutResult>(cashoutResponseJson);

                        CashOutInquiryResponse cashoutResponse = InquiryCashOutResult.InquiryCashOutResult;

                        if (cashoutResponse.ResponseCode != "0")
                        {
                            ErrorResponse errResponse = new ErrorResponse();
                            errResponse.Version = "1.0";
                            errResponse.TimeStamp = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                            errResponse.ResCode = cashoutResponse.ResponseCode;
                            errResponse.ResDesc = VerificationRemittanceResponse.VerifyResponse(Convert.ToInt16(cashoutResponse.ResponseCode));
                            string apiResponse = Utils.getErrorRes(errResponse.ResCode, errResponse.ResDesc);// APIResponse.GetErrorResponse(errResponse);

                            return apiResponse;

                        }
                        else
                        {
                            cashoutResponse = DecryptionResponse.DecryptCashinOutInquiryResponse(cashoutResponse);

                            writeLog("Amount : " + cashoutResponse.Amount + " | Payer Fee : " + cashoutResponse.PayerFee + " | Payee Fee : " + cashoutResponse.PayeeFee + "......");
                            status = "PE";
                            serviceFee = OneTwoThreeRemit.GetServiceFee(Convert.ToDecimal(cashoutResponse.PayerFee), Convert.ToDecimal(cashoutResponse.PayeeFee), Convert.ToInt16(cashoutResponse.PaidBy), 2).ToString("###0.00");
                            inquiryResponseModel inquiryResponse = new inquiryResponseModel();
                            inquiryResponse.ResCode = "00";
                            inquiryResponse.ResDesc = "Success";
                            inquiryResponse.taxID = taxID;
                            inquiryResponse.billername = billerName;
                            inquiryResponse.billerlogo = billerLogo;
                            inquiryResponse.ref1 = cashoutResponse.PayerName;
                            inquiryResponse.ref2 = cashoutResponse.PayerPhone;
                            inquiryResponse.ref3 = cashoutResponse.PayeeName;
                            inquiryResponse.ref4 = cashoutResponse.PayeeNRC;
                            inquiryResponse.ref5 = cashoutResponse.PayeePhone;
                            inquiryResponse.ref6 = cashoutResponse.TxnRef + "-" + ref1 + "-" + cashoutResponse.PaidBy;
                            inquiryResponse.ref1Name = "Payer Name";
                            inquiryResponse.ref2Name = "Payer Mobile";
                            inquiryResponse.ref3Name = "Payee Name";
                            inquiryResponse.ref4Name = "Payee NRC";
                            inquiryResponse.ref5Name = "Mobile No";
                            inquiryResponse.ref6Name = string.Empty;
                            inquiryResponse.amount = cashoutResponse.Amount;
                            inquiryResponse.serviceFee = serviceFee;
                            inquiryResponse.status = status;
                            inquiryResponse.expiry = System.DateTime.Now.AddYears(1).ToString("yyyyMMddhhmmssffff");
                            inquiryResponse.productDescription = productdesc;
                            inquiryResponse.imgUrl = imgURL;
                            string inquiryRes = Utils.getInquiryReswithRef6(inquiryResponse);//APIResponse.GetInquiryResponse(inquiryResponse);

                            return inquiryRes;

                        }

                        #endregion
                    }
                }



                #endregion

                #region <-- Zala By Tz 13-Dec-2016 -->
                else if (MapTaxID == "0000000000050") ////Zala
                {
                    writeLog("This is Zala.");

                    DataSet ds = null;
                    //writeLog("*********Ref1************************ :" + ref1);
                    _agentWCF.getAgentNameByAgentCode(ref1,out ds, out errmsg); //Ref1 is agentCode
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        if (ds.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString() != "Y")
                        {

                            inquiryResponseModel inqRes = new inquiryResponseModel();
                            inqRes.ResCode = "00";
                            inqRes.ResDesc = "Success";
                            inqRes.taxID = taxID;
                            inqRes.merchantname = merchantname;
                            inqRes.merchantlogo = merchantlogo;
                            inqRes.billername = billerName;
                            inqRes.billerlogo = billerLogo;
                            inqRes.ref1 = ref1;
                            inqRes.ref2 = ds.Tables[0].Rows[0]["AGENTNAME"].ToString();
                            inqRes.ref3 = ref3;
                            inqRes.ref4 = ref4;
                            inqRes.ref5 = ref5;
                            inqRes.ref1Name = ref1Name;
                            inqRes.ref2Name = ref2Name;
                            inqRes.ref3Name = ref3Name;
                            inqRes.ref4Name = ref4Name;
                            inqRes.ref5Name = ref5Name;
                            inqRes.amount = amount;
                            inqRes.serviceFee = serviceFee;
                            inqRes.status = status;
                            inqRes.expiry = expiry;
                            inqRes.productDescription = productdesc;
                            inqRes.imgUrl = imgURL;

                            return Utils.getInquiryRes(inqRes);
                        }
                        else
                        {
                            rescode = "01";
                            resdecs = "Agent NOT Applicable";
                            return Utils.getErrorRes(rescode, resdecs);
                        }
                    }
                    else
                    {

                        rescode = "01";
                        resdecs = "Agent NOT Found";

                        return Utils.getErrorRes(rescode, resdecs);
                    }
                    //}
                }
                #endregion

                #region <-- Viber out By Tz 24-Feb-2017 -->

                else if (MapTaxID == "0000000000051")
                {
                    string billercode = string.Empty;

                    #region <-- This is easybills -->
                    #region <-- Initialize Variable -->
                    writeLog("$$$$$$$$$ This Is ESBA Inquiry$$$$$$$$$$$$$");

                    billercode = getBillerCode(MapTaxID);
                    GiftCardAirTimeEnquiryRequest pinreq = new GiftCardAirTimeEnquiryRequest();
                    inquiryResponseModel inqresmdl = new inquiryResponseModel();
                    EnquiryGiftCardAirTimeResults pinres = new EnquiryGiftCardAirTimeResults();
                    string aesKey = string.Empty;
                    aesKey = ConfigurationManager.AppSettings["EsbaAesKey"].ToString();
                    if (IsTokenNullOrExpire(Token))
                    {
                        Token = GetOAuthToken();
                    }

                    //  string cardtype =
                    pinreq.Token = Token.Token;
                    pinreq.BillerCode = billercode;
                    pinreq.CreditAmount = ref2;
                    pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();



                    var json_serializer1 = new JavaScriptSerializer();

                    string jsonReq = json_serializer1.Serialize(pinreq);
                    writeLog("ESBA JasonReq:" + jsonReq);
                    #endregion
                    //Request PIN To ESBA
                    string jsonres = Utils.pinRequest(jsonReq, esbaGiftCardAirtimeInqMethod);
                    writeLog("ESBA JasonRes:" + jsonres);
                    var json_serializerpinres = new JavaScriptSerializer();
                    pinres = json_serializerpinres.Deserialize<EnquiryGiftCardAirTimeResults>(jsonres);
                    bool inqresult = false;
                    string resResult = pinres.EnquiryGiftCardAirTimeResult.ResponseCode;
                    if (resResult == "0")
                    {

                        if (pinres.EnquiryGiftCardAirTimeResult.PayAmount > 0)
                        {
                            amount = pinres.EnquiryGiftCardAirTimeResult.PayAmount.ToString();
                            inqresult = true;
                        }

                    }

                    if (inqresult)
                    {
                        writeLog("GiftCard  Response : Amount = " + amount);
                        serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                        serviceFee = serviceFeeDbl.ToString("###0.00");

                        rescode = "00";
                        resdecs = "Success";
                        inqresmdl.ResCode = rescode;
                        inqresmdl.ResDesc = resdecs;
                        inqresmdl.taxID = taxID;
                        inqresmdl.merchantname = merchantname;
                        inqresmdl.merchantlogo = merchantlogo;
                        inqresmdl.billername = billerName;
                        inqresmdl.billerlogo = billerLogo;
                        inqresmdl.ref1 = ref1;
                        inqresmdl.ref2 = ref2;
                        inqresmdl.ref3 = ref3;
                        inqresmdl.ref4 = ref4;
                        inqresmdl.ref5 = ref5;
                        inqresmdl.ref1Name = ref1Name;
                        inqresmdl.ref2Name = ref2Name;
                        inqresmdl.ref3Name = ref3Name;
                        inqresmdl.ref4Name = ref4Name;
                        inqresmdl.ref5Name = ref5Name;
                        inqresmdl.amount = amount;
                        inqresmdl.serviceFee = serviceFee;
                        inqresmdl.status = status;
                        inqresmdl.expiry = expiry;
                        inqresmdl.productDescription = productdesc;
                        inqresmdl.imgUrl = imgURL;
                        return Utils.getInquiryRes(inqresmdl);



                    }
                    else
                    {
                        writeLog("Error in ViberOut Inquiry Response.:" + pinres.EnquiryGiftCardAirTimeResult.ResponseCode + ":" + pinres.EnquiryGiftCardAirTimeResult.ResponseDescription);
                        if (!String.IsNullOrEmpty(errmsg))
                        {
                            string customMessage = errmsg.ToString();
                        }

                        return Utils.getErrorRes("06", pinres.EnquiryGiftCardAirTimeResult.ResponseDescription);
                    }
                    #endregion

                }

                #endregion

                #region <-- 663 CashIn/Load By Tz 22-Sep-2017 -->

                // taxID == "0000000000009" CashOut || taxID == "0000000000008"Load Balance/CashIn || taxID == "0000000000007" ||
                //                <InquiryReq>
                //<Version>1.0</Version>
                //<TimeStamp>yyyyMMddhhmmssffff</TimeStamp>
                //<MessageID>768866yyhhhhhh</MessageID>
                //<Email>user@agent.com</Email>
                //<Password>xxxxxxxxxx</Password>
                //<RequestedBy>user@agent.com</RequestedBy>
                //<Taxid>1230000000000</Taxid>//Tax ID is bound by Biller ID
                //<IsQR></IsQR> //For QR Scan Request
                //<Ref1>Receiver Mobile No</Ref1> // Mandatory
                //<Ref2></Ref2> // Mandatory or Optional dependent on Biller
                //<Ref3></Ref3> // Mandatory or Optional dependent on Biller
                //<Ref4></Ref4> // Mandatory or Optional dependent on Biller
                //<Ref5></Ref5> // Mandatory or Optional dependent on Biller
                //<Amount>Amount</Amount>
                //</InquiryReq>

                if (MapTaxID == "0000000000008")
                {
                    writeLog("$$$$$$$$$$$$$$$$$$$$$$$$$$$$ This Is 663 CashIn/Load $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
                    productdesc = "663 Load";
                    if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                    {
                        writeLog("Simulator Y");


                        serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));//double.Parse((double.Parse(agentFee)).ToString("#,##0.00"));
                        serviceFee = serviceFeeDbl.ToString("###0.00");
                        inquiryResponseModel inqRes663CashIn = new inquiryResponseModel();
                        inqRes663CashIn.ref1Name = ref1Name;
                        inqRes663CashIn.ref1 = ref1;
                        inqRes663CashIn.ResCode = code;
                        inqRes663CashIn.ResDesc = desp;
                        inqRes663CashIn.taxID = taxID;
                        inqRes663CashIn.billername = billerName;
                        inqRes663CashIn.billerlogo = billerLogo;
                        inqRes663CashIn.productDescription = productdesc;
                        inqRes663CashIn.amount = amount;
                        inqRes663CashIn.serviceFee = serviceFee;
                        string responseXML = Utils.getInquiryRes(inqRes663CashIn);

                        return responseXML;
                    }
                    else
                    {
                        Request663 request663 = new Request663();
                        Response663 response663 = new Response663();
                        request663.transactionType = ConfigurationManager.AppSettings["663UserInfoPrefix"].ToString();
                        request663.receiverMobileNo = ref1;
                        response663 = confirmRequestTo663(request663);
                        if (response663.Result)
                        {
                            serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));//double.Parse((double.Parse(agentFee)).ToString("#,##0.00"));
                            serviceFee = serviceFeeDbl.ToString("###0.00");
                            inquiryResponseModel inqRes663CashIn = new inquiryResponseModel();
                            inqRes663CashIn.ref1Name = ref1Name;
                            inqRes663CashIn.ref1 = ref1;
                            inqRes663CashIn.ResCode = code;
                            inqRes663CashIn.ResDesc = desp;
                            inqRes663CashIn.taxID = taxID;
                            inqRes663CashIn.billername = billerName;
                            inqRes663CashIn.billerlogo = billerLogo;
                            inqRes663CashIn.amount = amount;
                            inqRes663CashIn.serviceFee = serviceFee;
                            inqRes663CashIn.productDescription = productdesc;
                            string responseXML = Utils.getInquiryRes(inqRes663CashIn);

                            return responseXML;
                        }
                        else
                        {
                            writeLog("CashIn user is not registered or Inactive at 663");
                            return Utils.getErrorRes("06", "Invalid/Inactive 663 User.");
                        }
                    }
                }


                #endregion

                #region <-- 663 Remmit/Send -->

                if (MapTaxID == "0000000000007")
                {
                    writeLog("$$$$$$$$$$$$$$$$$$$$$$ This Is 663 Remitt $$$$$$$$$$$$$$$$$$$$$$$");
                    DataSet ds = new DataSet();
                    string minAmount = string.Empty;
                    string maxAmount = string.Empty;
                    string txnFee = string.Empty;
                    string serviceCharge = string.Empty;
                    if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                    {
                        writeLog("Simulator Y");
                        if (_agentWCF.get663FeesByAmount(int.Parse(billerid), decimal.Parse(amount),out ds, out errmsg))
                        {
                            minAmount = ds.Tables[0].Rows[0]["MINAMOUNT"].ToString();
                            maxAmount = ds.Tables[0].Rows[0]["MAXAMOUNT"].ToString();
                            txnFee = ds.Tables[0].Rows[0]["TRANSACTIONFEES"].ToString();
                            serviceCharge = ds.Tables[0].Rows[0]["SERVICECHARGE"].ToString();

                            writeLog("amount range:" + minAmount + "to" + maxAmount + "|TransactionFees:" + txnFee + "|ServiceCharge:" + serviceCharge);
                            serviceFeeDbl = (double.Parse(txnFee) + double.Parse(serviceCharge));
                            serviceFee = serviceFeeDbl.ToString("###0.00");

                            inquiryResponseModel inqRes663Remit = new inquiryResponseModel();
                            inqRes663Remit.ref1Name = ref1Name;
                            inqRes663Remit.ref2Name = ref2Name;
                            inqRes663Remit.ref3Name = ref5Name;
                            inqRes663Remit.ref4Name = ref4Name;
                            inqRes663Remit.ref5Name = ref3Name;
                            inqRes663Remit.ref1 = ref1;
                            inqRes663Remit.ref2 = ref2;
                            inqRes663Remit.ref3 = ref3;
                            inqRes663Remit.ref5 = ref5;
                            inqRes663Remit.ResCode = code;
                            inqRes663Remit.ResDesc = desp;
                            inqRes663Remit.taxID = taxID;
                            inqRes663Remit.billername = billerName;
                            inqRes663Remit.billerlogo = billerLogo;
                            inqRes663Remit.productDescription = productdesc;
                            inqRes663Remit.amount = amount;
                            inqRes663Remit.serviceFee = serviceFee;
                            string responseXML = Utils.getInquiryRes(inqRes663Remit);

                            return responseXML;
                            //    RemitReq
                            //<ref1>toMobileNo</ref1>
                            //<ref2>toData(toName:toNrc)</ref2>
                            //<ref3>fromMobileNo</ref3>
                            //<ref4></ref4>
                            //<ref5>fromData(fromName:fromNrc)</ref5>

                            //RemitRes
                            //<ref1>09xxxxxxxxx</ref1>
                            //<ref2>Lu Lu:10/ABC(N)000000</ref2>
                            //<ref3>09xxxxxxxxx</ref3>
                            //<ref4></ref4>
                            //<ref5>Thet Zaw:11/CBA(N)111111</ref5>
                            //<ref1Name>To Mobile No.</ref1Name>
                            //<ref2Name>Name/NRC (To)</ref2name>
                            //<ref3Name>From Mobile No.</ref3Name>
                            //<ref4Name></ref4Name>
                            //<ref5Name>Name/NRC (From)</ref5Name>
                        }
                        else
                        {
                            return Utils.getErrorRes("06", "Invalid Amount");
                        }
                    }
                    else
                    {
                        if (_agentWCF.get663FeesByAmount(int.Parse(billerid), decimal.Parse(amount),out ds, out errmsg))
                        {
                            minAmount = ds.Tables[0].Rows[0]["MINAMOUNT"].ToString();
                            maxAmount = ds.Tables[0].Rows[0]["MAXAMOUNT"].ToString();
                            txnFee = ds.Tables[0].Rows[0]["TRANSACTIONFEES"].ToString();
                            serviceCharge = ds.Tables[0].Rows[0]["SERVICECHARGE"].ToString();

                            writeLog("amount range:" + minAmount + "to" + maxAmount + "|TransactionFees:" + txnFee + "|ServiceCharge:" + serviceCharge);
                            serviceFeeDbl = (double.Parse(txnFee) + double.Parse(serviceCharge));
                            serviceFee = serviceFeeDbl.ToString("###0.00");

                            inquiryResponseModel inqRes663Remit = new inquiryResponseModel();
                            inqRes663Remit.ref1Name = ref1Name;
                            inqRes663Remit.ref2Name = ref2Name;
                            inqRes663Remit.ref3Name = ref5Name;
                            inqRes663Remit.ref4Name = ref4Name;
                            inqRes663Remit.ref5Name = ref3Name;
                            inqRes663Remit.ref1 = ref1;
                            inqRes663Remit.ref2 = ref2;
                            inqRes663Remit.ref3 = ref3;
                            inqRes663Remit.ref5 = ref5;
                            inqRes663Remit.ResCode = code;
                            inqRes663Remit.ResDesc = desp;
                            inqRes663Remit.taxID = taxID;
                            inqRes663Remit.billername = billerName;
                            inqRes663Remit.billerlogo = billerLogo;
                            inqRes663Remit.productDescription = productdesc;
                            inqRes663Remit.amount = amount;
                            inqRes663Remit.serviceFee = serviceFee;
                            string responseXML = Utils.getInquiryRes(inqRes663Remit);

                            return responseXML;
                        }
                        else
                        {
                            return Utils.getErrorRes("06", "Invalid Amount");
                        }
                    }
                }



                #endregion

                #region <-- 663 CashOut -->
                //<InquiryReq>
                //<Version>1.0</Version>
                //<TimeStamp>201710061246274860</TimeStamp>
                //<MessageID>6e93675e-d1d9-4b67-b2c6-37469e84a0b1</MessageID>
                //<Email>lulunb1u1</Email>
                //<Password>NiS2foLhEzocRWp/g7e2Zhna0P9sdWx1bmIxdTE=</Password>
                //<RequestedBy>lulunb1u1</RequestedBy>
                //<TaxID>0000000000009</TaxID>
                //<Ref1>XKJI</Ref1>
                //<Ref2>thetzawwin</Ref2>
                //<Ref3>09254051624</Ref3>
                //<Ref4>10mlm</Ref4>
                //<Ref5></Ref5>
                //<Amount>10000</Amount>
                //<TopupType>S</TopupType>
                //<IsQR></IsQR>
                //</InquiryReq> 
                if (MapTaxID == "0000000000009")
                {
                    if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                    {
                        writeLog("Simulator Y");

                        inquiryResponseModel inqRes663CashOut = new inquiryResponseModel();
                        inqRes663CashOut.ref1Name = ref1Name;
                        inqRes663CashOut.ref1 = ref1;
                        inqRes663CashOut.ref2Name = ref2Name;
                        inqRes663CashOut.ref2 = ref2;
                        inqRes663CashOut.ref3Name = "";
                        inqRes663CashOut.ref3 = "";
                        inqRes663CashOut.ref4Name = ref4Name;
                        inqRes663CashOut.ref4 = ref4;
                        inqRes663CashOut.ref5 = ref5;
                        inqRes663CashOut.ref5Name = ref3Name;
                        inqRes663CashOut.ResCode = code;
                        inqRes663CashOut.ResDesc = desp;
                        inqRes663CashOut.taxID = taxID;
                        inqRes663CashOut.billername = billerName;
                        inqRes663CashOut.billerlogo = billerLogo;
                        inqRes663CashOut.productDescription = productdesc;
                        inqRes663CashOut.amount = amount;
                        inqRes663CashOut.serviceFee = serviceFee;
                        string responseXML = Utils.getInquiryRes(inqRes663CashOut);

                        return responseXML;
                    }
                    else
                    {
                        inquiryResponseModel inqRes663CashOut = new inquiryResponseModel();
                        inqRes663CashOut.ref1Name = ref1Name;
                        inqRes663CashOut.ref1 = ref1;
                        inqRes663CashOut.ref2Name = ref2Name;
                        inqRes663CashOut.ref2 = ref2;
                        inqRes663CashOut.ref3Name = string.Empty;
                        inqRes663CashOut.ref3 = string.Empty;
                        inqRes663CashOut.ref4Name = ref4Name;
                        inqRes663CashOut.ref4 = ref4;
                        inqRes663CashOut.ref5 = ref5;
                        inqRes663CashOut.ref5Name = ref3Name;
                        inqRes663CashOut.ResCode = code;
                        inqRes663CashOut.ResDesc = desp;
                        inqRes663CashOut.taxID = taxID;
                        inqRes663CashOut.billername = billerName;
                        inqRes663CashOut.billerlogo = billerLogo;
                        inqRes663CashOut.productDescription = productdesc;
                        inqRes663CashOut.amount = amount;
                        inqRes663CashOut.serviceFee = serviceFee;
                        string responseXML = Utils.getInquiryRes(inqRes663CashOut);

                        return responseXML;
                    }
                }
                #endregion

                #region <-- Canal-Plus -->
                if (MapTaxID == "0000000000052")
                {
                    if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                    {
                        #region <-- Simulator Mode -->

                        string inqResString = string.Empty;
                        rescode = "00";
                        resdecs = "Success";

                        inquiryResponseModelCanalPlus inqres = new inquiryResponseModelCanalPlus();
                        inqres.ResCode = rescode;
                        inqres.ResDesc = resdecs;
                        inqres.taxID = taxID;
                        inqres.ref1 = ref1;
                        inqres.ref2 = "Ref2"; //viewername;
                        inqres.ref3 = "T2-HD (12 months)"; //productName;
                        inqres.ref4 = string.Empty;
                        inqres.ref5 = ref3 + ":" + "T2-HD (12 months)"; //productName;
                        inqres.ref1Name = ref1Name;
                        inqres.ref2Name = ref2Name;
                        inqres.ref3Name = "Product/Duration";
                        inqres.ref4Name = "Ref4Name";
                        inqres.ref5Name = "Ref5Name";
                        inqres.amount = amount;
                        inqres.serviceFee = serviceFee;
                        inqres.status = "Success";
                        inqres.expiry = "13-05-2018";
                        inqres.productDescription = "Product Desp";// inqRes.ContractDescription;
                        inqres.imgUrl = imgURL;
                        inqres.billerName = "CanalPlus";
                        inqres.billerLogo = billerLogo;

                        inqResString = Utils.getInquiryResCanalPlus(inqres);
                        return inqResString;

                        #endregion
                    }
                    else
                    {
                        #region <-- Simulator Mode Off -->

                        string token = string.Empty;
                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }

                        if (string.IsNullOrEmpty(canalPlusReqType))
                        {

                            EBACanalPlusReq ECanalPlusreq = new EBACanalPlusReq();
                            ECanalPlusreq.Channel = ConfigurationManager.AppSettings["CanalPlusChannelCode"].ToString();
                            ECanalPlusreq.Token = Token.Token;
                            ECanalPlusreq.CardNumber = ref1;

                            return CanalPlusMonthlyPayment(ECanalPlusreq, taxID, ref1, ref1Name, ref2Name, ref3Name, imgURL, billerName, billerLogo);

                        }
                        else
                        {
                            EBACanalPlusChangePackageVerifyReq ebaCanalPlusChangePackageVerifyReq = new EBACanalPlusChangePackageVerifyReq();
                            ebaCanalPlusChangePackageVerifyReq.Token = Token.Token;
                            ebaCanalPlusChangePackageVerifyReq.Channel = ConfigurationManager.AppSettings["CanalPlusChannelCode"].ToString();
                            ebaCanalPlusChangePackageVerifyReq.CardNumber = ref1;
                            ebaCanalPlusChangePackageVerifyReq.NumSubscriber = ref2;
                            ebaCanalPlusChangePackageVerifyReq.Package = ref3.Split(',')[0].ToString();
                            ebaCanalPlusChangePackageVerifyReq.Duration = ref3.Split(',')[1].ToString();
                            ebaCanalPlusChangePackageVerifyReq.NumContract = ref4;
                            ebaCanalPlusChangePackageVerifyReq.IDBase = ref5;
                            ebaCanalPlusChangePackageVerifyReq.ChannelRefID = "PayHere123";
                            ebaCanalPlusChangePackageVerifyReq.SessionID = sessionID;

                            return CanalPlusVerifyChangedPackage(ebaCanalPlusChangePackageVerifyReq, ref1Name, ref2Name, ref3Name, ref4Name, ref5Name, billerName, billerLogo, imgURL, taxID);
                        }

                        #endregion
                    }
                }
                #endregion

                #region <-- Solar Home -->
                if (MapTaxID == "0000000000053")
                {
                    string apiUrl = ConfigurationManager.AppSettings["SolarHomeAPI"].ToString() + "device";
                    string apiKey = ConfigurationManager.AppSettings["SolarHomeAPIKey"].ToString();

                    if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                    {
                        
                    }
                    else
                    {
                        
                    }
                    writeLog("$$$$$$$$$$$$ SolarHome inqReq: $$$$$$$$$$$$");

                    string jsonParam = "{\"api_key\": \"" + apiKey + "\",\"account_number\":" + "\"" + ref1 + "\"}";

                    writeLog("SolarHome inqReq: " + jsonParam);
                    var json_serializerpinres = new JavaScriptSerializer();
                    SSLPost post = new SSLPost();
                    string respData = "";
                    SolarHomeInquiryRes solarHomeInqRes = new SolarHomeInquiryRes();
                    List<SolarHomeInquiryRes> lstSolarHomeInqRes = new List<SolarHomeInquiryRes>();
                    if (post.postDateSolarHome(apiUrl, jsonParam, out respData))
                    {
                        writeLog("SolarHome inqRes: " + respData);

                        //respData = "{\"test_account\":true,\"date_input\":\"2017-01-12T03:43:01\",\"name\":\"OmniVoltaic Sample\",\"account_number\":\"2800514\",\"device_type\":\"Smart box\",\"description\":\"test Smart\",\"active\":true}";
                        lstSolarHomeInqRes = json_serializerpinres.Deserialize<List<SolarHomeInquiryRes>>(respData);
                        if (lstSolarHomeInqRes.Count < 1)
                        {
                            writeLog("Error : Invalid Account Number");
                            return Utils.getErrorRes("404", "Invalid Account Number");
                        }
                        solarHomeInqRes = lstSolarHomeInqRes[0];
                        solarHomeInqRes.ResponseCode = "0";
                        solarHomeInqRes.ResponseDescription = "Success";
                        if (solarHomeInqRes.ResponseCode == "0")
                        {
                            bool isActive = Convert.ToBoolean(solarHomeInqRes.Active.ToString().ToLower());
                            bool isTestAcc = Convert.ToBoolean(solarHomeInqRes.Test_Account.ToString().ToLower());
                            if (isActive) //&& !isTestAcc
                            {
                                string inqResString = string.Empty;
                                rescode = "00";
                                resdecs = "Success";
                                inquiryResponseModelSolarHome inqres = new inquiryResponseModelSolarHome();
                                inqres.ResCode = rescode;
                                inqres.ResDesc = resdecs;
                                inqres.taxID = taxID;
                                inqres.amount = amount;
                                inqres.serviceFee = serviceFee;
                                inqres.ref1 = ref1;
                                inqres.ref2 = ref2;
                                inqres.ref3 = solarHomeInqRes.Device_Type;
                                inqres.ref4 = ref4;
                                inqres.ref5 = ref5;
                                inqres.ref1Name = ref1Name;
                                inqres.ref2Name = ref2Name;
                                inqres.ref3Name = ref3Name;
                                inqres.ref4Name = ref4Name;
                                inqres.ref5Name = ref5Name;
                                inqres.Active = solarHomeInqRes.Active;
                                inqres.Description = solarHomeInqRes.Description;
                                inqres.Name = solarHomeInqRes.Name;
                                inqres.TestAccount = solarHomeInqRes.Test_Account;
                                inqres.billerName = "SolarHome";
                                inqres.billerLogo = billerLogo;
                                inqres.imgUrl = imgURL;
                                inqResString = Utils.getInquiryResSolarHome(inqres);
                                writeLog("Solar Home Inquiry Response String : " + inqResString);
                                return inqResString;
                            }
                            else
                            {
                                writeLog("Subscriber Number Not Found:" + errMsg);
                                return Utils.getErrorRes("06", "Subscriber Number Not Found!");
                            }
                        }
                        else
                        {
                            writeLog("Response Fail:" + errMsg);
                            return Utils.getErrorRes("06", solarHomeInqRes.ResponseDescription);
                        }
                    }
                    else
                    {
                        writeLog("Error Posting To SolarHome:" + errMsg);
                        return Utils.getErrorRes("06", solarHomeInqRes.ResponseDescription);
                    }
                }
                #endregion

                #region <-- Phatama Group -->
                if (MapTaxID == "0000000000056")
                {                    
                    string apiUrl = ConfigurationManager.AppSettings["PhatamaGroupAPI"].ToString() + "GetPendingInvoiceByCustomerId";
                    string apiKey = ConfigurationManager.AppSettings["PhatamaGroupAPIKey"].ToString();

                    if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                    {

                    }
                    else
                    {

                    }
                    writeLog("$$$$$$$$$$$$ Phatama Group inqReq: $$$$$$$$$$$$");

                    PgToken = GetPGOAuthToken();

                    var json_serializer1 = new JavaScriptSerializer();
                    var json_serializerpinres = new JavaScriptSerializer();

                    SSLPost post = new SSLPost();

                    PGPendingInvoiceRequest pgPendingInvoiceReq = new PGPendingInvoiceRequest();
                    pgPendingInvoiceReq.Token = PgToken.Token;
                    pgPendingInvoiceReq.PartnerCode = System.Configuration.ConfigurationManager.AppSettings["1StopPGPartnerCode"]; //ref1;
                    pgPendingInvoiceReq.CustomerID = ref2;

                    string parameter = json_serializer1.Serialize(pgPendingInvoiceReq);
                    writeLog("Phatama Group inqReq: " + parameter);

                    PGPendingInvoiceResponse pgPendingInvoiceResp = new PGPendingInvoiceResponse();
                    string responseData = string.Empty;

                    if (post.postDataPG(apiUrl, parameter, pgPendingInvoiceReq.Token, out responseData, out errMsg))
                    {
                        writeLog("Phatama Group inqRes:" + responseData);

                        pgPendingInvoiceResp = json_serializerpinres.Deserialize<PGPendingInvoiceResponse>(responseData);

                        if (pgPendingInvoiceResp.ErrorCode.Equals("0"))
                        {
                            if (!string.IsNullOrEmpty(pgPendingInvoiceResp.CustomerID))
                            {
                                if (pgPendingInvoiceResp.FailReason != "There is no pending invoices")
                                {
                                    DataSet ds = new DataSet();
                                    if (_agentWCF.getCustomerAndInvoiceInfo(0, pgPendingInvoiceResp.CustomerID, out ds, out errMsg))
                                    {
                                        if (ds.Tables[0].Rows.Count > 0)
                                        {
                                            foreach (DataRow dr in ds.Tables[0].Rows)
                                            {
                                                if (dr["PAYMENTMETHOD"].ToString() != "MPU")
                                                {
                                                    string invoiceNo = dr["INVOICENUMBER"].ToString();
                                                    pgPendingInvoiceResp.Invoices.RemoveAll(x => x.InvoiceNumber == invoiceNo);
                                                }
                                            }
                                        }
                                    }    
                                }
                                else
                                {
                                    pgPendingInvoiceResp.Invoices = new List<PGInvoice>();
                                }

                                pgPendingInvoiceResp.Invoices.RemoveAll(x => x.Amount == "0.00");
                                
                                pgPendingInvoiceResp.ref1Name = "Partner Code";
                                pgPendingInvoiceResp.ref2Name = "Customer ID";
                                pgPendingInvoiceResp.Amount = amount;
                                pgPendingInvoiceResp.ServiceFee = serviceFee;
                                pgPendingInvoiceResp.AgentCode = agentCode;
                                return Utils.getPendingInvoiceByCustomerIDResPG(pgPendingInvoiceResp);
                            }
                        }
                        if (pgPendingInvoiceResp.ErrorCode.Equals("1"))
                        {
                            pgPendingInvoiceResp.Invoices = new List<PGInvoice>();
                            pgPendingInvoiceResp.ref1Name = "Partner Code";
                            pgPendingInvoiceResp.ref2Name = "Customer ID";
                            return Utils.getErrorRes("01", pgPendingInvoiceResp.FailReason);
                        }
                        else
                        {
                            writeLog("Response Fail: " + errMsg);
                            return Utils.getErrorRes("06", pgPendingInvoiceResp.FailReason);
                        }
                    }
                    else
                    {
                        writeLog("Response Fail: " + errMsg);
                        return Utils.getErrorRes("06", errMsg);
                    }
                }
                #endregion

                return sb.ToString();
            }
        }
        catch (Exception ex)
        {
            writeLog("Error :" + ex.ToString());
            return Utils.getErrorRes("97", "BIS API Error");
        };
    }

    public string getCanalPlusPackages(string reqXml)
    {
        try
        {
            writeLog("$$$$$$$$$$$$$$$$$$ getCanalPlusPackages $$$$$$$$$$$$$$$$$$");
            
            string code = string.Empty, desp = string.Empty;
            string version = string.Empty;
            string ts = string.Empty;
            string messageid = string.Empty;
            string ref1 = "";
            string ref1Name = "";

            Hashtable ht = Utils.getHTableFromXML(reqXml);

            if (IsTokenNullOrExpire(Token))
            {
                Token = GetOAuthToken();
            }

            if (IsValidateGetCanalPlusPackagesReq(ht, out code, out desp, out version, out ts, out messageid, out ref1, out ref1Name))
            {
                EBACanalPlusGetPackagesReq ebaCanalPlusGetPackagesReq = new EBACanalPlusGetPackagesReq();
                ebaCanalPlusGetPackagesReq.Channel = ConfigurationManager.AppSettings["CanalPlusChannelCode"].ToString();
                ebaCanalPlusGetPackagesReq.Token = Token.Token;
                ebaCanalPlusGetPackagesReq.CardNumber = ref1;
                ebaCanalPlusGetPackagesReq.AccountRef = "";
                ebaCanalPlusGetPackagesReq.eTopupDistributorID = "";
                ebaCanalPlusGetPackagesReq.ProductID = "";

                return CanalPlusGetPackages(ebaCanalPlusGetPackagesReq, ref1, ref1Name, "", "", "");
            }
            else
            {
                return Utils.getErrorRes(code, desp);
            }
        }
        catch (Exception ex)
        {
            writeLog("getCanalPlusPackages Error : " + ex.ToString());
        }
        return string.Empty;
    }

    public bool IsValidateGetCanalPlusPackagesReq(Hashtable ht, out string code, out string desc, out string version, out string ts, out string messageid, out string ref1, out string ref1Name)
    {
        code = "00";
        desc = "Success";

        version = "";
        ts = "";
        messageid = "";
        ref1 = "";
        ref1Name = "";

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageid = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("Ref1"))
        {
            ref1 = ht["Ref1"].ToString();
        }
        else
        {
            code = "06";
            desc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Ref1> Tag");
            return false;
        }

        return true;
    }

    public static string getdescriptionbyrescode(string code)
    {
        string desc = string.Empty;
        switch (code)
        {
            case "00":
                desc = "Success";
                break;
            case "01":
                desc = "Paid Already";
                break;
            case "02":
                desc = "Expired (Due)";
                break;
            case "03":
                desc = "Amount Mismatch";
                break;
            case "04":
                desc = "Authentication Fail";
                break;
            case "05":
                desc = "Invalid Request";
                break;
            case "06":
                desc = "Invalid Customer ID";
                break;
            case "07":
                desc = "Invalid Slip No";
                break;
            case "08":
                desc = "DB Error";
                break;
            case "98":
                desc = "General Error";
                break;
            case "99":
                desc = "System Error";
                break;
        }


        return desc;
    }

    public static string TopupEncrypt(string plainText, string Key, string IV)
    {
        // Check arguments. 

        var encoding = new UTF8Encoding();
        var key = encoding.GetBytes(Key);
        var iv = encoding.GetBytes(IV);

        byte[] encrypted;
        // Create an Rijndael object 
        // with the specified key and IV. 
        using (Rijndael rj = Rijndael.Create())
        {
            rj.Padding = PaddingMode.PKCS7;
            rj.Mode = CipherMode.CBC;
            rj.KeySize = 256;
            rj.BlockSize = 256;
            rj.Key = key;
            rj.IV = iv;

            // Create a decrytor to perform the stream transform.
            ICryptoTransform encryptor = rj.CreateEncryptor(rj.Key, rj.IV);

            // Create the streams used for encryption. 
            using (MemoryStream msEncrypt = new MemoryStream())
            {
                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                {
                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                    {

                        //Write all data to the stream.
                        swEncrypt.Write(plainText);
                    }
                    encrypted = msEncrypt.ToArray();
                }
            }
        }


        // Return the encrypted bytes from the memory stream. 
        //return System.Text.Encoding.UTF8.GetString(encrypted); 
        return Convert.ToBase64String(encrypted);
    }

    public static string TopupDecrypt(string plainText, string Key, string IV)
    {

        var encoding = new UTF8Encoding();
        var key = encoding.GetBytes(Key);
        var iv = encoding.GetBytes(IV);
        string strPlainText = "";
        byte[] encrypted;
        byte[] cipherText = Convert.FromBase64String(plainText);
        // Create an Rijndael object 
        // with the specified key and IV. 
        using (Rijndael rj = Rijndael.Create())
        {
            rj.Padding = PaddingMode.PKCS7;
            rj.Mode = CipherMode.CBC;
            rj.KeySize = 256;
            rj.BlockSize = 256;
            rj.Key = key;
            rj.IV = iv;

            // Create a decrytor to perform the stream transform.
            ICryptoTransform decryptor = rj.CreateDecryptor(rj.Key, rj.IV);

            // Create the streams used for encryption.
            MemoryStream msDecrypt;
            CryptoStream csDecrypt;
            StreamReader srDecrypt;
            msDecrypt = new MemoryStream(cipherText);
            csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read);
            srDecrypt = new StreamReader(csDecrypt);

            strPlainText = srDecrypt.ReadToEnd();

        }


        // Return the encrypted bytes from the memory stream. 
        //return System.Text.Encoding.UTF8.GetString(encrypted); 
        return strPlainText;
    }

    public bool IsValidateInsertLogReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string password, out string logmessage, out string logtypeid, out string agentuserid, out string messageid, out string requestedby)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        logmessage = string.Empty;
        password = string.Empty;
        logtypeid = string.Empty;
        agentuserid = string.Empty;
        requestedby = string.Empty;
        messageid = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageid = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("RequestedBy"))
        {
            requestedby = ht["RequestedBy"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <RequestedBy> Tag");
            return false;
        }

        if (ht.ContainsKey("Email"))
        {
            agentuserid = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }



        if (ht.ContainsKey("LogTypeID"))
        {
            logtypeid = ht["LogTypeID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing LogTypeID Tag");
            return false;
        }

        if (ht.ContainsKey("LogMessage"))
        {
            logmessage = ht["LogMessage"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing LogMessage Tag");
            return false;
        }

        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(agentuserid) || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(logtypeid) || String.IsNullOrEmpty(logmessage) || String.IsNullOrEmpty(requestedby) || String.IsNullOrEmpty(messageid))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }


        //Check Authecation
        string errmsg = string.Empty;
        DataSet ds = null;
        DataSet dsBiller = null;
        bool flg = false;
        flg = _agentWCF.getAuthentication(agentuserid, password, out ds,out errmsg);
        if (flg)
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                int.TryParse(ds.Tables[0].Rows[0]["AGENTID"].ToString(), out agentID);
                this.agentCode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
                this.servicePercent = Convert.ToString(ds.Tables[0].Rows[0]["AGENTFEEPERCENT"]);
            }
            else
            {
                code = "05";
                desp = "Authentication Failed";
                writeLog("Error in Authentication : " + errmsg);
                return false;
            }

        }
        else
        {
            code = "--";
            desp = "UnknownError";
            writeLog("Error in Authentication : " + errmsg);
            return false;

        }

        return true;
    }

    public bool IsValidateInquiryReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string ref1, out string ref2, out string ref3, out string ref4, out string ref5, out string inquirytype, out string amount, out string taxID, out string ref1Name, out string ref2Name, out string ref3Name, out string requestedby, out string messageid, out string qr, out string NewTaxID, out string canalPlusReqType, out string sessionID)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;

        ref1 = string.Empty;
        ref2 = string.Empty;
        ref3 = string.Empty;
        ref4 = string.Empty;
        ref5 = string.Empty;
        ref1Name = string.Empty;
        ref2Name = string.Empty;
        ref3Name = string.Empty;
        amount = string.Empty;
        inquirytype = string.Empty;
        taxID = string.Empty;
        qr = string.Empty;
        messageid = string.Empty;
        requestedby = string.Empty;
        NewTaxID = string.Empty;
        string MapTaxID = string.Empty;
        canalPlusReqType = string.Empty;
        sessionID = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageid = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("RequestedBy"))
        {
            requestedby = ht["RequestedBy"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <RequestedBy> Tag");
            return false;
        }

        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            return false;
        }
        if (ht.ContainsKey("TaxID"))
        {
            taxID = ht["TaxID"].ToString();
            
            if (getMapTaxID(taxID, out MapTaxID))
            {
                NewTaxID = MapTaxID;
                writeLog("OldTaxID:" + taxID + "NewMappedTaxID:" + NewTaxID);
            }
            else
            {

                code = "06";
                desp = "Invalid Request";
                writeLog("MapTaxID is Missing OldTaxID:" + taxID + "NewMappedTaxID:" + NewTaxID);
                return false;
            }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing amount <TaxID> Tag");
            return false;
        }
        if (MapTaxID == "0000000000052")
        {
            if (ht.Contains("PaymentType"))
            {
                canalPlusReqType = ht["PaymentType"].ToString();
            }

            if (!string.IsNullOrEmpty(canalPlusReqType))
            {
                if (ht.Contains("Ref3"))
                {
                    string[] arr = ht["Ref3"].ToString().Split(',');
                    if (arr.Count() < 2)
                    {
                        code = "06";
                        desp = "Invalid Request";
                        writeLog("Error in Validation : Missing <Package,Duration> Tag");
                        return false;
                    }
                }
            }

            if (ht.Contains("SessionID"))
            {
                sessionID = ht["SessionID"].ToString();
            }
            
        }
        if (ht.ContainsKey("IsQR"))
        {
            qr = ht["IsQR"].ToString();
        }
        if (ht.ContainsKey("Ref1"))
        {
            ref1 = ht["Ref1"].ToString();


            if (String.IsNullOrEmpty(ref1))
            {
                switch (MapTaxID)
                {
                    case "0000000000001":
                        ref1 = "211";
                        // operatorName = "(iTunes)";
                        break;
                    case "0000000000002":
                        ref1 = "221";
                        // operatorName = "(GooglePlay)";
                        break;
                    case "0000000000003":
                        ref1 = "231";
                        // operatorName = "(Skype)";
                        break;
                    case "0000000000015":
                        ref1 = "261";
                        // operatorName = "(Facebook)";
                        break;
                    case "0000000000016":
                        ref1 = "251";
                        // operatorName = "(Steam Wallet)";
                        break;
                    case "0000000000051":
                        ref1 = "ViberOut";
                        // operaterName="(Viber Out)";
                        break;
                    case "0000000000057":
                        ref1 = "271";
                        break;
                }
            }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Ref1 <Ref1> Tag");
            return false;
        }

        if (ht.ContainsKey("Ref2"))
        {
            ref2 = ht["Ref2"].ToString();
        }
       
        if (ht.ContainsKey("Ref3"))
        {
            ref3 = ht["Ref3"].ToString();
        }
        
        if (ht.ContainsKey("Ref4"))
        {
            ref4 = ht["Ref4"].ToString();
        }

        if (ht.ContainsKey("Ref5"))
        {
            ref5 = ht["Ref5"].ToString();
        }

        if (ht.ContainsKey("Amount"))
        {
            amount = ht["Amount"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing amount <Amount> Tag");
            return false;
        }
        
        if (MapTaxID == "1230000000000")////123
        {

            if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password))// || String.IsNullOrEmpty(ref1))// || String.IsNullOrEmpty(amount)) //String.IsNullOrEmpty(ref2) ||
            {
                code = "07";
                desp = "Invalid Message";
                writeLog("Error in Validation : Data is Null or Empty");
                return false;
            }
        }
        else if (MapTaxID == "0000000000022" || MapTaxID == "0000000000021" || MapTaxID == "0000000000020")////Meter Bill
        {
            if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(ref1) || String.IsNullOrEmpty(requestedby) || String.IsNullOrEmpty(messageid))
            {
                code = "07";
                desp = "Invalid Message";
                writeLog("Error in Validation : Data is Null or Empty");
                return false;
            }
        }
        if (MapTaxID == "0000000000001" || MapTaxID == "0000000000002" || MapTaxID == "0000000000003" || MapTaxID == "0000000000015" || MapTaxID == "0000000000016")////iTune,GooglePlay,Skype
        {

            if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password))//|| String.IsNullOrEmpty(ref1))// || String.IsNullOrEmpty(amount)) //String.IsNullOrEmpty(ref2) ||
            {
                code = "07";
                desp = "Invalid Message";
                writeLog("Error in Validation : Data is Null or Empty");
                return false;
            }
        }

        //Check Authecation
        string errmsg = string.Empty;
        DataSet ds = null;
        // DataSet dsBiller = null;
        bool flg = false;
        string passwordDB = "";
        string userStatusDB = "";
        string appver = string.Empty;
        
        flg = _agentWCF.getAuthentication(email, password, out ds,out errmsg);
        if (flg)
        {
            try
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    int.TryParse(ds.Tables[0].Rows[0]["AGENTID"].ToString(), out agentID);
                    this.agentCode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
                    this.servicePercent = Convert.ToString(ds.Tables[0].Rows[0]["AGENTFEEPERCENT"]);
                    this.agentName = ds.Tables[0].Rows[0]["AGENTNAME"].ToString();
                    this.branchCode = ds.Tables[0].Rows[0]["BRANCHCODE"].ToString();
                    this.branchName = ds.Tables[0].Rows[0]["BRANCHNAME"].ToString();
                    passwordDB = Convert.ToString(ds.Tables[0].Rows[0]["AGENTUSERPASSWORD"]);
                    userStatusDB = Convert.ToString(ds.Tables[0].Rows[0]["USERSTATUS"]);
                    appver = Convert.ToString(ds.Tables[0].Rows[0]["APPVERSION"]);

                    writeLog("APPVERSION:" + appver + " AGETN ID : " + agentID.ToString() + " | AGENT CODE : " + agentCode + " | AGENT NAME : " + agentName + " | BRANCH CODE : " + branchCode);


                    if (passwordDB != password)
                    {
                        code = "05";
                        desp = "Incorrect Password";
                        writeLog(desp + errmsg);
                        return false;
                    }
                    else if (userStatusDB != "Y")
                    {
                        code = "05";
                        desp = "Login ID Locked";
                        writeLog(desp + errmsg);
                        return false;
                    }

                }
                else
                {
                    code = "05";
                    desp = "Incorrect LoginID";
                    writeLog(desp + errmsg);
                    return false;
                }
                //}
                //else
                //{
                //    code = "05";
                //    desp = "Authentication Failed";
                //    writeLog("Error in Authentication : " + errmsg);
                //    return false;
                //}
            }
            catch (Exception ex)
            {
                writeLog("Error In Authtentication Inquiry Request" + ex.Message);
            }

        }
        else
        {
            code = "--";
            desp = "DB Error";
            writeLog("Error in Authentication : " + errmsg);
            return false;

        }

        #region <-- Check APP version -->

        string newbillers = ConfigurationManager.AppSettings["NewBiller"].ToString();//new adding biller
        writeLog("get new biller OK");
        string newappver = ConfigurationManager.AppSettings["newappver"].ToString();//newbiller Taxid and appversion 
        writeLog("get new appver OK");
        Hashtable newappverht = Utils.getMerchantCodeHashtable(newappver);//get app version of Biller's TaxID
        writeLog("add new appverto hashtableOK");
        Hashtable httnewbillers = Utils.getMerchantCodeHashtable(newbillers);
        writeLog("Add newbillers to hashtable OK");
        string tempnewappver = string.Empty;
        appver = string.IsNullOrEmpty(appver) ? "1.0.3" : appver;
        string currentappver = appver.Replace(".", "");//Split . from app version 
        writeLog("currentappver" + currentappver);



        if (newappverht.ContainsKey(taxID))
        {
            tempnewappver = newappverht[taxID].ToString();
            writeLog("tempappver" + tempnewappver);
            if (int.Parse(tempnewappver) > int.Parse(currentappver))//Compare if new app version is larger current app version or not
            {
                code = "05";
                desp = "Please update your application to use " + httnewbillers[taxID].ToString();
                writeLog("Version Out of Date currentversion : " + currentappver + " New Version :" + tempnewappver);
                return false;
            }
            writeLog("Check Appver OK");

        }

        #endregion


        return true;
    }

    public bool IsValidateFtthOrWtthInquiryReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string messageid, out string email, out string password, out string requestedby, out string taxID, out string mobileNumber, out string NewTaxID)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        taxID = string.Empty;
        messageid = string.Empty;
        requestedby = string.Empty;
        NewTaxID = string.Empty;
        var MapTaxID = string.Empty;
        mobileNumber = string.Empty;

        if (ht.ContainsKey("MobileNumber"))
        {
            mobileNumber = ht["MobileNumber"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MobileNumber> Tag");
            return false;
        }

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageid = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("RequestedBy"))
        {
            requestedby = ht["RequestedBy"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <RequestedBy> Tag");
            return false;
        }

        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            return false;
        }

        if (ht.ContainsKey("TaxID"))
        {
            taxID = ht["TaxID"].ToString();

            if (getMapTaxID(taxID, out MapTaxID))
            {
                NewTaxID = MapTaxID;
                writeLog("OldTaxID:" + taxID + "NewMappedTaxID:" + NewTaxID);
            }
            else
            {

                code = "06";
                desp = "Invalid Request";
                writeLog("MapTaxID is Missing OldTaxID:" + taxID + "NewMappedTaxID:" + NewTaxID);
                return false;
            }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing amount <TaxID> Tag");
            return false;
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        // DataSet dsBiller = null;
        bool flg = false;
        string passwordDB = "";
        string userStatusDB = "";
        string appver = string.Empty;

        flg = _agentWCF.getAuthentication(email, password, out ds, out errmsg);
        if (flg)
        {
            try
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    int.TryParse(ds.Tables[0].Rows[0]["AGENTID"].ToString(), out agentID);
                    this.agentCode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
                    this.servicePercent = Convert.ToString(ds.Tables[0].Rows[0]["AGENTFEEPERCENT"]);
                    this.agentName = ds.Tables[0].Rows[0]["AGENTNAME"].ToString();
                    this.branchCode = ds.Tables[0].Rows[0]["BRANCHCODE"].ToString();
                    this.branchName = ds.Tables[0].Rows[0]["BRANCHNAME"].ToString();
                    passwordDB = Convert.ToString(ds.Tables[0].Rows[0]["AGENTUSERPASSWORD"]);
                    userStatusDB = Convert.ToString(ds.Tables[0].Rows[0]["USERSTATUS"]);
                    appver = Convert.ToString(ds.Tables[0].Rows[0]["APPVERSION"]);

                    writeLog("APPVERSION:" + appver + " AGETN ID : " + agentID.ToString() + " | AGENT CODE : " + agentCode + " | AGENT NAME : " + agentName + " | BRANCH CODE : " + branchCode);


                    if (passwordDB != password)
                    {
                        code = "05";
                        desp = "Incorrect Password";
                        writeLog(desp + errmsg);
                        return false;
                    }
                    else if (userStatusDB != "Y")
                    {
                        code = "05";
                        desp = "Login ID Locked";
                        writeLog(desp + errmsg);
                        return false;
                    }

                }
                else
                {
                    code = "05";
                    desp = "Incorrect LoginID";
                    writeLog(desp + errmsg);
                    return false;
                }
                
            }
            catch (Exception ex)
            {
                writeLog("Error In Authtentication Inquiry Request" + ex.Message);
            }

        }
        else
        {
            code = "--";
            desp = "DB Error";
            writeLog("Error in Authentication : " + errmsg);
            return false;

        }

        #region <-- Check APP version -->

        string newbillers = ConfigurationManager.AppSettings["NewBiller"].ToString();//new adding biller
        writeLog("get new biller OK");
        string newappver = ConfigurationManager.AppSettings["newappver"].ToString();//newbiller Taxid and appversion 
        writeLog("get new appver OK");
        Hashtable newappverht = Utils.getMerchantCodeHashtable(newappver);//get app version of Biller's TaxID
        writeLog("add new appverto hashtableOK");
        Hashtable httnewbillers = Utils.getMerchantCodeHashtable(newbillers);
        writeLog("Add newbillers to hashtable OK");
        string tempnewappver = string.Empty;
        appver = string.IsNullOrEmpty(appver) ? "1.0.3" : appver;
        string currentappver = appver.Replace(".", "");//Split . from app version 
        writeLog("currentappver" + currentappver);



        if (newappverht.ContainsKey(taxID))
        {
            tempnewappver = newappverht[taxID].ToString();
            writeLog("tempappver" + tempnewappver);
            if (int.Parse(tempnewappver) > int.Parse(currentappver))//Compare if new app version is larger current app version or not
            {
                code = "05";
                desp = "Please update your application to use " + httnewbillers[taxID].ToString();
                writeLog("Version Out of Date currentversion : " + currentappver + " New Version :" + tempnewappver);
                return false;
            }
            writeLog("Check Appver OK");

        }

        #endregion


        return true;
    }

    public bool IsValidateMptDataPackageInquiryReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string messageid, out string email, out string password, out string requestedby, out string taxID, out string NewTaxID)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;
        taxID = string.Empty;
        messageid = string.Empty;
        requestedby = string.Empty;
        NewTaxID = string.Empty;
        var MapTaxID = string.Empty;
        
        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageid = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("RequestedBy"))
        {
            requestedby = ht["RequestedBy"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <RequestedBy> Tag");
            return false;
        }

        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <Email> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            return false;
        }

        if (ht.ContainsKey("TaxID"))
        {
            taxID = ht["TaxID"].ToString();

            if (getMapTaxID(taxID, out MapTaxID))
            {
                NewTaxID = MapTaxID;
                writeLog("OldTaxID:" + taxID + "NewMappedTaxID:" + NewTaxID);
            }
            else
            {

                code = "06";
                desp = "Invalid Request";
                writeLog("MapTaxID is Missing OldTaxID:" + taxID + "NewMappedTaxID:" + NewTaxID);
                return false;
            }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing amount <TaxID> Tag");
            return false;
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        // DataSet dsBiller = null;
        bool flg = false;
        string passwordDB = "";
        string userStatusDB = "";
        string appver = string.Empty;

        flg = _agentWCF.getAuthentication(email, password, out ds, out errmsg);
        if (flg)
        {
            try
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    int.TryParse(ds.Tables[0].Rows[0]["AGENTID"].ToString(), out agentID);
                    this.agentCode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
                    this.servicePercent = Convert.ToString(ds.Tables[0].Rows[0]["AGENTFEEPERCENT"]);
                    this.agentName = ds.Tables[0].Rows[0]["AGENTNAME"].ToString();
                    this.branchCode = ds.Tables[0].Rows[0]["BRANCHCODE"].ToString();
                    this.branchName = ds.Tables[0].Rows[0]["BRANCHNAME"].ToString();
                    passwordDB = Convert.ToString(ds.Tables[0].Rows[0]["AGENTUSERPASSWORD"]);
                    userStatusDB = Convert.ToString(ds.Tables[0].Rows[0]["USERSTATUS"]);
                    appver = Convert.ToString(ds.Tables[0].Rows[0]["APPVERSION"]);

                    writeLog("APPVERSION:" + appver + " AGETN ID : " + agentID.ToString() + " | AGENT CODE : " + agentCode + " | AGENT NAME : " + agentName + " | BRANCH CODE : " + branchCode);


                    if (passwordDB != password)
                    {
                        code = "05";
                        desp = "Incorrect Password";
                        writeLog(desp + errmsg);
                        return false;
                    }
                    else if (userStatusDB != "Y")
                    {
                        code = "05";
                        desp = "Login ID Locked";
                        writeLog(desp + errmsg);
                        return false;
                    }

                }
                else
                {
                    code = "05";
                    desp = "Incorrect LoginID";
                    writeLog(desp + errmsg);
                    return false;
                }

            }
            catch (Exception ex)
            {
                writeLog("Error In Authtentication Inquiry Request" + ex.Message);
            }

        }
        else
        {
            code = "--";
            desp = "DB Error";
            writeLog("Error in Authentication : " + errmsg);
            return false;

        }

        #region <-- Check APP version -->

        string newbillers = ConfigurationManager.AppSettings["NewBiller"].ToString();//new adding biller
        writeLog("get new biller OK");
        string newappver = ConfigurationManager.AppSettings["newappver"].ToString();//newbiller Taxid and appversion 
        writeLog("get new appver OK");
        Hashtable newappverht = Utils.getMerchantCodeHashtable(newappver);//get app version of Biller's TaxID
        writeLog("add new appverto hashtableOK");
        Hashtable httnewbillers = Utils.getMerchantCodeHashtable(newbillers);
        writeLog("Add newbillers to hashtable OK");
        string tempnewappver = string.Empty;
        appver = string.IsNullOrEmpty(appver) ? "1.0.3" : appver;
        string currentappver = appver.Replace(".", "");//Split . from app version 
        writeLog("currentappver" + currentappver);



        if (newappverht.ContainsKey(taxID))
        {
            tempnewappver = newappverht[taxID].ToString();
            writeLog("tempappver" + tempnewappver);
            if (int.Parse(tempnewappver) > int.Parse(currentappver))//Compare if new app version is larger current app version or not
            {
                code = "05";
                desp = "Please update your application to use " + httnewbillers[taxID].ToString();
                writeLog("Version Out of Date currentversion : " + currentappver + " New Version :" + tempnewappver);
                return false;
            }
            writeLog("Check Appver OK");

        }

        #endregion


        return true;
    }

    public bool getMapTaxID(string taxID, out string MapTaxID)
    {
        MapTaxID = string.Empty;
        errMsg = string.Empty;
        DataSet billerDs = new DataSet();
        bool result = false;
        if (_agentWCF.getMapTaxIDByTaxID(taxID,out billerDs, out errMsg))
        {

            if (billerDs.Tables.Count > 0)
            {
                if (billerDs.Tables[0].Rows.Count > 0)
                {
                    MapTaxID = billerDs.Tables[0].Rows[0]["MAPTAXID"] == DBNull.Value ? string.Empty : billerDs.Tables[0].Rows[0]["MAPTAXID"].ToString();

                    result = string.IsNullOrEmpty(MapTaxID) ? false : true;
                }
            }
        }

        return result;
    }
    //new one string version, string timeStamp,string messageid, string agentcode, string ResCode,string ResDesc, string merchantid, string merchantname,string paymentcode,string invoiceno,string amount,string productdesc,string transtatus,string expiry
    //Old One  out string expiry, out string code, out string desp, out string version, out string ts, out string rescode, out string resdecs, out string merchantname, out string merchantlogo, out string ref1, out string ref2, out string inquirytype, out string amount, out string productdesc, out string status
    bool IsValidateInquiryRes123(Hashtable ht, string taxid, out string version, out string ts, out string messageid, out string agentcode, out string code, out string desp, out string merchantid, out string merchantname, out string ref1, out string invoiceno, out string amount, out string productdesc, out string transtatus, out string expiry)
    {
        code = "";
        desp = "";

        version = string.Empty;
        ts = string.Empty;
        messageid = string.Empty;
        agentcode = string.Empty;
        string rescode = string.Empty;
        string resdecs = string.Empty;
        merchantid = string.Empty;
        merchantname = string.Empty;
        ref1 = string.Empty;
        invoiceno = string.Empty;
        amount = string.Empty;
        productdesc = string.Empty;
        transtatus = string.Empty;
        expiry = string.Empty;
        string hash = string.Empty;
        //  ref2 = string.Empty;
        // inquirytype = string.Empty;
        //amount = string.Empty;
        //transtatus = string.Empty;
        //productdesc = string.Empty;
        //merchantlogo = string.Empty;
        //expiry = string.Empty;
        //merchantname = string.Empty;
        #region <-- Enquiry response xml sample -->
        //string version = string.Empty;
        //string timeStamp = string.Empty;
        //string messageid = string.Empty;
        //string agentcode = string.Empty;
        //string rescode = string.Empty;
        //string resdesc = string.Empty;
        //string merchantID = string.Empty;
        //string requestby = string.Empty;0
        //string merchantname = string.Empty;
        //string paymentcode = string.Empty;
        //string invoiceno = string.Empty;
        //string amount = string.Empty;
        //string productdesc = string.Empty;
        //string transectionStatus = string.Empty;
        //string expiry = string.Empty;
        //string hash = string.Empty;
        //       <InquiryRes>
        // <Version>1.0</Version>
        // <TimeStamp>yyyyMMddhhmmssffff</TimeStamp>
        // <MessageID>eee43434333</MessageID>
        // <AgentCode>1STOP</AgentCode>
        // <ResCode>00</ResCode>
        // <ResDesc></ResDesc>
        // <MerchantID></MerchantID>
        // <MerchantName></MerchantName>
        // <PaymentCode></PaymentCode> 
        // <InvoiceNo></InvoiceNo>
        // <Amount>000000000100</Amount> //1.00
        // <ProductDesc></ProductDesc>  	
        // <Status></Status>
        // <Expiry></Expiry>
        // <Hash></Hash> // Version+ TimeStamp+ MessageID + AgentCode+ ResCode + MerchantID +PaymentCode + InvoiceNo
        //</InquiryRes>
        #endregion
        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            messageid = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("AgentCode"))
        {
            agentcode = ht["AgentCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <AgentCode> Tag");
            return false;
        }
        if (ht.ContainsKey("ResCode"))
        {
            rescode = ht["ResCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <ResCode> Tag");
            return false;
        }

        if (ht.ContainsKey("ResDesc"))
        {
            resdecs = ht["ResDesc"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <ResDesc> Tag");
            return false;
        }
        if (ht.ContainsKey("MerchantID"))
        {
            merchantid = ht["MerchantID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <MerchantID> Tag");
            return false;
        }
        if (ht.ContainsKey("MerchantName"))
        {
            merchantname = ht["MerchantName"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <MerchantName> Tag");
            return false;
        }
        if (ht.ContainsKey("PaymentCode"))
        {
            ref1 = ht["PaymentCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <PaymentCode> Tag");
            return false;
        }
        if (ht.ContainsKey("InvoiceNo"))
        {
            invoiceno = ht["InvoiceNo"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password < InvoiceNo> Tag");
            return false;
        }

        if (ht.ContainsKey("Amount"))
        {
            amount = ht["Amount"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Amount> Tag");
            return false;
        }
        if (ht.ContainsKey("ProductDesc"))
        {
            productdesc = ht["ProductDesc"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : ProductDesc <ProductDesc> Tag");
            return false;
        }
        if (ht.ContainsKey("Status"))
        {
            transtatus = ht["Status"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Status <Status> Tag");
            return false;
        }




        if (ht.ContainsKey("Expiry"))
        {
            expiry = ht["Expiry"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Expiry <Expiry> Tag");
            return false;
        }
        if (ht.ContainsKey("Hash"))
        {
            hash = ht["Hash"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Expiry <Hash> Tag");
            return false;
        }
        //Check Null or Empty String
        //status = "PE";
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(rescode) || String.IsNullOrEmpty(resdecs) || String.IsNullOrEmpty(ref1)) //|| String.IsNullOrEmpty(ref2))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        ArrayList ar = new ArrayList();
        ar.Add(version);
        ar.Add(ts);
        ar.Add(messageid);
        ar.Add(agentcode);
        ar.Add(rescode);
        ar.Add(merchantid);
        ar.Add(ref1);
        ar.Add(invoiceno);

        ar.Sort();

        StringBuilder sb = new StringBuilder();
        foreach (string item in ar)
        {
            sb.Append(item);
        }



        //Check Authecation
        string errmsg = string.Empty;
        string secretkey = string.Empty;
        DataSet ds = null;
        bool flg = false;
        secretkey = ConfigurationManager.AppSettings["123SecretKey"].ToString();
        #region <-- Authentication Function Currently Not use yet -->
        //flg = _agentWCF.getAuthentication(out errmsg, out ds, email, password);
        //if (flg)
        //{
        //    if (ds.Tables[0].Rows.Count > 0)
        //    {
        //        int.TryParse(ds.Tables[0].Rows[0]["AGENTID"].ToString(), out agentid);
        //        this.agentcode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
        //        secretkey = Convert.ToString(ds.Tables[0].Rows[0]["SECRETKEY"]);
        //    }
        //    else
        //    {
        //        code = "05";
        //        desp = "Authentication Failed";
        //        writeLog("Error in Authentication : " + errmsg);
        //        return false;
        //    }

        //}
        //else
        //{
        //    code = "--";
        //    desp = "UnknownError";
        //    writeLog("Error in Authentication : " + errmsg);
        //    return false;

        //}
        #endregion

        if (!Utils.verifyHashValue(hash, sb.ToString(), secretkey))
        {
            code = "--";
            desp = "InvalidHashKey123";
            writeLog("Error in hashv 123 res : " + errmsg);
            return false;
        }
        string taxidmerchantid = ConfigurationManager.AppSettings["taxIDMerchantID"].ToString();
        string merchanidmerchantname = ConfigurationManager.AppSettings["merchantIdmerchantName"].ToString();
        string merchantidfromconfig = string.Empty;


        #region <-- If Taxid is 123/1230000000000000 -->
        Hashtable httmerchantidName = Utils.getMerchantCodeHashtable(merchanidmerchantname);//get merchantid and merchant name from config and add into hash table


        if (ht.ContainsKey("ResCode"))
        {
            code = ht["ResCode"].ToString();
            if (code == "BP_ST_00")
            {
                code = "00";
                desp = "Success";

            }
            else
            {
                code = Utils.changeStatusCodeToCode(code);
                desp = ht["ResDesc"].ToString();
                //return false;
            }
        }

        #endregion


        return true;


    }

    bool IsValidateInquiryFirstRes123(Hashtable ht, out string taxid, out string code, out string desp)
    {

        writeLog("$$$$$$$$$$$$$$$$$$123 First Response Valadation$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
        code = string.Empty;
        desp = string.Empty;
        taxid = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string messageid = string.Empty;
        string agentcode = string.Empty;
        string rescode = string.Empty;
        string resdecs = string.Empty;
        string merchantid = string.Empty;
        string merchantname = string.Empty;
        string ref1 = string.Empty;
        string invoiceno = string.Empty;
        string amount = string.Empty;
        string productdesc = string.Empty;
        string transtatus = string.Empty;
        string expiry = string.Empty;
        string hash = string.Empty;
        //  ref2 = string.Empty;
        // inquirytype = string.Empty;
        //amount = string.Empty;
        //transtatus = string.Empty;
        //productdesc = string.Empty;
        //merchantlogo = string.Empty;
        //expiry = string.Empty;
        //merchantname = string.Empty;
        #region <-- Inquiry ressponse xml sample -->
        //string version = string.Empty;
        //string timeStamp = string.Empty;
        //string messageid = string.Empty;
        //string agentcode = string.Empty;
        //string rescode = string.Empty;
        //string resdesc = string.Empty;
        //string merchantID = string.Empty;
        //string requestby = string.Empty;
        //string merchantname = string.Empty;
        //string paymentcode = string.Empty;
        //string invoiceno = string.Empty;
        //string amount = string.Empty;
        //string productdesc = string.Empty;
        //string transectionStatus = string.Empty;
        //string expiry = string.Empty;
        //string hash = string.Empty;
        //       <InquiryRes>
        // <Version>1.0</Version>
        // <TimeStamp>yyyyMMddhhmmssffff</TimeStamp>
        // <MessageID>eee43434333</MessageID>
        // <AgentCode>1STOP</AgentCode>
        // <ResCode>00</ResCode>
        // <ResDesc></ResDesc>
        // <MerchantID></MerchantID>
        // <MerchantName></MerchantName>
        // <PaymentCode></PaymentCode> 
        // <InvoiceNo></InvoiceNo>
        // <Amount>000000000100</Amount> //1.00
        // <ProductDesc></ProductDesc>  	
        // <Status></Status>
        // <Expiry></Expiry>
        // <Hash></Hash> // Version+ TimeStamp+ MessageID + AgentCode+ ResCode + MerchantID +PaymentCode + InvoiceNo
        //</InquiryRes>
        #endregion
        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            messageid = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("AgentCode"))
        {
            agentcode = ht["AgentCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <AgentCode> Tag");
            return false;
        }
        if (ht.ContainsKey("ResCode"))
        {
            rescode = ht["ResCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <ResCode> Tag");
            return false;
        }

        if (ht.ContainsKey("ResDesc"))
        {
            resdecs = ht["ResDesc"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <ResDesc> Tag");
            return false;
        }
        if (ht.ContainsKey("MerchantID"))
        {
            merchantid = ht["MerchantID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <MerchantID> Tag");
            return false;
        }
        if (ht.ContainsKey("MerchantName"))
        {
            merchantname = ht["MerchantName"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <MerchantName> Tag");
            return false;
        }
        if (ht.ContainsKey("PaymentCode"))
        {
            ref1 = ht["PaymentCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <PaymentCode> Tag");
            return false;
        }
        if (ht.ContainsKey("InvoiceNo"))
        {
            invoiceno = ht["InvoiceNo"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password < InvoiceNo> Tag");
            return false;
        }

        if (ht.ContainsKey("Amount"))
        {
            amount = ht["Amount"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Amount> Tag");
            return false;
        }
        if (ht.ContainsKey("ProductDesc"))
        {
            productdesc = ht["ProductDesc"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : ProductDesc <ProductDesc> Tag");
            return false;
        }
        if (ht.ContainsKey("Status"))
        {
            transtatus = ht["Status"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Status <Status> Tag");
            return false;
        }



        //if (ht.ContainsKey("MerchantLogo"))
        //{
        //    merchantlogo = ht["MerchantLogo"].ToString();
        //}
        //else
        //{
        //    code = "06";
        //    desp = "Invalid Request";
        //    writeLog("Error in Validation : MerchantLogo <MerchantLogo> Tag");
        //    return false;
        //}
        if (ht.ContainsKey("Expiry"))
        {
            expiry = ht["Expiry"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Expiry <Expiry> Tag");
            return false;
        }
        if (ht.ContainsKey("Hash"))
        {
            hash = ht["Hash"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Expiry <Hash> Tag");
            return false;
        }
        //Check Null or Empty String
        //status = "PE";
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(rescode) || String.IsNullOrEmpty(resdecs) || String.IsNullOrEmpty(ref1)) //|| String.IsNullOrEmpty(ref2))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        ArrayList ar = new ArrayList();
        ar.Add(version);
        ar.Add(ts);
        ar.Add(messageid);
        ar.Add(agentcode);
        ar.Add(rescode);
        ar.Add(merchantid);
        ar.Add(ref1);
        ar.Add(invoiceno);

        ar.Sort();

        StringBuilder sb = new StringBuilder();
        foreach (string item in ar)
        {
            sb.Append(item);
        }



        //Check Authecation
        string errmsg = string.Empty;
        string secretkey = string.Empty;
        DataSet ds = null;
        bool flg = false;
        secretkey = ConfigurationManager.AppSettings["123SecretKey"].ToString();
        #region <-- Authentication Function Currently Not use yet -->
        //flg = _agentWCF.getAuthentication(out errmsg, out ds, email, password);
        //if (flg)
        //{
        //    if (ds.Tables[0].Rows.Count > 0)
        //    {
        //        int.TryParse(ds.Tables[0].Rows[0]["AGENTID"].ToString(), out agentid);
        //        this.agentcode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
        //        secretkey = Convert.ToString(ds.Tables[0].Rows[0]["SECRETKEY"]);
        //    }
        //    else
        //    {
        //        code = "05";
        //        desp = "Authentication Failed";
        //        writeLog("Error in Authentication : " + errmsg);
        //        return false;
        //    }

        //}
        //else
        //{
        //    code = "--";
        //    desp = "UnknownError";
        //    writeLog("Error in Authentication : " + errmsg);
        //    return false;

        //}
        #endregion

        if (!Utils.verifyHashValue(hash, sb.ToString(), secretkey))
        {
            code = "--";
            desp = "InvalidHashKey123";
            writeLog("Error in hashv 123 res : " + errmsg);
            return false;
        }


        if (ht.ContainsKey("ResCode"))
        {
            code = ht["ResCode"].ToString();
            if (code == "BP_ST_00")
            {
                code = "00";
                desp = "Success";

            }
            else
            {
                code = Utils.changeStatusCodeToCode(code);
                desp = ht["ResDesc"].ToString();
                return false;
            }
        }
        string merchantidtaxid = ConfigurationManager.AppSettings["merchantIdTaxID"].ToString();
        string merchanidmerchantname = ConfigurationManager.AppSettings["merchantIdmerchantName"].ToString();
        string AbcMerchantIDtaxID = ConfigurationManager.AppSettings["AbcmerchantIdTaxID"].ToString();
        string noFeesMerchantIDtaxID = ConfigurationManager.AppSettings["noFeesMerchantIdTaxID"].ToString();
        string othersFeesMerchantIdTaxId = ConfigurationManager.AppSettings["otherFeesMerchantIdTaxID"].ToString();
        string merchantidfromconfig = string.Empty;
        #region <-- If Taxid is 123/1230000000000000 set Service Depend on 123 Merchant -->
        Hashtable httmerchantidTaxid = Utils.getMerchantCodeHashtable(merchantidtaxid);//get merchantid and merchant name from config and add into hash table
        Hashtable httabcMerchantIDTaxid = Utils.getMerchantCodeHashtable(AbcMerchantIDtaxID);
        Hashtable httnoFeesMerchantIDtaxID = Utils.getMerchantCodeHashtable(noFeesMerchantIDtaxID);
        Hashtable httothersFeesMerchantIdTaxId = Utils.getMerchantCodeHashtable(othersFeesMerchantIdTaxId);
        if (httmerchantidTaxid.ContainsKey(merchantid))
        {
            writeLog("Merchannt is  airline");
            taxid = httmerchantidTaxid[merchantid].ToString();
            this.serviceFlatFee = ConfigurationManager.AppSettings["AirlineServiceFlatFee"].ToString();
            this.servicePercent = ConfigurationManager.AppSettings["AirlineServicePercentFee"].ToString();
            this.agentFlatFee = ConfigurationManager.AppSettings["AirlineAgentFlatFee"].ToString();
            this.agentPercent = ConfigurationManager.AppSettings["AirlineAgentPercentFee"].ToString();
            this.oneStopFlatFee = ConfigurationManager.AppSettings["Airline1StopFlatFee"].ToString();
            this.oneStopPercent = ConfigurationManager.AppSettings["Airline1StopPercentFee"].ToString();
            return true;
        }
        else if (httabcMerchantIDTaxid.ContainsKey(merchantid))
        {
            writeLog("This is ABC Cashcard 123 Merchant");
            taxid = httabcMerchantIDTaxid[merchantid].ToString();
            this.serviceFlatFee = ConfigurationManager.AppSettings["AbcCardServiceFlatFee"].ToString();
            this.servicePercent = ConfigurationManager.AppSettings["AbcCardServicePercentFee"].ToString();
            this.agentFlatFee = ConfigurationManager.AppSettings["AbcCardAgentFlatFee"].ToString();
            this.agentPercent = ConfigurationManager.AppSettings["AbcCardAgentPercentFee"].ToString();
            this.oneStopFlatFee = ConfigurationManager.AppSettings["AbcCard1StopFlatFee"].ToString();
            this.oneStopPercent = ConfigurationManager.AppSettings["AbcCard1StopPercentFee"].ToString();
            return true;
        }
        else if (httnoFeesMerchantIDtaxID.ContainsKey(merchantid))
        {
            writeLog("This is No ServiceFees 123 Merchant");
            this.serviceFlatFee = ConfigurationManager.AppSettings["noFeesServiceFlatFee"].ToString();
            this.servicePercent = ConfigurationManager.AppSettings["noFeesServicePercentFee"].ToString();
            this.agentFlatFee = ConfigurationManager.AppSettings["noFeesAgentFlatFee"].ToString();
            this.agentPercent = ConfigurationManager.AppSettings["noFeesAgentPercentFee"].ToString();
            this.oneStopFlatFee = ConfigurationManager.AppSettings["noFees1StopFlatFee"].ToString();
            this.oneStopPercent = ConfigurationManager.AppSettings["noFees1StopPercentFee"].ToString();
            return true;
        }
        else if (httothersFeesMerchantIdTaxId.ContainsKey(merchantid))
        {
            writeLog("This is other ServiceFees 123 Merchant");
            this.serviceFlatFee = ConfigurationManager.AppSettings["othersFeesServiceFlatFee"].ToString();
            this.servicePercent = ConfigurationManager.AppSettings["othersFeesServicePercentFee"].ToString();
            this.agentFlatFee = ConfigurationManager.AppSettings["othersFeesAgentFlatFee"].ToString();
            this.agentPercent = ConfigurationManager.AppSettings["othersFeesAgentPercentFee"].ToString();
            this.oneStopFlatFee = ConfigurationManager.AppSettings["othersFees1StopFlatFee"].ToString();
            this.oneStopPercent = ConfigurationManager.AppSettings["othersFees1StopPercentFee"].ToString();
            return true;
        }
        else
        {
            writeLog("Merchant is not Airline");
            taxid = "1230000000000";

        }
        #endregion


        return true;


    }

    bool IsValidateInquiryReqOneCash(Hashtable ht, out string version, out string ts, out string messageid, out string code, out string desp, out string ref1, out string ref2, out string amount, out string productdesc, out string HashValue)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        messageid = string.Empty;

        ref1 = string.Empty;
        ref2 = string.Empty;

        amount = string.Empty;
        productdesc = string.Empty;
        HashValue = string.Empty;

        string reshashvalue = string.Empty;
        string tmphashvalue = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }


        if (ht.ContainsKey("MessageID"))
        {
            messageid = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }



        if (ht.ContainsKey("ResCode"))
        {
            code = ht["ResCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("ResDesc"))
        {
            desp = ht["ResDesc"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Ref1"))
        {
            ref1 = ht["Ref1"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Ref1> Tag");
            return false;
        }

        if (ht.ContainsKey("Ref2"))
        {
            ref2 = ht["Ref2"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Ref2> Tag");
            return false;
        }


        if (ht.ContainsKey("Amount"))
        {
            amount = ht["Amount"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Amount> Tag");
            return false;
        }

        if (ht.ContainsKey("ProductDesc"))
        {
            productdesc = ht["ProductDesc"].ToString();
        }

        if (ht.ContainsKey("HashValue"))
        {
            HashValue = ht["HashValue"].ToString();
        }
        // writeLog("Inquiry Response OneCash HashValue :" + HashValue);

        tmphashvalue = Utils.hashOneCashInqRes(messageid, code, desp, ref1, ref2, amount, productdesc);
        //writeLog("Inquiry Response A2A HashValue :" + tmphashvalue);

        //if (HashValue != tmphashvalue)
        //{
        //    code = "05";
        //    desp = "Hash Value Missmatch";
        //    writeLog("Inquiry Hash Value Missmatch.");
        //    return false;
        //}

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(code) || String.IsNullOrEmpty(desp) || String.IsNullOrEmpty(ref2) || String.IsNullOrEmpty(amount) || String.IsNullOrEmpty(productdesc))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        return true;


    }

    bool IsValidateInquiryReqOneCash1(Hashtable ht, out string expiry, out string code, out string desp, out string version, out string ts, out string rescode, out string resdecs, out string billername, out string billerlogo, out string ref1, out string ref2, out string inquirytype, out string amount, out string productdesc, out string status, out string messageid, out string requestedby)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        rescode = string.Empty;
        resdecs = string.Empty;
        billername = string.Empty;
        ref1 = string.Empty;
        ref2 = string.Empty;
        inquirytype = string.Empty;
        amount = string.Empty;
        status = string.Empty;
        productdesc = string.Empty;
        billerlogo = string.Empty;
        expiry = string.Empty;
        messageid = string.Empty;
        requestedby = string.Empty;

        string reshashvalue = string.Empty;
        string tmphashvalue = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }


        if (ht.ContainsKey("MessageID"))
        {
            messageid = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("RequestedBy"))
        {
            requestedby = ht["RequestedBy"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <RequestedBy> Tag");
            return false;
        }

        if (ht.ContainsKey("ResCode"))
        {
            rescode = ht["ResCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("ResDesc"))
        {
            resdecs = ht["ResDesc"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Ref1"))
        {
            ref1 = ht["Ref1"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Ref1> Tag");
            return false;
        }

        if (ht.ContainsKey("Ref2"))
        {
            ref2 = ht["Ref2"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Ref2> Tag");
            return false;
        }


        if (ht.ContainsKey("Amount"))
        {
            amount = ht["Amount"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Amount> Tag");
            return false;
        }

        if (ht.ContainsKey("ProductDesc"))
        {
            productdesc = ht["ProductDesc"].ToString();
        }
        if (ht.ContainsKey("Status"))
        {
            status = ht["Status"].ToString();
        }

        if (ht.ContainsKey("HashValue"))
        {
            reshashvalue = ht["HashValue"].ToString();
        }
        //writeLog("Inquiry Response OneCash HashValue :" + reshashvalue);

        tmphashvalue = Utils.hashOneCashInqRes(rescode, resdecs, ref1, ref2, amount, productdesc, status);
        // writeLog("Inquiry Response A2A HashValue :" + tmphashvalue);

        //if (reshashvalue != tmphashvalue)
        //{
        //    code = "05";
        //    desp = "Hash Value Missmatch";
        //    writeLog("Inquiry Hash Value Missmatch.");
        //    return false;
        //}
        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(rescode) || String.IsNullOrEmpty(resdecs) || String.IsNullOrEmpty(ref2) || String.IsNullOrEmpty(amount) || String.IsNullOrEmpty(status) || String.IsNullOrEmpty(productdesc))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        return true;


    }

    //bool IsValidateInquiryResEasyPoint(Hashtable ht, out string rescode, out string resdesc, out string version, out string msgid, out string ref1, out string amt, out  string tranref,out string digitalcodedesc)
    //{

    //    //        <InquiryRes>
    //    //    <Version></Version>
    //    //    <TimeStamp></TimeStamp>
    //    //    <MessageID></MessageID>
    //    //    <PartnerID></PartnerID>
    //    //    <DigitalCode></DigitalCode>
    //    //    <CodeDesc></CodeDesc>
    //    //<ResCode></ResCode>
    //    //<TranAmount></TranAmount>
    //    //<TranRef></TranRef>
    //    //    <HashValue></HashValue>
    //    //</InquiryRes>

    //    rescode = string.Empty;
    //    version = string.Empty;
    //    string ts = string.Empty;
    //    msgid = string.Empty;
    //   string agnid = string.Empty;
    //    resdesc = string.Empty;
    //    //ref1 = string.Empty;
    //    // ref2 = string.Empty;
    //    ref1 = string.Empty;

    //     amt = string.Empty;
    //    // string serialno=string.Empty;

    //    string pin = string.Empty;
    //     tranref = string.Empty;
    //    //string replacetime=string.Empty;
    //    string reshashvalue = string.Empty;
    //    string tmphashvalue = string.Empty;
    //    string partneragentid = string.Empty;
    //   // string codedesc = string.Empty;
    //    digitalcodedesc = string.Empty;
    //    try
    //    {
    //        if (ht.ContainsKey("Version"))
    //        {
    //            version = ht["Version"].ToString();
    //        }
    //        else
    //        {
    //            rescode = "06";
    //            resdesc = "Invalid Request";
    //            writeLog("Error in Validation : Missing XML <Version> Tag");
    //            return false;
    //        }
    //        if (ht.ContainsKey("TimeStamp"))
    //        {
    //            ts = ht["TimeStamp"].ToString();
    //        }
    //        else
    //        {
    //            rescode = "06";
    //            resdesc = "Invalid Request";
    //            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
    //            return false;
    //        }


    //        if (ht.ContainsKey("MessageID"))
    //        {
    //            msgid = ht["MessageID"].ToString();
    //        }
    //        else
    //        {
    //            rescode = "06";
    //            resdesc = "Invalid Request";
    //            writeLog("Error in Validation : Missing XML <MessageID> Tag");
    //            return false;
    //        }

    //        if (ht.ContainsKey("ResCode"))
    //        {
    //            rescode = ht["ResCode"].ToString();
    //        }
    //        else
    //        {
    //            rescode = "06";
    //            resdesc = "Invalid Request";
    //            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
    //            return false;
    //        }

    //        if (ht.ContainsKey("ResDesc"))
    //        {
    //            resdesc = ht["ResDesc"].ToString();
    //        }
    //        else
    //        {
    //            rescode = "06";
    //            resdesc = "Invalid Request";
    //            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
    //            return false;
    //        }

    //        if (ht.ContainsKey("PartnerID"))
    //        {
    //            agnid = ht["PartnerID"].ToString();
    //        }
    //        else
    //        {
    //            rescode = "06";
    //            resdesc = "Invalid Request";
    //            writeLog("Error in Validation : Missing PartnerID <PartnerID> Tag");
    //            return false;
    //        }
    //        if (ht.ContainsKey("AgentID"))
    //        {
    //            partneragentid = ht["AgentID"].ToString();
    //        }
    //        {
    //            rescode = "06";
    //            resdesc = "Invalid Request";
    //            writeLog("Error in Validation : Missing AgentID <AgentID> Tag");
    //            return false;
    //        }
    //        if (ht.ContainsKey("DigitalCode"))
    //        {
    //            ref1 = ht["DigitalCode"].ToString();
    //        }
    //        else
    //        {
    //            rescode = "06";
    //            resdesc = "Invalid Request";
    //            writeLog("Error in Validation : Missing Ref1 <DigitalCode> Tag");
    //            return false;
    //        }
    //        if (ht.ContainsKey("CodeDesc"))

    //        {
    //            digitalcodedesc = ht["CodeDesc"].ToString();
    //        }

    //        if (ht.ContainsKey("TranAmount"))
    //        {
    //            amt = ht["TranAmount"].ToString();
    //        }
    //        else
    //        {
    //            rescode = "06";
    //            resdesc = "Invalid Request";
    //            writeLog("Error in Validation : Missing TranAmount <TranAmount> Tag");
    //            return false;
    //        }
    //        if (ht.ContainsKey("TranRef"))
    //        {
    //            tranref = ht["TranRef"].ToString();
    //        }
    //        else
    //        {
    //            rescode = "06";
    //            resdesc = "Invalid Request";
    //            return false;
    //        }

    //        if (ht.ContainsKey("HashValue"))
    //        {
    //            reshashvalue = ht["HashValue"].ToString();
    //        }

    //        // MessageID + AgentID + ResCode+ ResDesc + DigitalCode + SerialNo + Expiry + Amount
    //        //hashstrConfirmeasypointRes(string messageid, string agentid, string rescode, string resdec, string digital, string serial, string expiry,string amount)
    //        string key = ConfigurationManager.AppSettings["easyPointRedeemSecretKey"].ToString();
    //        tmphashvalue = Utils.hashstrRedeemEnquiryEasyPointRes(version, ts, msgid, agnid,partneragentid, ref1, rescode, amt, tranref,key);

    //        // writeLog("Confirm Response Putet HashValue :" + tmphashvalue);,
    //        //  replacetime = Regex.Replace(ts, "[^0-9a-zA-Z]+", "");
    //        #region Check EasyPoint Confirm response Hash value
    //        if (reshashvalue != tmphashvalue)
    //        {
    //            rescode = "05";
    //            resdesc = "Hash Value Missmatch";
    //            writeLog("Inquiry Hash Value Missmatch.");
    //            return false;
    //        }

    //        #endregion
    //        //Check Null or Empty String
    //        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(rescode) || String.IsNullOrEmpty(agnid) || String.IsNullOrEmpty(amt) || String.IsNullOrEmpty(ref1))
    //        {
    //            rescode = String.IsNullOrEmpty(rescode) ? "07" : rescode;
    //            resdesc = String.IsNullOrEmpty(resdesc) ? "Invalid Message" : resdesc;
    //            writeLog("Error in Validation : Data is Null or Empty");
    //            return false;
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        writeLog("Excetpion Error In valadate InquiryRedeemResponse Msg:" + ex.Message);
    //        return false;
    //    }
    //    return true;


    //}

    bool IsValidateInquiryResMercyEasyPoint(Hashtable ht, string taxID, out string rescode, out string resdesc, out string version, out string msgid, out string ref1, out string amt, out  string tranref, out string digitalcodedesc)
    {

        //        <InquiryRes>
        //    <Version></Version>
        //    <TimeStamp></TimeStamp>
        //    <MessageID></MessageID>
        //    <PartnerID></PartnerID>
        //    <DigitalCode></DigitalCode>
        //    <CodeDesc></CodeDesc>
        //<ResCode></ResCode>
        //<TranAmount></TranAmount>
        //<TranRef></TranRef>
        //    <HashValue></HashValue>
        //</InquiryRes>

        rescode = string.Empty;
        version = string.Empty;
        string ts = string.Empty;
        msgid = string.Empty;
        string agnid = string.Empty;
        string partneragnid = string.Empty;
        resdesc = string.Empty;
        //ref1 = string.Empty;
        // ref2 = string.Empty;
        ref1 = string.Empty;

        amt = string.Empty;
        // string serialno=string.Empty;

        string pin = string.Empty;
        tranref = string.Empty;
        //string replacetime=string.Empty;
        string reshashvalue = string.Empty;
        string tmphashvalue = string.Empty;
        // string codedesc = string.Empty;
        digitalcodedesc = string.Empty;
        try
        {
            if (ht.ContainsKey("Version"))
            {
                version = ht["Version"].ToString();
            }
            else
            {
                rescode = "06";
                resdesc = "Invalid Request";
                writeLog("Error in Validation : Missing XML <Version> Tag");
                return false;
            }
            if (ht.ContainsKey("TimeStamp"))
            {
                ts = ht["TimeStamp"].ToString();
            }
            else
            {
                rescode = "06";
                resdesc = "Invalid Request";
                writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
                return false;
            }


            if (ht.ContainsKey("MessageID"))
            {
                msgid = ht["MessageID"].ToString();
            }
            else
            {
                rescode = "06";
                resdesc = "Invalid Request";
                writeLog("Error in Validation : Missing XML <MessageID> Tag");
                return false;
            }

            if (ht.ContainsKey("ResCode"))
            {
                rescode = ht["ResCode"].ToString();
            }
            else
            {
                rescode = "06";
                resdesc = "Invalid Request";
                writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
                return false;
            }

            if (ht.ContainsKey("ResDesc"))
            {
                resdesc = ht["ResDesc"].ToString();
            }
            else
            {
                rescode = "06";
                resdesc = "Invalid Request";
                writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
                return false;
            }

            if (ht.ContainsKey("PartnerID"))
            {
                agnid = ht["PartnerID"].ToString();
            }
            else
            {
                rescode = "06";
                resdesc = "Invalid Request";
                writeLog("Error in Validation : Missing PartnerID <PartnerID> Tag");
                return false;
            }

            if (ht.ContainsKey("AgentID"))
            {
                partneragnid = ht["AgentID"].ToString();
            }
            else
            {
                rescode = "06";
                resdesc = "Invalid Request";
                writeLog("Error in Validation : Missing AgentID <AgentID> Tag");
                return false;
            }
            if (ht.ContainsKey("DigitalCode"))
            {
                ref1 = ht["DigitalCode"].ToString();
            }
            else
            {
                rescode = "06";
                resdesc = "Invalid Request";
                writeLog("Error in Validation : Missing Ref1 <DigitalCode> Tag");
                return false;
            }
            if (ht.ContainsKey("CodeDesc"))
            {
                digitalcodedesc = ht["CodeDesc"].ToString();
            }

            if (ht.ContainsKey("TranAmount"))
            {
                amt = ht["TranAmount"].ToString();
            }
            else
            {
                rescode = "06";
                resdesc = "Invalid Request";
                writeLog("Error in Validation : Missing TranAmount <TranAmount> Tag");
                return false;
            }
            if (ht.ContainsKey("TranRef"))
            {
                tranref = ht["TranRef"].ToString();
            }
            else
            {
                rescode = "06";
                resdesc = "Invalid Request";
                return false;
            }

            if (ht.ContainsKey("HashValue"))
            {
                reshashvalue = ht["HashValue"].ToString();
            }

            // MessageID + AgentID + ResCode+ ResDesc + DigitalCode + SerialNo + Expiry + Amount
            //hashstrConfirmeasypointRes(string messageid, string agentid, string rescode, string resdec, string digital, string serial, string expiry,string amount)
            if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(partneragnid) || String.IsNullOrEmpty(rescode) || String.IsNullOrEmpty(agnid) || String.IsNullOrEmpty(amt) || String.IsNullOrEmpty(ref1))
            {
                rescode = String.IsNullOrEmpty(rescode) ? "07" : rescode;
                resdesc = String.IsNullOrEmpty(resdesc) ? "Invalid Message" : resdesc;
                writeLog("Error in Validation : Data is Null or Empty");
                return false;
            }
            string mercyagentid = taxID == "7777777777777" ? ConfigurationManager.AppSettings["easyPointMercyID"].ToString() : ConfigurationManager.AppSettings["MercycorpsAgentID"].ToString();

            if (partneragnid != mercyagentid)
            {
                rescode = "07";
                resdesc = "Your payment code is invalid";
                writeLog("Code is not from Mercy Crop mercycorpid:" + mercyagentid + "Response AgentID:" + partneragnid);
                return false;
            }
            string key = taxID == "7777777777777" ? ConfigurationManager.AppSettings["easyPointMercyRedeemKey"].ToString() : ConfigurationManager.AppSettings["MercyCorpsRedeemKey"].ToString();
            tmphashvalue = Utils.hashstrRedeemEnquiryEasyPointRes(version, ts, msgid, agnid, partneragnid, ref1, rescode, amt, tranref, key);

            // writeLog("Confirm Response Putet HashValue :" + tmphashvalue);,
            //  replacetime = Regex.Replace(ts, "[^0-9a-zA-Z]+", "");
            #region <-- Check EasyPoint Confirm response Hash value -->
            if (reshashvalue != tmphashvalue)
            {
                rescode = "05";
                resdesc = "Hash Value Missmatch";
                writeLog("Inquiry Hash Value Missmatch.");
                return false;
            }

            #endregion
            //Check Null or Empty String

        }
        catch (Exception ex)
        {
            writeLog("Excetpion Error In valadate InquiryRedeemResponse Msg:" + ex.Message);
            return false;
        }
        return true;


    }

    public bool IsValidateInquiryResAwba(Hashtable ht, out string rescode, out string resdesc, out string version, out string msgid, out string ref1, out string ref2, out string ref3, out string ref4, out string ref5, out string ref6, out string loanType, out string loandesc, out string reshashvalue, out string amt, out string ts)
    {
        //
        rescode = string.Empty;
        version = string.Empty;
        ts = string.Empty;
        resdesc = string.Empty;
        ref1 = string.Empty;//slipNo
        ref2 = string.Empty;//CustomerID
        ref3 = string.Empty;//Due Date
        ref4 = string.Empty;





        ref5 = string.Empty; //<InterestAmount></InterestAmount> 
        ref6 = string.Empty;  //<PanelFeesAmount></ PanelFeesAmount > 
        msgid = string.Empty;
        amt = string.Empty;
        reshashvalue = string.Empty;
        loanType = string.Empty;
        loandesc = string.Empty;



        // string serialno=string.Empty;

        //                 <InquiryRes>

        // <Version></Version> 

        // <TimeStamp></TimeStamp>

        // <MessageID></MessageID> 

        // <CustomerID>ref2</CustomerID

        // <SlipNo>ref1</SlipNo> 

        //<ResCode>rescode</ResCode> 

        //<Amount>amt</Amount> 

        //<InterestAmount>ref5</InterestAmount> 

        //<PanelFeesAmount>ref6</PanelFeesAmount > 

        //<DueDate>ref3</DueDate> 

        //<LoanType>loanType</LoanType> 

        //<Desc>loandesc</Desc> 

        // <HashValue>reshashvalue</HashValue> 

        //</InquiryRes>
        string expiry = string.Empty;
        //string replacetime=string.Empty;
        reshashvalue = string.Empty;
        string tmphashvalue = string.Empty;
        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();

        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Response";
            writeLog("Missing Version Tag At Inquiry Response");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Response";
            writeLog("Missing TimeStamp Tag At Inquiry Response");
            return false;
        }


        if (ht.ContainsKey("MessageID"))
        {
            msgid = ht["MessageID"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Response";
            writeLog("Missing MessageID Tag At Inquiry Response");
            return false;
        }

        if (ht.ContainsKey("CustomerID"))
        {
            ref2 = ht["CustomerID"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Response";
            writeLog("Missing CustomerID Tag At Inquiry Response");
            return false;
        }

        if (ht.ContainsKey("ResCode"))
        {
            rescode = ht["ResCode"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Response";
            writeLog("Missing ResCode Tag At Inquiry Response");
            return false;
        }
        if (ht.ContainsKey("SlipNo"))
        {
            ref1 = ht["SlipNo"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Response";
            writeLog("Missing SlipNo Tag At Inquiry Response");
            return false;
        }

        if (ht.ContainsKey("DueDate"))
        {
            ref3 = ht["DueDate"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Response";
            writeLog("Missing DueDate Tag At Inquiry Response");
            return false;
        }
        if (ht.ContainsKey("Amount"))
        {
            amt = ht["Amount"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Response";
            writeLog("Missing Amount Tag At Inquiry Response");
            return false;
        }

        if (ht.ContainsKey("InterestAmount"))
        {
            ref5 = ht["InterestAmount"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Response";
            writeLog("Missing InterestAmount Tag At Inquiry Response");
            return false;
        }
        if (ht.ContainsKey("PenalFeesAmount"))
        {
            ref6 = ht["PenalFeesAmount"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Response";
            writeLog("Missing PenalFeesAmount Tag At Inquiry Response");
            return false;
        }
        if (ht.ContainsKey("LoanType"))
        {
            loanType = ht["LoanType"].ToString();
            // return false;
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Response";
            writeLog("Missing LoanType Tag At Inquiry Response");
            return false;
        }
        if (ht.ContainsKey("Desc"))
        {
            loandesc = ht["Desc"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Response";
            writeLog("Missing Desc Tag At Inquiry Response");
            return false;
        }

        if (ht.ContainsKey("HashValue"))
        {
            reshashvalue = ht["HashValue"].ToString();
        }
        // writeLog("Confirm Response OneCash HashValue :" + reshashvalue);
        //  Version + TimeStamp + MessageID + ResCode + ResDesc + PINType + Amount + PIN + Expiry + SerialNo
        // Version + TimeStamp + MessageID + CustomerID + SlipNo + ResCode + Amount + DueDate + LoanType + Desc
        tmphashvalue = Utils.GethashKeyawbaInqRes(version, ts, msgid, ref2, ref1, rescode, amt, ref3, loanType, loandesc);

        // writeLog("Confirm Response A2A HashValue :" + tmphashvalue);,
        //  replacetime = Regex.Replace(ts, "[^0-9a-zA-Z]+", "");
        writeLog("response Hash Value:" + reshashvalue + "|Hash value To Compare:" + tmphashvalue);
        if (reshashvalue != tmphashvalue)
        {
            rescode = "05";
            resdesc = "Hash Value Missmatch";
            writeLog("response Hash Value:" + reshashvalue + "|Hash value To Compare:" + tmphashvalue);
            return false;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(rescode))
        {
            rescode = "07";
            resdesc = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        resdesc = getdescriptionbyrescode(rescode);
        //txtCustomerID.Text = ref2;
        //txtSlopNo.Text = ref1;
        //txtAmount1.Text = string.IsNullOrEmpty(amt) ? "0" : getFrom12DigitToOrginal(amt);
        //txtIntrestFee.Text = string.IsNullOrEmpty(ref5) ? "0" : getFrom12DigitToOrginal(ref5);
        //txtPanelFee.Text = string.IsNullOrEmpty(ref6) ? "0" : getFrom12DigitToOrginal(ref6);
        //txtResdesc.Text = rescode;


        return true;


    }

    public string CanalPlusMonthlyPayment(EBACanalPlusReq ECanalPlusreq, string taxID, string ref1, string ref1Name, string ref2Name, string ref3Name, string imgURL, string billerName, string billerLogo)
    {
        var json_serializer1 = new JavaScriptSerializer();
        var json_serializerpinres = new JavaScriptSerializer();
        string parameter = json_serializer1.Serialize(ECanalPlusreq);
        string url = ConfigurationManager.AppSettings["CanalPlusEnquiryUri"].ToString();
        CanalPlusViewerListRes canalPlusRes = new CanalPlusViewerListRes();
        string responseData = string.Empty;
        writeLog("Request URL:" + url);
        SSLPost post = new SSLPost();

        writeLog("CanalPlus inqRes:");

        if (post.postDataCanalPlus(url, parameter, out responseData, out errMsg))
        {
            writeLog("CanalPlus inqRes:" + responseData);

            canalPlusRes = json_serializerpinres.Deserialize<CanalPlusViewerListRes>(responseData);
            if (canalPlusRes.ResponseCode.Equals("0"))
            {
                if (!String.IsNullOrEmpty(canalPlusRes.IdBase))
                {
                    Duration = canalPlusRes.Duration;
                    string inqResString = string.Empty;
                    string rescode = "00";
                    string resdecs = "Success";
                    serviceFeeDbl = Utils.getFee(double.Parse(canalPlusRes.Amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                    serviceFee = serviceFeeDbl.ToString("###0.00");
                    inquiryResponseModelCanalPlus inqres = new inquiryResponseModelCanalPlus();
                    inqres.ResCode = rescode;
                    inqres.ResDesc = resdecs;
                    inqres.taxID = taxID;
                    inqres.ref1 = ref1; //CardNumber
                    inqres.ref2 = canalPlusRes.SubscriberNumber; //ViewerName
                    inqres.ref3 = canalPlusRes.PackageName + "  (" + canalPlusRes.Duration + ")"; //PackageName
                    inqres.ref4 = canalPlusRes.ContractNumber; //EndDate
                    inqres.ref5 = canalPlusRes.IdBase; //MobileNo
                    inqres.ref1Name = ref1Name; //Card Number
                    inqres.ref2Name = ref2Name; //Subscriber Number
                    inqres.ref3Name = ref3Name; //Product/Duration
                    inqres.ref4Name = string.Empty; //ContractNumber
                    inqres.ref5Name = string.Empty; //idBase
                    inqres.amount = canalPlusRes.Amount; //Amount
                    inqres.serviceFee = serviceFee; //AgentFee
                    inqres.status = resdecs; //PA for Paid; PE for Pending
                    inqres.expiry = canalPlusRes.Duration; //Expiry Date
                    inqres.productDescription = string.Empty;// Product Description
                    inqres.imgUrl = imgURL; //Image URL
                    inqres.billerName = billerName; //Biller Name
                    inqres.billerLogo = billerLogo; //Biller Logo

                    inqResString = Utils.getInquiryResCanalPlus(inqres);
                    return inqResString;
                }
                else
                {
                    writeLog("Subscriber Number Not Found:" + errMsg);
                    return Utils.getErrorRes("06", "Subscriber Number Not Found!");
                }
            }
            else
            {
                writeLog("Response Fail:" + errMsg);
                return Utils.getErrorRes("06", canalPlusRes.ResponseDescription);
            }
        }
        else
        {
            writeLog("Error Posting To CanalPlus:" + errMsg);
            return Utils.getErrorRes("06", canalPlusRes.ResponseDescription);
        }
    }

    public string CanalPlusGetPackages(EBACanalPlusGetPackagesReq ebaCanalPlusGetPackagesReq, string ref1, string ref1Name, string ref2Name, string ref4Name, string ref5Name)
    {
        try
        {
            var json_serializer1 = new JavaScriptSerializer();
            var json_serializerpinres = new JavaScriptSerializer();
            string parameter = json_serializer1.Serialize(ebaCanalPlusGetPackagesReq);
            string url = ConfigurationManager.AppSettings["CanalPlusGetPackagesUri"].ToString();
            CanalPlusPackagesRes canalPlusPackagesRes = new CanalPlusPackagesRes();
            string responseData = string.Empty;
            writeLog("Request URL:" + url);
            SSLPost post = new SSLPost();

            writeLog("CanalPlus Change Package inqReq: " + parameter);

            if (post.postDataCanalPlus(url, parameter, out responseData, out errMsg))
            {
                writeLog("CanalPlus Change Package inqRes:" + responseData);

                canalPlusPackagesRes = json_serializerpinres.Deserialize<CanalPlusPackagesRes>(responseData);
                if (canalPlusPackagesRes.ResponseCode.Equals("0"))
                {
                    if (!String.IsNullOrEmpty(canalPlusPackagesRes.IDBase))
                    {
                        string inqResString = string.Empty;
                        string rescode = "00";
                        string resdecs = "Success";
                        inquiryPackagesResponseModelCanalPlus inquiryPackagesResponse = new inquiryPackagesResponseModelCanalPlus();
                        inquiryPackagesResponse.ResCode = rescode;
                        inquiryPackagesResponse.ResDesc = resdecs;
                        inquiryPackagesResponse.ref1 = ref1; //CardNumber
                        inquiryPackagesResponse.ref2 = canalPlusPackagesRes.SubscriberNumber; //ViewerName
                        //changePackageInquiryResponse.ref3 = canalPlusChangePackageVerifyRes.PackageName + "  (" + canalPlusRes.Duration + ")"; //PackageName
                        inquiryPackagesResponse.ref4 = canalPlusPackagesRes.ContractNumber; //EndDate
                        inquiryPackagesResponse.ref5 = canalPlusPackagesRes.IDBase; //MobileNo
                        inquiryPackagesResponse.ref1Name = ref1Name; //Card Number
                        inquiryPackagesResponse.ref2Name = ref2Name; //Subscriber Number
                        inquiryPackagesResponse.ref3Name = string.Empty; //Product/Duration
                        inquiryPackagesResponse.ref4Name = ref4Name; //ContractNumber
                        inquiryPackagesResponse.ref5Name = ref5Name; //idBase
                        inquiryPackagesResponse.ResponsePackage = canalPlusPackagesRes.Package;
                        inquiryPackagesResponse.SessionID = canalPlusPackagesRes.SessionID;
                        inqResString = Utils.getChangePackagesInquiryResCanalPlus(inquiryPackagesResponse);
                        return inqResString;
                    }
                    else
                    {
                        writeLog("Subscriber Number Not Found:" + errMsg);
                        return Utils.getErrorRes("06", "Subscriber Number Not Found!");
                    }
                }
                else
                {
                    writeLog("Response Fail:" + errMsg);
                    return Utils.getErrorRes("06", canalPlusPackagesRes.ResponseDescription);
                }
            }
            else
            {
                writeLog("Error Posting To CanalPlus:" + errMsg);
                return Utils.getErrorRes("06", canalPlusPackagesRes.ResponseDescription);
            }

        }
        catch (Exception ex)
        {
            writeLog("CanalPlusGetPackages Error : " + ex.ToString());
        }
        return "";
    }

    public string CanalPlusVerifyChangedPackage(EBACanalPlusChangePackageVerifyReq ebaCanalPlusChangePackageVerifyReq, string ref1Name, string ref2Name, string ref3Name, string ref4Name, string ref5Name, string billerName, string billerLogo, string imgURL, string taxID)
    {
        var json_serializer1 = new JavaScriptSerializer();
        var json_serializerpinres = new JavaScriptSerializer();
        string parameter = json_serializer1.Serialize(ebaCanalPlusChangePackageVerifyReq);
        writeLog("CanalPlus Verify Change Package inqReq: " + parameter);
        string url = ConfigurationManager.AppSettings["CanalPlusVerifyApiUrl"].ToString();
        CanalPlusChangePackageVerifyRes canalPlusChangePackageVerifyRes = new CanalPlusChangePackageVerifyRes();
        string responseData = string.Empty;
        writeLog("Request URL:" + url);
        SSLPost post = new SSLPost();

        if (post.postDataCanalPlus(url, parameter, out responseData, out errMsg))
        {
            writeLog("CanalPlus Verify Change Package inqRes:" + responseData);

            canalPlusChangePackageVerifyRes = json_serializerpinres.Deserialize<CanalPlusChangePackageVerifyRes>(responseData);

            if (canalPlusChangePackageVerifyRes.ResponseCode.Equals("0"))
            {
                if (!string.IsNullOrEmpty(canalPlusChangePackageVerifyRes.IDBase))
                {
                    string inqResString = string.Empty;
                    string rescode = "00";                    
                    string resdecs = "Success";

                    serviceFeeDbl = Utils.getFee(double.Parse(canalPlusChangePackageVerifyRes.Amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                    serviceFee = serviceFeeDbl.ToString("###0.00");

                    inquiryChangePackageVerifyResponseModelCanalPlus inquiryChangePackageVerifyResp = new inquiryChangePackageVerifyResponseModelCanalPlus();
                    inquiryChangePackageVerifyResp.ResCode = rescode;
                    inquiryChangePackageVerifyResp.ResDesc = resdecs;
                    inquiryChangePackageVerifyResp.ref1 = canalPlusChangePackageVerifyRes.CardNumber;
                    inquiryChangePackageVerifyResp.ref2 = canalPlusChangePackageVerifyRes.SubscriberNumber;
                    inquiryChangePackageVerifyResp.Package = canalPlusChangePackageVerifyRes.Package;
                    inquiryChangePackageVerifyResp.Duration = canalPlusChangePackageVerifyRes.Duration;
                    inquiryChangePackageVerifyResp.ref3 = canalPlusChangePackageVerifyRes.Package[0].Label + " (" + canalPlusChangePackageVerifyRes.Duration[0].Label + ")";
                    inquiryChangePackageVerifyResp.ref4 = canalPlusChangePackageVerifyRes.ContractNumber;
                    inquiryChangePackageVerifyResp.ref5 = canalPlusChangePackageVerifyRes.IDBase;
                    inquiryChangePackageVerifyResp.ref1Name = ref1Name; //Card Number
                    inquiryChangePackageVerifyResp.ref2Name = ref2Name; //Subscriber Number
                    inquiryChangePackageVerifyResp.ref3Name = ref3Name; //Product/Duration
                    inquiryChangePackageVerifyResp.ref4Name = ""; //ContractNumber
                    inquiryChangePackageVerifyResp.ref5Name = ""; //idBase
                    inquiryChangePackageVerifyResp.Expiry = canalPlusChangePackageVerifyRes.EndDate;
                    inquiryChangePackageVerifyResp.PackageAmount = canalPlusChangePackageVerifyRes.Amount;
                    inquiryChangePackageVerifyResp.TransactionAmount = canalPlusChangePackageVerifyRes.TransactionAmt;
                    inquiryChangePackageVerifyResp.ServiceFee = serviceFee;
                    inquiryChangePackageVerifyResp.SessionID = canalPlusChangePackageVerifyRes.SessionID;
                    inquiryChangePackageVerifyResp.BillerName = billerName;
                    inquiryChangePackageVerifyResp.BillerLogo = billerLogo;
                    inquiryChangePackageVerifyResp.imgURL = imgURL;
                    inquiryChangePackageVerifyResp.TaxID = taxID;

                    inqResString = Utils.getChangePackageVerifyInquiryResCanalPlus(inquiryChangePackageVerifyResp);
                    return inqResString;
                }
                else
                {
                    writeLog("Subscriber Number Not Found:" + errMsg);
                    return Utils.getErrorRes("06", "Subscriber Number Not Found!");
                }
            }
            else
            {
                writeLog("Response Fail:" + errMsg);
                return Utils.getErrorRes("06", canalPlusChangePackageVerifyRes.ResponseDescription);
            }
        }
        else
        {
            writeLog("Error Posting To CanalPlus:" + errMsg);
            return Utils.getErrorRes("06", canalPlusChangePackageVerifyRes.ResponseDescription);
        }

        return "";
    }

    //public inquiryPackagesResponseModelCanalPlus LoadModel(CanalPlusPackagesRes canalPlusPackagesRes)
    //{
    //    inquiryPackagesResponseModelCanalPlus inqPackageResModelCanalPlus; 
    //    if (canalPlusPackagesRes.Package.Count > 0)
    //    {
    //        inqPackageResModelCanalPlus = new inquiryPackagesResponseModelCanalPlus();
    //        foreach (Package package in canalPlusPackagesRes.Package)
    //        {
    //            inqPackageResModelCanalPlus.ResponsePackage
    //        }
    //    }

    //    return inqPackageResModelCanalPlus;
    //}

    public string TelenorBBInquiry(string reqXml)
    {
        try
        {
            writeLog("$$$$$$$$$$$$$$$$$$ TelenorBB Inquiry Request $$$$$$$$$$$$$$$$$$");
            writeLog("REQ XML : " + reqXml);
            string code = string.Empty, desp = string.Empty;
            string version = string.Empty;
            string ts = string.Empty;
            string email = string.Empty;
            string password = string.Empty;

            string ref1 = string.Empty;
            string ref2 = string.Empty;
            string ref3 = string.Empty;
            string ref4 = string.Empty;
            string ref5 = string.Empty;
            string ref1Name = string.Empty;
            string ref2Name = string.Empty;
            string ref3Name = string.Empty;
            string ref4Name = string.Empty;
            string ref5Name = string.Empty;
            string amount = string.Empty;
            string inquirytype = string.Empty;
            string locLatitude = string.Empty;
            string locLongitude = string.Empty;
            string rescode = string.Empty;
            string resdecs = string.Empty;
            string merchantname = string.Empty;
            string merchantid = string.Empty;
            string merchantlogo = string.Empty;
            string productdesc = string.Empty;
            string status = string.Empty;
            string expiry = string.Empty;
            string taxID = string.Empty;
            string MapTaxID = string.Empty;

            string messageid = string.Empty;
            string requestedby = string.Empty;
            string hashvalue = string.Empty;
            string invoiceno = string.Empty;
            string isAgreement = "N";
            string response = "";
            string topupType;
            string TodayTxnCount = string.Empty;
            string TodayTxnAmount = string.Empty;
            string totalAgentAmount = string.Empty;
            string totalAmount = string.Empty;
            string qr = string.Empty;
            string taxxid = string.Empty;
            string canalPlusReqType = string.Empty;
            string sessionID = string.Empty;
            string partnerCode = string.Empty;
            string customerID = string.Empty;
            string URL = string.Empty;
            string imgURL = string.Empty;
            Hashtable ht = Utils.getHTableFromXML(reqXml);             
             if (!IsValidateInquiryReq(ht, out code, out desp, out version, out ts, out email, out password, out ref1, out ref2, out ref3, out ref4, out ref5, out inquirytype, out amount, out taxID, out ref1Name, out ref2Name, out ref3Name, out requestedby, out messageid, out qr, out MapTaxID, out canalPlusReqType, out sessionID))
             {
                 return Utils.getErrorRes(code, desp);
             }
             else
             {
                 DataSet dsBiller = null;
                string errmsg = string.Empty;
                string billerid = string.Empty;
                StringBuilder sb = new StringBuilder();
                if (_agentWCF.checkBillerID(taxID, agentID, email, out dsBiller, out errmsg))
                {
                    if (dsBiller.Tables[0].Rows.Count > 0)
                    {
                        billerid = Convert.ToString(dsBiller.Tables[0].Rows[0]["BILLERID"]);
                        billerName = dsBiller.Tables[0].Rows[0]["BILLERNAME"].ToString();

                        if (!string.IsNullOrEmpty(dsBiller.Tables[0].Rows[0]["BILLERLOGO"].ToString()))
                            billerLogo = Convert.ToBase64String((byte[])dsBiller.Tables[0].Rows[0]["BILLERLOGO"]);

                        imgURL = ConfigurationManager.AppSettings["BillerLogoPath"] + dsBiller.Tables[0].Rows[0]["BILLERID"].ToString() + ".png";

                        //billerlogo = dsBiller.Tables[0].Rows[0]["IMAGESTRING"].ToString();

                        ref1Name = dsBiller.Tables[0].Rows[0]["REF1NAME"].ToString();
                        ref2Name = dsBiller.Tables[0].Rows[0]["REF2NAME"].ToString();
                        ref3Name = dsBiller.Tables[0].Rows[0]["REF3NAME"].ToString();
                        ref4Name = dsBiller.Tables[0].Rows[0]["REF4NAME"].ToString();
                        ref5Name = dsBiller.Tables[0].Rows[0]["REF5NAME"].ToString();
                        if (MapTaxID == "1230000000000")
                        {
                            if (taxxid == "1230000000000")
                            {
                                serviceFlatFee = dsBiller.Tables[0].Rows[0]["SERVICEFLATFEE"].ToString();
                                servicePercent = dsBiller.Tables[0].Rows[0]["SERVICEPERCENTFEE"].ToString();
                                agentFlatFee = dsBiller.Tables[0].Rows[0]["AGENTFLATFEE"].ToString();
                                agentPercent = dsBiller.Tables[0].Rows[0]["AGENTPERCENTFEE"].ToString();
                                oneStopFlatFee = dsBiller.Tables[0].Rows[0]["ONESTOPFLATFEE"].ToString();
                                oneStopPercent = dsBiller.Tables[0].Rows[0]["ONESTOPPERCENTFEE"].ToString();
                            }
                            else
                            {
                                //will use servicefees/agentfees and onestopfees from web config for airline that implement at IsValidateInquiryFirstRes123(htt, out taxxid)
                            }
                        }
                        else
                        {
                            serviceFlatFee = dsBiller.Tables[0].Rows[0]["SERVICEFLATFEE"].ToString();
                            servicePercent = dsBiller.Tables[0].Rows[0]["SERVICEPERCENTFEE"].ToString();
                            agentFlatFee = dsBiller.Tables[0].Rows[0]["AGENTFLATFEE"].ToString();
                            agentPercent = dsBiller.Tables[0].Rows[0]["AGENTPERCENTFEE"].ToString();
                            oneStopFlatFee = dsBiller.Tables[0].Rows[0]["ONESTOPFLATFEE"].ToString();
                            oneStopPercent = dsBiller.Tables[0].Rows[0]["ONESTOPPERCENTFEE"].ToString();
                        }

                        #region <-- Add By Tz To check Credit terms and Limited For Non Balance Agent -->
                        if (string.IsNullOrEmpty(ref1))
                            ref1 = dsBiller.Tables[0].Rows[0]["REFID1"].ToString(); //Added By hnt 25-Mar-2015

                        creditlimit = dsBiller.Tables[0].Rows[0]["CREDITLIMIT"].ToString();
                        creditterm = dsBiller.Tables[0].Rows[0]["CREDITTERM"].ToString();
                        credittemrstart = dsBiller.Tables[0].Rows[0]["CREDITTERMSTART"].ToString();
                        isAutoCreditReset = dsBiller.Tables[0].Rows[0]["ISAUTORESETCREDIT"] == DBNull.Value ? "N" : dsBiller.Tables[0].Rows[0]["ISAUTORESETCREDIT"].ToString();
                        isSendCreditResetEmail = dsBiller.Tables[0].Rows[0]["ISSENDCREDITRESETEMAIL"] == DBNull.Value ? "N" : dsBiller.Tables[0].Rows[0]["ISSENDCREDITRESETEMAIL"].ToString();

                        isAgreement = dsBiller.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString(); //Added By HNT 26-03-2015                     
                        if (dsBiller.Tables[1].Rows.Count > 0)
                        {
                            TodayTxnCount = String.IsNullOrEmpty(dsBiller.Tables[1].Rows[0]["TODAYTXNCOUNT"].ToString()) ? "0" : dsBiller.Tables[1].Rows[0]["TODAYTXNCOUNT"].ToString();
                            TodayTxnAmount = String.IsNullOrEmpty(dsBiller.Tables[1].Rows[0]["TODAYTXNAMOUNT"].ToString()) ? "0" : dsBiller.Tables[1].Rows[0]["TODAYTXNAMOUNT"].ToString();
                        }
                        if (dsBiller.Tables[2].Rows.Count > 0)
                        {
                            totalAgentAmount = String.IsNullOrEmpty(dsBiller.Tables[2].Rows[0]["AGENTAMOUNT"].ToString()) ? "0" : dsBiller.Tables[2].Rows[0]["AGENTAMOUNT"].ToString();
                        }

                        if (String.IsNullOrEmpty(amount))
                            amount = "0";

                        if (string.IsNullOrEmpty(serviceFlatFee))
                            serviceFlatFee = "0";
                        if (string.IsNullOrEmpty(servicePercent))
                            servicePercent = "0";

                        if (string.IsNullOrEmpty(agentFlatFee))
                            agentFlatFee = "0";

                        if (string.IsNullOrEmpty(agentPercent))
                            agentPercent = "0";
                        if (string.IsNullOrEmpty(creditterm))
                            creditterm = "0";
                        if (string.IsNullOrEmpty(creditlimit))
                            creditlimit = "0.00";

                        if (MapTaxID == "0000000000009")//663 Remit Calculate  fees as below
                        {
                            writeLog("$$$$$$$$$$$$$$$$$$ This IS 663 Cashout $$$$$$$$$$$$$$$$$$$$$$");
                            DataSet ds = new DataSet();
                            string minAmount = string.Empty;
                            string maxAmount = string.Empty;
                            string txnFee = string.Empty;
                            string serviceCharge = string.Empty;
                            string agentCommissionPercent = string.Empty;
                            string superAgentCommissionPercent = string.Empty;
                            if (_agentWCF.get663FeesByAmount(int.Parse(billerid), decimal.Parse(amount), out ds, out errmsg))
                            {
                                minAmount = ds.Tables[0].Rows[0]["MINAMOUNT"].ToString();
                                maxAmount = ds.Tables[0].Rows[0]["MAXAMOUNT"].ToString();
                                txnFee = ds.Tables[0].Rows[0]["TRANSACTIONFEES"].ToString();
                                serviceCharge = "0"; //ds.Tables[0].Rows[0]["SERVICECHARGE"].ToString();
                                agentCommissionPercent = ds.Tables[0].Rows[0]["AGENTCOMMISSIONPERCENT"].ToString();
                                superAgentCommissionPercent = ds.Tables[0].Rows[0]["SUPERAGENTCOMMISSIONPERCENT"].ToString();
                                writeLog("amount range:" + minAmount + "to" + maxAmount + "|TransactionFees:" + txnFee + "|ServiceCharge:" + serviceCharge + "|AgentCommissionPercent:" + agentCommissionPercent + "|SuperAgentComissionPercent:" + superAgentCommissionPercent);
                                //serviceFeeDbl = (double.Parse(txnFee) + double.Parse(serviceCharge));
                                serviceFeeDbl = double.Parse(serviceCharge);
                                serviceFee = serviceFeeDbl.ToString("###0.00");
                                totalAmount = (double.Parse(amount) + serviceFeeDbl).ToString("###0.00");

                                //  oneStopFeeDbl = ((double.Parse(txnFee) + double.Parse(serviceCharge)) - ((double.Parse(txnFee) * double.Parse(agentCommissionPercent)) / 100));
                                oneStopFeeDbl = 0;
                                oneStopFee = oneStopFeeDbl.ToString("###0.00");

                                agentFeeDbl = ((double.Parse(txnFee) * double.Parse(agentCommissionPercent)) / 100);
                                agentAmount = double.Parse(amount) + agentFeeDbl;
                                agentAmount += oneStopFeeDbl;
                                writeLog("Amount : " + amount + " | ServiceFee : " + serviceFee +
                               " | AgentFee : " + agentFee + " | 1-Stop Fee : " + oneStopFee.ToString() +
                               " | AgentAmount : " + agentAmount.ToString());
                            }
                            else
                            {
                                writeLog("Error In Getting 663 Service Fees");
                                return Utils.getErrorRes("06", "Transaction not successful cannot calculate service fees.");
                            }
                        }
                        else
                        {
                            // <-- Calculate Agent Fee -->
                            writeLog("Service Percent : " + servicePercent + ", Service Flat Fee : " + serviceFlatFee + " Amount : " + amount);
                            serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                            serviceFee = serviceFeeDbl.ToString("###0.00");

                            totalAmount = (double.Parse(amount) + serviceFeeDbl).ToString("###0.00");

                            oneStopFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(oneStopPercent), double.Parse(oneStopFlatFee));
                            oneStopFee = oneStopFeeDbl.ToString("###0.00");

                            agentFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(agentPercent), double.Parse(agentFlatFee));
                            agentAmount = double.Parse(amount) - agentFeeDbl;

                            agentAmount += oneStopFeeDbl;

                            writeLog("Amount : " + amount + " | ServiceFee : " + serviceFee +
                                " | AgentFee : " + agentFee + " | 1-Stop Fee : " + oneStopFee.ToString() +
                                " | AgentAmount : " + agentAmount.ToString());
                        }
                        #endregion

                        #region <-- Add By Tz Check Credit Limit and Terms For Non Balance Agent -->
                        if (isAgreement == "Y")
                        {
                            writeLog("Agent Total Amount : " + totalAgentAmount);
                            writeLog("AGREEMENT TYPE is Y. Balance will not be needed.");
                            writeLog("Credit Limit Start:" + credittemrstart);
                            writeLog("Credit Limit:" + creditlimit);
                            writeLog("Creditterm:" + creditterm);
                            if (MapTaxID == "0000000000009")
                            {
                                writeLog("$$$$$$$$$$$$$$ 663 CashOut is not allow for Non BalanceBase Agent $$$$$$$$$$$$$$$$$$$");
                                return Utils.getErrorRes("10", "Agent not allowed");
                            }

                            CreditLimitResultModel result = new CreditLimitResultModel();
                            CreditLimitModel CreditLimitMdl = new CreditLimitModel();
                            CreditLimitMdl.totalAgentAmount = totalAgentAmount;
                            result = isEnoughCreditTermsAndLimit(CreditLimitMdl);
                            if (!result.result)
                            {
                                return Utils.getErrorRes(result.rescode, result.resdesc);
                            }
                            
                        }
                        else
                        {
                            writeLog("Agent Total Amount : " + totalAgentAmount);
                            writeLog("AGREEMENT TYPE is N. Balance will be needed.");
                            writeLog("Credit Limit Start:" + credittemrstart);
                            writeLog("Credit Limit:" + creditlimit);
                            writeLog("Creditterm:" + creditterm);
                            double avlBal = 0;
                            double ledBal = 0;


                            if (MapTaxID != "7777777777777" && MapTaxID != ConfigurationManager.AppSettings["123RemitCashOut"].ToString() && MapTaxID != "0000000000018" && MapTaxID != "0000000000009" && MapTaxID != "0000000000010" && MapTaxID != "0000000000011")//if not MalarMyaineRedeem,123RemitCashOut , MalarMyaineCodeGenerate , 663 Cashout , MercyCorps Generate,MercyCorpsRedeem will check balance.
                            {
                                #region <-- Balance Base -->
                                writeLog("AGREEMENT TYPE is N. Balance must be available.");
                                if (!_agentWCF.getBalance(agentID, out avlBal, out ledBal))
                                {
                                    writeLog("Error in getBalance");
                                }

                                if (avlBal >= agentAmount)
                                {
                                    writeLog("Balance Enough = Agent ID : " + agentID.ToString() + " | Balance : " + avlBal.ToString());

                                    CreditLimitResultModel result = new CreditLimitResultModel();
                                    CreditLimitModel CreditLimitMdl = new CreditLimitModel();
                                    CreditLimitMdl.totalAgentAmount = totalAgentAmount;
                                    result = isEnoughCreditTermsAndLimit(CreditLimitMdl);
                                    if (!result.result)
                                    {
                                        return Utils.getErrorRes(result.rescode, result.resdesc);
                                    }
                                }
                                else
                                {
                                    writeLog("Balance NOT Enough = Agent ID : " + agentID.ToString() + " | Balance : " + avlBal.ToString());

                                    rescode = "10";
                                    resdecs = "Insufficient amount. Please load your balance.";

                                    return Utils.getErrorRes(rescode, resdecs);
                                }
                                #endregion
                            }
                        }
                        #endregion
                    }
                    else
                    {
                        rescode = "01";
                        resdecs = "Invalid Services";
                        return Utils.getErrorRes(rescode, resdecs);
                    }
                }

                string inqResString = string.Empty;
                writeLog("This is Telenor BroadBand.");
                string billercode = string.Empty;
                billercode = getBillerCode(MapTaxID);

                if (IsTokenNullOrExpire(Token))
                {
                    Token = GetOAuthToken();
                }
                TelenorBBReq ebatelenorbbreq = new TelenorBBReq();
                ebatelenorbbreq.Channel = ConfigurationManager.AppSettings["TelenorBBChannelCode"].ToString();
                ebatelenorbbreq.Token = Token.Token;
                ebatelenorbbreq.RegisteredMobileNo = ref1;
                var json_serializer1 = new JavaScriptSerializer();

                string jsonReq = json_serializer1.Serialize(ebatelenorbbreq);
                writeLog("EBA TelenorBB JasonReq:" + jsonReq);
                string url = ConfigurationManager.AppSettings["TelenorBBInquiryUrl"].ToString();
                TelenorBBRes telenorbbres = new TelenorBBRes();
                string responseData = string.Empty;
                SSLPost post = new SSLPost();

                if (post.postDataCanalPlus(url, jsonReq, out responseData, out errMsg))
                {
                    var json_serializerpinres = new JavaScriptSerializer();
                    telenorbbres = json_serializerpinres.Deserialize<TelenorBBRes>(responseData);

                    if (telenorbbres.ResponseCode == "0" && telenorbbres.ResponseDescription == "Success")
                    {
                        rescode = "00";
                        resdecs = "Success";

                        TelenorBBInquiryResModel inqRes = new TelenorBBInquiryResModel();
                        inqRes.ResCode = rescode;
                        inqRes.ResDesc = resdecs;
                        inqRes.taxID = taxID;
                        inqRes.merchantname = merchantname;
                        inqRes.merchantlogo = merchantlogo;
                        inqRes.billername = billerName;
                        inqRes.billerlogo = billerLogo;
                        inqRes.ref1 = telenorbbres.RegisteredMobileNo;
                        inqRes.ref1Name = ref1Name; // Register Mobile No
                        inqRes.ref2 = string.Empty;
                        inqRes.ref2Name = ref2Name;
                        inqRes.ref3 = telenorbbres.CustomerID;
                        inqRes.ref3Name = ref3Name;
                        inqRes.ref4 = ReplaceAmpersandString(telenorbbres.CustomerName);
                        inqRes.ref4Name = string.Empty;
                        inqRes.ref5 = ref5;
                        inqRes.ref5Name = ref5Name;
                        inqRes.ResponseCPEList = telenorbbres.CPE;
                        inqRes.amount = amount;
                        inqRes.serviceFee = serviceFee;
                        inqRes.status = status;
                        inqRes.expiry = expiry;
                        inqRes.productDescription = productdesc;
                        inqResString = Utils.getTelenorBBList(inqRes);
                        return inqResString;

                    }
                    else
                    {
                        writeLog("Error in TelenorBB Inquiry Res:" + errMsg);
                        return Utils.getErrorRes(telenorbbres.ResponseCode, telenorbbres.ResponseDescription);
                    }

                }
                else
                {
                    writeLog("Error Posting To Telenor Broad Band:" + errMsg);
                     return Utils.getErrorRes("06", errMsg);
                }

             }
        }
        catch (Exception ex)
        {
            writeLog("TelenorBBInquiryReq Error : " + ex.ToString());
            return Utils.getErrorRes("06", ex.ToString());
        }
        return string.Empty;
    }

    public string FtthOrWtthInquiry(string reqXml)
    {
        try
        {
            var code = string.Empty;
            var desp = string.Empty;
            var version = string.Empty;
            var ts = string.Empty;
            var email = string.Empty;
            var password = string.Empty;

            var ref1 = string.Empty;
            var ref2 = string.Empty;
            var ref3 = string.Empty;
            var ref4 = string.Empty;
            var ref5 = string.Empty;
            var ref1Name = string.Empty;
            var ref2Name = string.Empty;
            var ref3Name = string.Empty;
            var ref4Name = string.Empty;
            var ref5Name = string.Empty;
            var amount = string.Empty;
            var inquirytype = string.Empty;
            var locLatitude = string.Empty;
            var locLongitude = string.Empty;
            var rescode = string.Empty;
            var resdecs = string.Empty;
            var merchantname = string.Empty;
            var merchantid = string.Empty;
            var merchantlogo = string.Empty;
            var productdesc = string.Empty;
            var status = string.Empty;
            var expiry = string.Empty;
            var taxID = string.Empty;
            var MapTaxID = string.Empty;

            var messageid = string.Empty;
            var requestedby = string.Empty;
            var hashvalue = string.Empty;
            var invoiceno = string.Empty;
            var isAgreement = "N";
            var response = "";
            var topupType = "";
            var TodayTxnCount = string.Empty;
            var TodayTxnAmount = string.Empty;
            var totalAgentAmount = string.Empty;
            var totalAmount = string.Empty;
            var qr = string.Empty;
            var taxxid = string.Empty;
            var canalPlusReqType = string.Empty;
            var sessionID = string.Empty;
            var partnerCode = string.Empty;
            var customerID = string.Empty;
            var URL = string.Empty;
            var imgURL = string.Empty;
            var mobileNumber = string.Empty;
            var errmsg = string.Empty;
            var billerid = string.Empty;

            var ebaUrl = string.Empty;
            var ht = Utils.getHTableFromXML(reqXml);

            if (!IsValidateFtthOrWtthInquiryReq(ht, out code, out desp, out version, out ts, out messageid, out email, out password, out requestedby, out taxID, out mobileNumber, out MapTaxID))
            {
                return Utils.getErrorRes(code, desp);
            }

            if (MapTaxID == ConfigurationManager.AppSettings["FtthMapTaxId"].ToString())
            {
                writeLog("$$$$$$$$$$$$$$$$$$ FTTH Inquiry Request $$$$$$$$$$$$$$$$$$");
                writeLog("REQ XML : " + reqXml);
                ebaUrl = ConfigurationManager.AppSettings["FtthInquiryUrl"].ToString();
            }

            if (MapTaxID == ConfigurationManager.AppSettings["WtthMapTaxId"].ToString())
            {
                writeLog("$$$$$$$$$$$$$$$$$$ WTTH Inquiry Request $$$$$$$$$$$$$$$$$$");
                writeLog("REQ XML : " + reqXml);
                ebaUrl = ConfigurationManager.AppSettings["WtthInquiryUrl"].ToString();
            }

            DataSet dsBiller = null;
            if (_agentWCF.checkBillerID(taxID, agentID, email, out dsBiller, out errmsg))
            {
                if (dsBiller.Tables[0].Rows.Count > 0)
                {
                    if (!string.IsNullOrEmpty(dsBiller.Tables[0].Rows[0]["BILLERID"].ToString()))
                    {
                        billerid = dsBiller.Tables[0].Rows[0]["BILLERID"].ToString();
                    }

                    if (!string.IsNullOrEmpty(dsBiller.Tables[0].Rows[0]["BILLERNAME"].ToString()))
                    {
                        billerName = dsBiller.Tables[0].Rows[0]["BILLERNAME"].ToString();
                    }

                    if (!string.IsNullOrEmpty(dsBiller.Tables[0].Rows[0]["BILLERLOGO"].ToString()))
                    {
                        billerLogo = Convert.ToBase64String((byte[])dsBiller.Tables[0].Rows[0]["BILLERLOGO"]);
                    }
                    
                    imgURL = ConfigurationManager.AppSettings["BillerLogoPath"] + dsBiller.Tables[0].Rows[0]["BILLERID"].ToString() + ".png";

                    serviceFlatFee = dsBiller.Tables[0].Rows[0]["SERVICEFLATFEE"].ToString();
                    servicePercent = dsBiller.Tables[0].Rows[0]["SERVICEPERCENTFEE"].ToString();
                    agentFlatFee = dsBiller.Tables[0].Rows[0]["AGENTFLATFEE"].ToString();
                    agentPercent = dsBiller.Tables[0].Rows[0]["AGENTPERCENTFEE"].ToString();
                    oneStopFlatFee = dsBiller.Tables[0].Rows[0]["ONESTOPFLATFEE"].ToString();
                    oneStopPercent = dsBiller.Tables[0].Rows[0]["ONESTOPPERCENTFEE"].ToString();

                    #region <-- Add By Tz To check Credit terms and Limited For Non Balance Agent -->

                    if (string.IsNullOrEmpty(ref1)) ref1 = dsBiller.Tables[0].Rows[0]["REFID1"].ToString(); //Added By hnt 25-Mar-2015

                    creditlimit = dsBiller.Tables[0].Rows[0]["CREDITLIMIT"].ToString();
                    creditterm = dsBiller.Tables[0].Rows[0]["CREDITTERM"].ToString();
                    credittemrstart = dsBiller.Tables[0].Rows[0]["CREDITTERMSTART"].ToString();
                    isAutoCreditReset = dsBiller.Tables[0].Rows[0]["ISAUTORESETCREDIT"] == DBNull.Value ? "N" : dsBiller.Tables[0].Rows[0]["ISAUTORESETCREDIT"].ToString();
                    isSendCreditResetEmail = dsBiller.Tables[0].Rows[0]["ISSENDCREDITRESETEMAIL"] == DBNull.Value ? "N" : dsBiller.Tables[0].Rows[0]["ISSENDCREDITRESETEMAIL"].ToString();
                    isAgreement = dsBiller.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString();

                    if (dsBiller.Tables[1].Rows.Count > 0)
                    {
                        TodayTxnCount = String.IsNullOrEmpty(dsBiller.Tables[1].Rows[0]["TODAYTXNCOUNT"].ToString()) ? "0" : dsBiller.Tables[1].Rows[0]["TODAYTXNCOUNT"].ToString();
                        TodayTxnAmount = String.IsNullOrEmpty(dsBiller.Tables[1].Rows[0]["TODAYTXNAMOUNT"].ToString()) ? "0" : dsBiller.Tables[1].Rows[0]["TODAYTXNAMOUNT"].ToString();
                    }

                    if (dsBiller.Tables[2].Rows.Count > 0)
                    {
                        totalAgentAmount = String.IsNullOrEmpty(dsBiller.Tables[2].Rows[0]["AGENTAMOUNT"].ToString()) ? "0" : dsBiller.Tables[2].Rows[0]["AGENTAMOUNT"].ToString();
                    }

                    if (String.IsNullOrEmpty(amount))
                    {
                        amount = "0";
                    }

                    if (string.IsNullOrEmpty(serviceFlatFee))
                    {
                        serviceFlatFee = "0";
                    }

                    if (string.IsNullOrEmpty(servicePercent))
                    {
                        servicePercent = "0";
                    }

                    if (string.IsNullOrEmpty(agentFlatFee))
                    {
                        agentFlatFee = "0";
                    }

                    if (string.IsNullOrEmpty(agentPercent))
                    {
                        agentPercent = "0";
                    }

                    if (string.IsNullOrEmpty(creditterm))
                    {
                        creditterm = "0";
                    }

                    if (string.IsNullOrEmpty(creditlimit))
                    {
                        creditlimit = "0.00";
                    }

                    writeLog("Service Percent : " + servicePercent + ", Service Flat Fee : " + serviceFlatFee + " Amount : " + amount);
                    serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                    serviceFee = serviceFeeDbl.ToString("###0.00");

                    totalAmount = (double.Parse(amount) + serviceFeeDbl).ToString("###0.00");

                    oneStopFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(oneStopPercent), double.Parse(oneStopFlatFee));
                    oneStopFee = oneStopFeeDbl.ToString("###0.00");

                    agentFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(agentPercent), double.Parse(agentFlatFee));
                    agentAmount = double.Parse(amount) - agentFeeDbl;

                    agentAmount += oneStopFeeDbl;

                    writeLog("Amount : " + amount + " | ServiceFee : " + serviceFee + " | AgentFee : " + agentFee + " | 1-Stop Fee : " + oneStopFee.ToString() + " | AgentAmount : " + agentAmount);

                    #endregion

                    #region <-- Add By Tz Check Credit Limit and Terms For Non Balance Agent -->

                    if (isAgreement == "Y")
                    {
                        writeLog("Agent Total Amount : " + totalAgentAmount);
                        writeLog("AGREEMENT TYPE is Y. Balance will not be needed.");
                        writeLog("Credit Limit Start:" + credittemrstart);
                        writeLog("Credit Limit:" + creditlimit);
                        writeLog("Creditterm:" + creditterm);
                        CreditLimitResultModel result = new CreditLimitResultModel();
                        CreditLimitModel CreditLimitMdl = new CreditLimitModel();
                        CreditLimitMdl.totalAgentAmount = totalAgentAmount;
                        result = isEnoughCreditTermsAndLimit(CreditLimitMdl);
                        if (!result.result)
                        {
                            return Utils.getErrorRes(result.rescode, result.resdesc);
                        }

                    }
                    else
                    {
                        writeLog("Agent Total Amount : " + totalAgentAmount);
                        writeLog("AGREEMENT TYPE is N. Balance will be needed.");
                        writeLog("Credit Limit Start:" + credittemrstart);
                        writeLog("Credit Limit:" + creditlimit);
                        writeLog("Creditterm:" + creditterm);
                        double avlBal = 0;
                        double ledBal = 0;


                        if (MapTaxID != "7777777777777" && MapTaxID != ConfigurationManager.AppSettings["123RemitCashOut"].ToString() && MapTaxID != "0000000000018" && MapTaxID != "0000000000009" && MapTaxID != "0000000000010" && MapTaxID != "0000000000011")
                        //if not MalarMyaineRedeem,123RemitCashOut , MalarMyaineCodeGenerate , 663 Cashout , MercyCorps Generate,MercyCorpsRedeem will check balance.
                        {
                            #region <-- Balance Base -->

                            writeLog("AGREEMENT TYPE is N. Balance must be available.");
                            if (!_agentWCF.getBalance(agentID, out avlBal, out ledBal))
                            {
                                writeLog("Error in getBalance");
                            }

                            if (avlBal >= agentAmount)
                            {
                                writeLog("Balance Enough = Agent ID : " + agentID.ToString() + " | Balance : " + avlBal.ToString());

                                CreditLimitResultModel result = new CreditLimitResultModel();
                                CreditLimitModel CreditLimitMdl = new CreditLimitModel();
                                CreditLimitMdl.totalAgentAmount = totalAgentAmount;
                                result = isEnoughCreditTermsAndLimit(CreditLimitMdl);
                                if (!result.result)
                                {
                                    return Utils.getErrorRes(result.rescode, result.resdesc);
                                }
                            }
                            else
                            {
                                writeLog("Balance NOT Enough = Agent ID : " + agentID.ToString() + " | Balance : " + avlBal.ToString());

                                rescode = "10";
                                resdecs = "Insufficient amount. Please load your balance.";

                                return Utils.getErrorRes(rescode, resdecs);
                            }

                            #endregion
                        }
                    }

                    #endregion
                }
                else
                {
                    rescode = "01";
                    resdecs = "Invalid Services";
                    return Utils.getErrorRes(rescode, resdecs);
                }
            }

            var ebaResponse = GetInquiryResponseForFtthOrWtth(ebaUrl, mobileNumber).Result;

            if (ebaResponse == null)
            {
                writeLog("Error in TelenorFtthorWtth Inquiry Res:" + "eba response is empty");
                return Utils.getErrorRes("06", "Invalid customerId or data. ");
            }

            if (ebaResponse.ResponseCode == 0 && ebaResponse.ResponseDescription == "Success")
            {
                var responseModel = new FtthOrWtthInquiryResponse();
                responseModel.ResCode = "00";
                responseModel.ResDesc = "Success";
                responseModel.version = version;
                responseModel.billerlogo = billerLogo;
                responseModel.billername = billerName;
                responseModel.merchantlogo = merchantlogo;
                responseModel.merchantname = merchantname;
                responseModel.serviceFee = serviceFlatFee;
                responseModel.servicePercentFee = servicePercent;
                responseModel.taxID = taxID;
                responseModel.RegisteredMobielNo = mobileNumber;
                responseModel.InquiryDetails = ebaResponse;
                return Utils.GetFtthOrWtthInquiryList(responseModel);
            }

            if (ebaResponse != null && ebaResponse.ResponseCode != 0 && ebaResponse.ResponseDescription != "Success")
            {
                writeLog("Error in TelenorFtthorWtth Inquiry Res:" + ebaResponse.ResponseDescription);
                return Utils.getErrorRes("06", ebaResponse.ResponseDescription);
            }
           
        }
        catch (Exception ex)
        {
            writeLog("TelenorFtthorWtth Error : " + ex.ToString());
            return Utils.getErrorRes("06", ex.ToString());
        }
        return string.Empty;
    }

    public string MptPackageInquiry(string reqXml)
    {
        try
        {
            var version = string.Empty;
            var email = string.Empty;

            var ref1 = string.Empty;
            var amount = string.Empty;
            var rescode = string.Empty;
            var resdecs = string.Empty;
            var merchantname = string.Empty;
            var merchantlogo = string.Empty;
            var taxID = string.Empty;
            var MapTaxID = string.Empty;
            var isAgreement = "N";
            var response = "";
            var topupType = "";
            var TodayTxnCount = string.Empty;
            var TodayTxnAmount = string.Empty;
            var totalAgentAmount = string.Empty;
            var totalAmount = string.Empty;
            var imgURL = string.Empty;
            var errmsg = string.Empty;
            var billerid = string.Empty;
            var code = string.Empty;
            var desp = string.Empty;
            var ts = string.Empty;
            var messageid = string.Empty;
            var password = string.Empty;
            var requestedby = string.Empty;
            var ht = Utils.getHTableFromXML(reqXml);

            if (!IsValidateMptDataPackageInquiryReq(ht, out code, out desp, out version, out ts, out messageid, out email, out password, out requestedby, out taxID, out MapTaxID))
            {
                return Utils.getErrorRes(code, desp);
            }

            if (MapTaxID == ConfigurationManager.AppSettings["MptDataPackage"].ToString())
            {
                writeLog("$$$$$$$$$$$$$$$$$$ MPT Data Package Inquiry Request $$$$$$$$$$$$$$$$$$");
                writeLog("REQ XML : " + reqXml);
            }

            DataSet dsBiller = null;
            if (_agentWCF.checkBillerID(taxID, agentID, email, out dsBiller, out errmsg))
            {
                if (dsBiller.Tables[0].Rows.Count > 0)
                {
                    if (!string.IsNullOrEmpty(dsBiller.Tables[0].Rows[0]["BILLERID"].ToString()))
                    {
                        billerid = dsBiller.Tables[0].Rows[0]["BILLERID"].ToString();
                    }

                    if (!string.IsNullOrEmpty(dsBiller.Tables[0].Rows[0]["BILLERNAME"].ToString()))
                    {
                        billerName = dsBiller.Tables[0].Rows[0]["BILLERNAME"].ToString();
                    }

                    if (!string.IsNullOrEmpty(dsBiller.Tables[0].Rows[0]["BILLERLOGO"].ToString()))
                    {
                        billerLogo = Convert.ToBase64String((byte[])dsBiller.Tables[0].Rows[0]["BILLERLOGO"]);
                    }

                    imgURL = ConfigurationManager.AppSettings["BillerLogoPath"] + dsBiller.Tables[0].Rows[0]["BILLERID"].ToString() + ".png";

                    serviceFlatFee = dsBiller.Tables[0].Rows[0]["SERVICEFLATFEE"].ToString();
                    servicePercent = dsBiller.Tables[0].Rows[0]["SERVICEPERCENTFEE"].ToString();
                    agentFlatFee = dsBiller.Tables[0].Rows[0]["AGENTFLATFEE"].ToString();
                    agentPercent = dsBiller.Tables[0].Rows[0]["AGENTPERCENTFEE"].ToString();
                    oneStopFlatFee = dsBiller.Tables[0].Rows[0]["ONESTOPFLATFEE"].ToString();
                    oneStopPercent = dsBiller.Tables[0].Rows[0]["ONESTOPPERCENTFEE"].ToString();

                    #region <-- Add By Tz To check Credit terms and Limited For Non Balance Agent -->

                    if (string.IsNullOrEmpty(ref1)) ref1 = dsBiller.Tables[0].Rows[0]["REFID1"].ToString(); //Added By hnt 25-Mar-2015

                    creditlimit = dsBiller.Tables[0].Rows[0]["CREDITLIMIT"].ToString();
                    creditterm = dsBiller.Tables[0].Rows[0]["CREDITTERM"].ToString();
                    credittemrstart = dsBiller.Tables[0].Rows[0]["CREDITTERMSTART"].ToString();
                    isAutoCreditReset = dsBiller.Tables[0].Rows[0]["ISAUTORESETCREDIT"] == DBNull.Value ? "N" : dsBiller.Tables[0].Rows[0]["ISAUTORESETCREDIT"].ToString();
                    isSendCreditResetEmail = dsBiller.Tables[0].Rows[0]["ISSENDCREDITRESETEMAIL"] == DBNull.Value ? "N" : dsBiller.Tables[0].Rows[0]["ISSENDCREDITRESETEMAIL"].ToString();
                    isAgreement = dsBiller.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString();

                    if (dsBiller.Tables[1].Rows.Count > 0)
                    {
                        TodayTxnCount = String.IsNullOrEmpty(dsBiller.Tables[1].Rows[0]["TODAYTXNCOUNT"].ToString()) ? "0" : dsBiller.Tables[1].Rows[0]["TODAYTXNCOUNT"].ToString();
                        TodayTxnAmount = String.IsNullOrEmpty(dsBiller.Tables[1].Rows[0]["TODAYTXNAMOUNT"].ToString()) ? "0" : dsBiller.Tables[1].Rows[0]["TODAYTXNAMOUNT"].ToString();
                    }

                    if (dsBiller.Tables[2].Rows.Count > 0)
                    {
                        totalAgentAmount = String.IsNullOrEmpty(dsBiller.Tables[2].Rows[0]["AGENTAMOUNT"].ToString()) ? "0" : dsBiller.Tables[2].Rows[0]["AGENTAMOUNT"].ToString();
                    }

                    if (String.IsNullOrEmpty(amount))
                    {
                        amount = "0";
                    }

                    if (string.IsNullOrEmpty(serviceFlatFee))
                    {
                        serviceFlatFee = "0";
                    }

                    if (string.IsNullOrEmpty(servicePercent))
                    {
                        servicePercent = "0";
                    }

                    if (string.IsNullOrEmpty(agentFlatFee))
                    {
                        agentFlatFee = "0";
                    }

                    if (string.IsNullOrEmpty(agentPercent))
                    {
                        agentPercent = "0";
                    }

                    if (string.IsNullOrEmpty(creditterm))
                    {
                        creditterm = "0";
                    }

                    if (string.IsNullOrEmpty(creditlimit))
                    {
                        creditlimit = "0.00";
                    }

                    writeLog("Service Percent : " + servicePercent + ", Service Flat Fee : " + serviceFlatFee + " Amount : " + amount);
                    serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                    serviceFee = serviceFeeDbl.ToString("###0.00");

                    totalAmount = (double.Parse(amount) + serviceFeeDbl).ToString("###0.00");

                    oneStopFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(oneStopPercent), double.Parse(oneStopFlatFee));
                    oneStopFee = oneStopFeeDbl.ToString("###0.00");

                    agentFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(agentPercent), double.Parse(agentFlatFee));
                    agentAmount = double.Parse(amount) - agentFeeDbl;

                    agentAmount += oneStopFeeDbl;

                    writeLog("Amount : " + amount + " | ServiceFee : " + serviceFee + " | AgentFee : " + agentFee + " | 1-Stop Fee : " + oneStopFee.ToString() + " | AgentAmount : " + agentAmount);

                    #endregion

                    #region <-- Add By Tz Check Credit Limit and Terms For Non Balance Agent -->

                    if (isAgreement == "Y")
                    {
                        writeLog("Agent Total Amount : " + totalAgentAmount);
                        writeLog("AGREEMENT TYPE is Y. Balance will not be needed.");
                        writeLog("Credit Limit Start:" + credittemrstart);
                        writeLog("Credit Limit:" + creditlimit);
                        writeLog("Creditterm:" + creditterm);
                        CreditLimitResultModel result = new CreditLimitResultModel();
                        CreditLimitModel CreditLimitMdl = new CreditLimitModel();
                        CreditLimitMdl.totalAgentAmount = totalAgentAmount;
                        result = isEnoughCreditTermsAndLimit(CreditLimitMdl);
                        if (!result.result)
                        {
                            return Utils.getErrorRes(result.rescode, result.resdesc);
                        }

                    }
                    else
                    {
                        writeLog("Agent Total Amount : " + totalAgentAmount);
                        writeLog("AGREEMENT TYPE is N. Balance will be needed.");
                        writeLog("Credit Limit Start:" + credittemrstart);
                        writeLog("Credit Limit:" + creditlimit);
                        writeLog("Creditterm:" + creditterm);
                        double avlBal = 0;
                        double ledBal = 0;

                        #region <-- Balance Base -->

                        writeLog("AGREEMENT TYPE is N. Balance must be available.");
                        if (!_agentWCF.getBalance(agentID, out avlBal, out ledBal))
                        {
                            writeLog("Error in getBalance");
                        }

                        if (avlBal >= agentAmount)
                        {
                            writeLog("Balance Enough = Agent ID : " + agentID.ToString() + " | Balance : " + avlBal.ToString());

                            CreditLimitResultModel result = new CreditLimitResultModel();
                            CreditLimitModel CreditLimitMdl = new CreditLimitModel();
                            CreditLimitMdl.totalAgentAmount = totalAgentAmount;
                            result = isEnoughCreditTermsAndLimit(CreditLimitMdl);
                            if (!result.result)
                            {
                                return Utils.getErrorRes(result.rescode, result.resdesc);
                            }
                        }
                        else
                        {
                            writeLog("Balance NOT Enough = Agent ID : " + agentID.ToString() + " | Balance : " + avlBal.ToString());

                            rescode = "10";
                            resdecs = "Insufficient amount. Please load your balance.";

                            return Utils.getErrorRes(rescode, resdecs);
                        }

                        #endregion
                    }

                    #endregion
                }
                else
                {
                    rescode = "01";
                    resdecs = "Invalid Services";
                    return Utils.getErrorRes(rescode, resdecs);
                }
            }

            var ebaResponse = GetDataPackages().Result;

            if (ebaResponse == null)
            {
                writeLog("Error in Mpt Data Package Inquiry Res:" + "eba response is empty");
                return Utils.getErrorRes("06", "Processing is failed because of internal server error, please try agian.");
            }

            if (ebaResponse.TransactionStatus == "0" )
            {
                var data = JsonConvert.DeserializeObject<Data>(ebaResponse.Detail);
                var json = data.DataPack.Replace(@"'", "\"");
                var packageList = JsonConvert.DeserializeObject<dynamic>(data.DataPack);

                
                var responseModel = new MptDataPackageInquiryResponse();
                responseModel.ResCode = "00";
                responseModel.ResDesc = "Success";
                responseModel.version = version;
                responseModel.billerlogo = billerLogo;
                responseModel.billername = billerName;
                responseModel.serviceFee = serviceFlatFee;
                responseModel.servicePercentFee = servicePercent;
                responseModel.taxID = taxID;
                responseModel.PackageDetails = ebaResponse;
                responseModel.PackageLists = packageList.packageList;
                return Utils.GetMptDataPackageInquiryList(responseModel);
            }

            if (ebaResponse != null && ebaResponse.TransactionStatus != "0")
            {
                writeLog("Error in Mpt Data Package Inquiry Res:" + ebaResponse.ErrorMessage);
                return Utils.getErrorRes(ebaResponse.ErrorCode, ebaResponse.ErrorMessage);
            }

        }
        catch (Exception ex)
        {
            writeLog("Mpt Data Package Error : " + ex.ToString());
            return Utils.getErrorRes("06", ex.ToString());
        }

        return string.Empty;
    }

    #endregion

    #region <-- Confirm -->

    public bool InsertTransactionInvoice(string reqXml, long txnID, string paymentMethod)
    {
        writeLog("$$$$$$$$$$$$ This is InsertTransactionInvoice $$$$$$$$$$$$");
        try
        {
            writeLog("InsertTransactionInvoice ReqXml : " + reqXml);

            Hashtable ht = Utils.getHTableFromXML(reqXml);

            List<PGReqConfirmInvoice> lstInvoices = new List<PGReqConfirmInvoice>();
            string ref1 = "";
            string ref2 = "";
            if (ht.ContainsKey("Ref1"))
            {
                ref1 = ht["Ref1"].ToString();
            }
            if (ht.ContainsKey("Ref2"))
            {
                ref2 = ht["Ref2"].ToString();
            }
            if (ht.ContainsKey("Invoices"))
            {
                string lstInvoiceXml = getInvoiceForPG(reqXml);
                lstInvoiceXml = "<Invoices>" + lstInvoiceXml + "</Invoices>";
                XmlSerializer serializer = new XmlSerializer(typeof(Invoices));
                Invoices result;
                using (TextReader reader = new StringReader(lstInvoiceXml))
                {
                    result = new Invoices();
                    result = (Invoices)serializer.Deserialize(reader);
                }

                PGReqConfirmInvoice confirmInvoice;
                foreach (Invoice inv in result.Invoice)
                {
                    confirmInvoice = new PGReqConfirmInvoice
                    {
                        Amount = inv.Amount,
                        InvoiceNumber = inv.InvoiceNumber
                    };

                    lstInvoices.Add(confirmInvoice);
                }

                foreach (PGReqConfirmInvoice invoice in lstInvoices)
                {
                    if (!_agentWCF.insertInvoice(txnID, invoice.InvoiceNumber, double.Parse(invoice.Amount), ref2, paymentMethod, out errMsg))
                    {
                        writeLog("Error in InsertInvoice : " + errMsg);
                        return false;
                    }
                }
            }
            else
            {
                writeLog("Doesn't have Invoice in XML.");
                return false;
            }
            return true;
        }
        catch (Exception ex)
        {
            writeLog("InsertTransactionInvoice Error : " + ex.ToString());
            return false;
        }
    }

    public bool ConfirmRequestToPG(long txnID)
    {
        writeLog("$$$$$$$$$$$$ This is ConfirmRequestToPG $$$$$$$$$$$$");
        try
        {
            string partnerCode = string.Empty;
            string customerID = string.Empty;
            string errMsg = "";
            DataSet ds = new DataSet();

            List<PGReqConfirmInvoice> lstInvoices = new List<PGReqConfirmInvoice>();

            A2AAPIWCF.ServiceClient _agentWCF = new A2AAPIWCF.ServiceClient();

            if (_agentWCF.getCustomerAndInvoiceInfo(txnID, "0", out ds, out errMsg))
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    partnerCode = ds.Tables[0].Rows[0]["AGENTCODE"].ToString();
                    customerID = ds.Tables[0].Rows[0]["CUSTOMERID"].ToString();
                    PGReqConfirmInvoice pgInvoice;
                    
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        pgInvoice = new PGReqConfirmInvoice();
                        pgInvoice.InvoiceNumber = dr["INVOICENUMBER"].ToString();
                        pgInvoice.PaymentReference = txnID.ToString();
                        pgInvoice.Amount = dr["AMOUNT"].ToString();
                        pgInvoice.PaymentMethod = dr["PAYMENTMETHOD"].ToString();

                        lstInvoices.Add(pgInvoice);
                    }
                }
            }

            string apiUrl = ConfigurationManager.AppSettings["PhatamaGroupAPI"].ToString() + "ConfirmPendingInvoice";
            string apiKey = ConfigurationManager.AppSettings["PhatamaGroupAPIKey"].ToString();

            writeLog("$$$$$$$$$$$$ Phatama Group confirmReq: $$$$$$$$$$$$");
            if (IsTokenNullOrExpire(Token))
            {
                PgToken = GetPGOAuthToken();
            }
            var json_serializer1 = new JavaScriptSerializer();
            var json_serializerpinres = new JavaScriptSerializer();

            SSLPost post = new SSLPost();

            PGConfirmPendingRequest pgConfirmPendingReq = new PGConfirmPendingRequest();
            pgConfirmPendingReq.Token = PgToken.Token;
            pgConfirmPendingReq.PartnerCode = partnerCode;
            pgConfirmPendingReq.CustomerID = customerID;
            pgConfirmPendingReq.Invoices = lstInvoices;

            string parameter = json_serializer1.Serialize(pgConfirmPendingReq);
            writeLog("Phatama Group confirmReq: " + parameter);

            PGConfirmPendingInvoiceResponse pgConfirmPendingInvoiceResp = new PGConfirmPendingInvoiceResponse();
            string responseData = string.Empty;

            if (post.postDataPG(apiUrl, parameter, pgConfirmPendingReq.Token, out responseData, out errMsg))
            {
                writeLog("Phatama Group confirmRes:" + responseData);

                pgConfirmPendingInvoiceResp = json_serializerpinres.Deserialize<PGConfirmPendingInvoiceResponse>(responseData);

                if (pgConfirmPendingInvoiceResp.ErrorCode.Equals("00"))
                {
                    writeLog("Confirm to Phatama Group Success");
                    return true;
                }
                else
                {
                    writeLog("Confirm to Phatama Group Error: " + pgConfirmPendingInvoiceResp.FailReason);
                    return false;
                }
            }
        }
        catch (Exception ex)
        {
            writeLog("Error in ConfirmRequestToPG: " + ex.Message);
        }
        

        return false;
    }

    // For PAYMENT API
    public bool InsertTransactionForPaymentAPI(string taxID, string agentID, string email, string ref1, string ref2, string amount, string version, string locLatitude, string locLongitude, string productdesc, string appType, string messageid, string paymentMethod, string agentCode, string agentBranchCode, out string agentTxnID)
    {
        try
        {
            writeLog("$$$$$$$$$$$$$$$ InsertTransactionForPaymentAPI $$$$$$$$$$$$$$$");
            agentTxnID = string.Empty;
            string billerid = string.Empty;
            string errmsg = string.Empty;
            string ref3 = string.Empty;
            string ref4 = string.Empty;
            string ref5 = string.Empty;
            double amt = 0;
            string txnFee = string.Empty;
            string rescode = string.Empty;
            string resdecs = string.Empty;
            int batchID = 0;
            long txnID = 0;
            DataSet dsBiller = null;
            string isAgreement = "";
            string transactionDateTime = "";
            double availablebalance = 0;
            double ledgerbalance = 0;
            
            #region Temp Comment
            //if (ht.ContainsKey("TaxID"))
            //{
            //    taxID = ht["TaxID"].ToString();
            //}
            //if (ht.ContainsKey("Email"))
            //{
            //    email = ht["Email"].ToString();
            //}
            //if (ht.ContainsKey("Ref1"))
            //{
            //    ref1 = ht["Ref1"].ToString();
            //}
            //if (ht.ContainsKey("Ref2"))
            //{
            //    ref2 = ht["Ref2"].ToString();
            //}
            //if (ht.ContainsKey("Amount"))
            //{
            //    amount = ht["Amount"].ToString();
            //}
            //if (ht.ContainsKey("Version"))
            //{
            //    version = ht["Version"].ToString();
            //}
            //if (ht.ContainsKey("LocLatitude"))
            //{
            //    locLatitude = ht["LocLatitude"].ToString();
            //}
            //if (ht.ContainsKey("LocLongitude"))
            //{
            //    locLongitude = ht["LocLongitude"].ToString();
            //}
            //if (ht.ContainsKey("ProductDesc"))
            //{
            //    productdesc = ht["ProductDesc"].ToString();
            //}
            //if (ht.ContainsKey("AppType"))
            //{
            //    appType = ht["AppType"].ToString();
            //}
            //if (ht.ContainsKey("MessageID"))
            //{
            //    messageid = ht["MessageID"].ToString();
            //}
            #endregion
            writeLog("AgentID : " + agentID + "Email : " + email);
            if (_agentWCF.checkBillerID(taxID, int.Parse(agentID), email, out dsBiller, out errmsg))
            {
                writeLog("taxid : " + taxID + ", agentID : " + agentID + ", email : " + email);
                writeLog("dsBiller table count :  " + dsBiller.Tables.Count.ToString() + ", dsBiller Row Count : " + dsBiller.Tables[0].Rows.Count.ToString());
                oneStopFlatFee = dsBiller.Tables[0].Rows[0]["ONESTOPFLATFEE"].ToString();
                oneStopPercent = dsBiller.Tables[0].Rows[0]["ONESTOPPERCENTFEE"].ToString();
                servicePercent = dsBiller.Tables[0].Rows[0]["SERVICEPERCENTFEE"].ToString();
                serviceFlatFee = dsBiller.Tables[0].Rows[0]["SERVICEFLATFEE"].ToString();
                isAgreement = dsBiller.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString(); 
                billerid = Convert.ToString(dsBiller.Tables[0].Rows[0]["BILLERID"]);
                writeLog("$$$$$$$$$$$$$$$ Check Biller Success $$$$$$$$$$$$$$$");
            }
            writeLog("Amount : " + amount);
            amt = double.Parse((double.Parse(amount)).ToString("#,##0.00"));
            writeLog("Amt : " + amt.ToString());
            serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
            serviceFee = serviceFeeDbl.ToString("###0.00");
            oneStopFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(oneStopPercent), double.Parse(oneStopFlatFee));
            oneStopFee = oneStopFeeDbl.ToString("###0.00");

            writeLog("$$$$$$$$$$$$$$$ Calling insertTransaction $$$$$$$$$$$$$$$");
            #region
            //if (paymentMethod.ToLower() == "123")
            //{
            //    if (!_agentWCF.insertTransactionWithDeductBalance(billerid, int.Parse(agentID), email, "MMK", "MM", ref1, ref2, ref3, ref4, ref5, agentCode, amt, serviceFeeDbl, oneStopFeeDbl, "OVERTHECOUNTER", email, version,
            //                                          locLatitude, locLongitude, productdesc, "", agentBranchCode, "", appType, messageid, isAgreement, agentAmount, out  txnID, out transactionDateTime, out  errMsg, out  batchID, out  availablebalance, out  ledgerbalance))
            //    {
            //        writeLog("Error in insertTransaction with deduct balance : " + errMsg);
            //        rescode = "01";
            //        resdecs = "Error in Transaction";
            //        return false;
            //    }
            //    else
            //    {
            //        writeLog("$$$$$$$$$$$$$$$ insertTransaction with deduct balance Success $$$$$$$$$$$$$$$");
            //        agentTxnID = txnID.ToString();
            //        writeLog("TXN ID : " + txnID.ToString() + " | BILLER ID : " + billerid);
            //        return true;
            //    }    
            //}
            #endregion
            
            if (!_agentWCF.insertTransaction(billerid, int.Parse(agentID), email, "MMK", "MM", ref1, ref2, ref3, ref4, ref5, agentCode, amt, serviceFeeDbl, oneStopFeeDbl, "OVERTHECOUNTER", email, version,
                                                    locLatitude, locLongitude, productdesc, "", agentBranchCode, "", appType, messageid, out txnID, out errMsg, out batchID))
            {
                writeLog("Error in insertTransaction : " + errMsg);
                rescode = "01";
                resdecs = "Error in Transaction";
                return false;
            }
            else
            {
                writeLog("$$$$$$$$$$$$$$$ insertTransaction Success $$$$$$$$$$$$$$$");
                agentTxnID = txnID.ToString();
                writeLog("TXN ID : " + txnID.ToString() + " | BILLER ID : " + billerid);
                return true;
            }    
        }
        catch (Exception ex)
        {
            writeLog("Error in InsertTransactionForPaymentAPI : " + ex.ToString());
            throw;
        }
        
    }

    public bool UpdateTransactionForPaymentAPI(long txnID, string email, string ref1, string ref2, string isAgreement, double availablebalance)
    {
        int batchID = 0;
        if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, "", "", ""
                                        , "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
        {
            writeLog("Error in ConfirmUpdate : " + errMsg);
            return false;
        }
        return true;
    }

    public string ConfirmToBiller(string reqXml)    
    {
        writeLog("$$$$$$$$$$$$$$$ ConfirmToBiller $$$$$$$$$$$$$$$");
        writeLog("REQ XML : " + reqXml);
        //string code = string.Empty, desp = string.Empty;
        string sendername = "936600004";
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;

        string ref1 = string.Empty;
        string ref2 = string.Empty;
        string ref3 = string.Empty;
        string ref4 = string.Empty;
        string ref5 = string.Empty;
        string ref6 = string.Empty;
        string phoneNumber = string.Empty;
        string ref1Name = string.Empty;
        string ref2Name = string.Empty;
        string ref3Name = string.Empty;
        string ref4Name = string.Empty;
        string ref5Name = string.Empty;

        string amount = string.Empty;
        string inquirytype = string.Empty;
        string locLatitude = string.Empty;
        string locLongitude = string.Empty;
        string rescode = string.Empty;
        string resdecs = string.Empty;
        string merchantname = string.Empty;
        string merchantlogo = string.Empty;
        string productdesc = string.Empty;
        string appType = "";
        string status = string.Empty;
        //string agentfee = string.Empty;
        string taxID = string.Empty;
        string MapTaxID = string.Empty;
        string expiry = string.Empty;

        string messageid = string.Empty;
        string confirmedby = string.Empty;
        string totalAmount = "";
        string PINType = string.Empty;
        string Pin = string.Empty;
        string imgnrc = string.Empty;
        string imgcert = string.Empty;
        //bool doSMS = false;

        string response = "";
        double amt = 0;// double.Parse((double.Parse(amount)).ToString("#,##0.00"));

        string isAgreement = "N"; //Added by HNT 26-03-2015
        string topupType;
        string TodayTxnCount = string.Empty;
        string TodayTxnAmount = string.Empty;
        string totalAgentAmount = string.Empty;
        string smsMsg = string.Empty;
        string payeecommissionamt = string.Empty;
        string payeechargeamt = string.Empty;
        string totalpayeecharge = string.Empty;
        string taxxid = string.Empty;
        string meterBiller = string.Empty;
        string isTitan = "TITAN";
        string isCNP = "CNP";
        //int agentID = 0;
        string timespanvalue = string.Empty;
        string titanResult = string.Empty;
        string townshipcode = string.Empty;
        string titanCustRefNumber = string.Empty;
        string titanCustomerName = string.Empty;
        string titanTotalUnitUse = string.Empty;
        string esbGetPinMethod = "GetTelcoPIN";
        string esbGetGiftCardMethod = "GetGiftCardPIN";
        string esbAirTimeTopup = "AirTimeTopUp";
        string esbAirTimeInq = "EnquiryAirtimeTopUp";
        string esbaGcardAirtimeReq = "TopUpGiftCardAirTime";
        string fourTVproductID = string.Empty;
        string ServiceFeeFor123Remit = string.Empty;
        double availablebalance = 0;
        double ledgerbalance = 0;
        string canalPlusConfirmType = string.Empty;
        string sessionID = string.Empty;
        string packageCode = string.Empty;
        string durationCode = string.Empty;

        string partnerCode = "";
        string customerID = "";
        List<PGReqConfirmInvoice> lstInvoices = new List<PGReqConfirmInvoice>();
        string LoginType = string.Empty;

        try
        { 
            Hashtable ht = Utils.getHTableFromXML(reqXml);

            if (!IsValidateConfirmReq(reqXml, ht, out rescode, out resdecs, out version, out ts, out email, out password, out ref1, out ref2, out ref3, out ref4, out ref5, out imgcert, out imgnrc, out inquirytype, out amount, out locLatitude, out locLongitude, out serviceFee, out productdesc, out taxID, out messageid, out confirmedby, out topupType, out MapTaxID, out canalPlusConfirmType, out sessionID, out packageCode, out durationCode, out lstInvoices,out LoginType))
            {
                return Utils.getErrorRes(rescode, resdecs);
            }
            else
            {
                try
                {
                    if (MapTaxID == ConfigurationManager.AppSettings["AEONMapTaxId"].ToString() || MapTaxID == ConfigurationManager.AppSettings["FtthMapTaxId"].ToString() || MapTaxID == ConfigurationManager.AppSettings["WtthMapTaxId"].ToString())
                    {
                        phoneNumber = ref5;
                    }

                    if (MapTaxID == "0000000000031")
                    {
                        string[] fourTVProuct = ref5.Split(':');
                        fourTVproductID = fourTVProuct[0];
                    }
                    if (MapTaxID == "0000000000020" || MapTaxID == "0000000000021" || MapTaxID == "0000000000022")
                    {
                        string[] chargecomm = ref5.Split(':');
                        meterBiller = chargecomm[0];
                        if (meterBiller == isTitan)//For Titan Titan Result and get townshipcode to sent 
                        {
                            //TITANOrCNP:result (OK/insificent):townshipcode: ConsumerRefNo
                            //biller+":"+InquiryResult.Status + ":" + InquiryResult.TownshipCode + ":" + InquiryResult.ConsumerReferenceNo+":"+InquiryResult.ConsumerName+":"+InquiryResult.TotalUnitUsed;//TITANOrCNP:result (OK/insificent):townshipcode: ConsumerRefNo:Customer Name: TotalUnituse
                            titanResult = chargecomm[1];
                            townshipcode = chargecomm[2];
                            titanCustRefNumber = chargecomm[3];
                            titanCustomerName = chargecomm[4];
                            titanTotalUnitUse = chargecomm[5];
                        }
                        else
                        {
                            if (meterBiller != isCNP)//For Oder version of Andriod APP V1.1.1 and below CNP Meter Bills
                            {
                                payeechargeamt = chargecomm[0];
                                payeecommissionamt = chargecomm[1];
                                totalpayeecharge = (double.Parse(payeechargeamt) + double.Parse(payeecommissionamt)).ToString();
                                ref4 = ref5;
                                writeLog("Charge:" + payeechargeamt + "|Comission:" + payeecommissionamt + "|Totalpayeecharge:" + totalpayeecharge);
                            }
                            else if (meterBiller == isCNP)//For Newer Version of Andriod App V1.1.2 and above CNP Billers
                            {

                                payeechargeamt = chargecomm[1];
                                payeecommissionamt = chargecomm[2];
                                totalpayeecharge = (double.Parse(payeechargeamt) + double.Parse(payeecommissionamt)).ToString();
                                ref4 = ref5;
                                writeLog("Charge:" + payeechargeamt + "|Comission:" + payeecommissionamt + "|Totalpayeecharge:" + totalpayeecharge);

                                //for newer cnp version
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    writeLog("Exception Error in Get Payee charge and comission amount" + ex.Message);
                }

                sendername = (ref3.StartsWith("099") || (ref3.StartsWith("097") && !ref3.StartsWith("0973"))) ? ConfigurationManager.AppSettings["senderNameNumber"].ToString() : ConfigurationManager.AppSettings["senderName"].ToString();//if mobile number is Orredoo Sender name Must Be 936600004 

                DataSet dsBiller = null;
                string errmsg = string.Empty;
                string billerid = string.Empty;
                if (ht.ContainsKey("AppType"))
                {
                    appType = ht["AppType"].ToString();
                }


                if (String.IsNullOrEmpty(appType))
                    appType = "CP";
                //writeLog("AgentID : " + agentID.ToString());

                #region <-- Check the biller is 123  start from 25-April-2016 Tz -->

                if (MapTaxID == "1230000000000")
                {
                    //if (IsABCCashCard(ref1))
                    //{
                    //    writeLog("$$$$$$$$$$$$$$$$$$$$$$$ This Is ABC CashCard $$$$$$$$$$$$$$$$$$$$$$$$");
                    //    this.serviceFlatFee = ConfigurationManager.AppSettings["AbcCardServiceFlatFee"].ToString();
                    //    this.servicePercent = ConfigurationManager.AppSettings["AbcCardServicePercentFee"].ToString();
                    //    this.agentFlatFee = ConfigurationManager.AppSettings["AbcCardAgentFlatFee"].ToString();
                    //    this.agentPercent = ConfigurationManager.AppSettings["AbcCardAgentPercentFee"].ToString();
                    //    this.oneStopFlatFee = ConfigurationManager.AppSettings["AbcCard1StopFlatFee"].ToString();
                    //    this.oneStopPercent = ConfigurationManager.AppSettings["AbcCard1StopPercentFee"].ToString();
                    //    taxxid = "AbcCashCard";
                    //}
                    //else
                    //{
                    #region <-- If Request is from 123  get Merchent ID from 123 to set service fees for Airline. -->
                    // writeLog("$$$$$$$$$$$$$$$$$$Request From QR$$$$$$$$$$$$$$$$$$$$$$");
                    string agentcode = ConfigurationManager.AppSettings["123ChannelCode"].ToString();// "1STOP";
                    string hashstr = Utils.hashstrReq123(version, ts, messageid, agentcode, ref1);



                    string reqXML123 = "<InquiryReq><Version>" + version + "</Version><TimeStamp>" + ts
                        + "</TimeStamp>"
                        + "<MessageID>" + messageid + "</MessageID>"
                        + "<AgentCode>" + agentcode + "</AgentCode>"
                       + "<PaymentCode>" + ref1
                        + "</PaymentCode><RequestBy>" + taxID
                        + "</RequestBy><Hash>" + hashstr
                        + "</Hash></InquiryReq>";
                    writeLog("MESSAGE ID :" + messageid + "| Payment Code :" + ref1 + "taxID :" + taxID);

                    RouteAPI api_service = new RouteAPI();
                    writeLog("123 Inquiry Req QR : " + reqXML123);
                    response = api_service.Apicalling123(reqXML123);
                    writeLog("123 Inquiry Res QR : " + response);
                    Hashtable htt = Utils.getHTableFromXML(response);
                    string responsecode = string.Empty;
                    string resDesc = string.Empty;
                    if (IsValidateInquiryFirstRes123(htt, out taxxid, out responsecode, out resDesc))
                    {
                        writeLog("$$$$$$$$$$$$$$$$QR 123 RESPONSE OK Old Tax ID" + taxID + "| taxid:" + taxxid + "$$$$$$$$$$$$$$$$$$$$$$$$");


                    }
                    else
                    {

                        writeLog("$$$$$$$$$$$$$$$$$VALADATE NOT OK$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
                        return Utils.getErrorRes(responsecode, resDesc);
                    }
                    #endregion
                    // }
                }

                #endregion

                if (_agentWCF.checkBillerID(taxID, agentID, email,out dsBiller, out errmsg))
                {
                    #region <-- Check BillerID -->
                    if (dsBiller.Tables[0].Rows.Count > 0)
                    {
                        billerid = Convert.ToString(dsBiller.Tables[0].Rows[0]["BILLERID"]);
                        billerName = dsBiller.Tables[0].Rows[0]["BILLERNAME"].ToString();
                        if (!string.IsNullOrEmpty(dsBiller.Tables[0].Rows[0]["BILLERLOGO"].ToString()))
                            billerLogo = Convert.ToBase64String((byte[])dsBiller.Tables[0].Rows[0]["BILLERLOGO"]);
                        //billerlogo = dsBiller.Tables[0].Rows[0]["IMAGESTRING"].ToString();
                        ref1Name = dsBiller.Tables[0].Rows[0]["REF1NAME"].ToString();
                        ref2Name = dsBiller.Tables[0].Rows[0]["REF2NAME"].ToString();
                        ref3Name = dsBiller.Tables[0].Rows[0]["REF3NAME"].ToString();
                        ref4Name = dsBiller.Tables[0].Rows[0]["REF4NAME"].ToString();
                        ref5Name = dsBiller.Tables[0].Rows[0]["REF5NAME"].ToString();

                        creditlimit = dsBiller.Tables[0].Rows[0]["CREDITLIMIT"].ToString();
                        creditterm = dsBiller.Tables[0].Rows[0]["CREDITTERM"].ToString();
                        credittemrstart = dsBiller.Tables[0].Rows[0]["CREDITTERMSTART"].ToString();
                        creditResetAgentBranchID = dsBiller.Tables[0].Rows[0]["AGENTBRANCHID"].ToString();
                        isAutoCreditReset = dsBiller.Tables[0].Rows[0]["ISAUTORESETCREDIT"] == DBNull.Value ? "N" : dsBiller.Tables[0].Rows[0]["ISAUTORESETCREDIT"].ToString();
                        isSendCreditResetEmail = dsBiller.Tables[0].Rows[0]["ISSENDCREDITRESETEMAIL"] == DBNull.Value ? "N" : dsBiller.Tables[0].Rows[0]["ISSENDCREDITRESETEMAIL"].ToString();

                        if (MapTaxID == "1230000000000")
                        {
                            if (taxxid == "1230000000000")
                            {
                                serviceFlatFee = dsBiller.Tables[0].Rows[0]["SERVICEFLATFEE"].ToString();
                                servicePercent = dsBiller.Tables[0].Rows[0]["SERVICEPERCENTFEE"].ToString();
                                agentFlatFee = dsBiller.Tables[0].Rows[0]["AGENTFLATFEE"].ToString();
                                agentPercent = dsBiller.Tables[0].Rows[0]["AGENTPERCENTFEE"].ToString();
                                oneStopFlatFee = dsBiller.Tables[0].Rows[0]["ONESTOPFLATFEE"].ToString();
                                oneStopPercent = dsBiller.Tables[0].Rows[0]["ONESTOPPERCENTFEE"].ToString();
                            }
                            else
                            {
                                //will use servicefees/agentfees and onestopfees from web config for airline that implement at IsValidateInquiryFirstRes123(htt, out taxxid)
                            }
                        }
                        else if (MapTaxID == "0000000000020")//YCDC
                        {


                            string amtToCompare = ConfigurationManager.AppSettings["YCDCMiniumAmount"].ToString();


                            if (double.Parse(amount) <= double.Parse(amtToCompare))
                            {
                                serviceFlatFee = ConfigurationManager.AppSettings["YCDCServiceFlatFee"].ToString();
                                servicePercent = ConfigurationManager.AppSettings["YCDCServicePercentFee"].ToString();
                                agentFlatFee = ConfigurationManager.AppSettings["YCDCAgentFlatFee"].ToString();
                                agentPercent = ConfigurationManager.AppSettings["YCDCAgentPercentFee"].ToString();
                                oneStopFlatFee = ConfigurationManager.AppSettings["YCDCAgentFlatFee"].ToString();
                                oneStopPercent = ConfigurationManager.AppSettings["YCDC1StopPercentFee"].ToString();
                            }
                            else
                            {
                                serviceFlatFee = dsBiller.Tables[0].Rows[0]["SERVICEFLATFEE"].ToString();
                                servicePercent = dsBiller.Tables[0].Rows[0]["SERVICEPERCENTFEE"].ToString();
                                agentFlatFee = dsBiller.Tables[0].Rows[0]["AGENTFLATFEE"].ToString();
                                agentPercent = dsBiller.Tables[0].Rows[0]["AGENTPERCENTFEE"].ToString();
                                oneStopFlatFee = dsBiller.Tables[0].Rows[0]["ONESTOPFLATFEE"].ToString();
                                oneStopPercent = dsBiller.Tables[0].Rows[0]["ONESTOPPERCENTFEE"].ToString();
                            }

                        }
                        else
                        {
                            serviceFlatFee = dsBiller.Tables[0].Rows[0]["SERVICEFLATFEE"].ToString();
                            servicePercent = dsBiller.Tables[0].Rows[0]["SERVICEPERCENTFEE"].ToString();
                            agentFlatFee = dsBiller.Tables[0].Rows[0]["AGENTFLATFEE"].ToString();
                            agentPercent = dsBiller.Tables[0].Rows[0]["AGENTPERCENTFEE"].ToString();
                            oneStopFlatFee = dsBiller.Tables[0].Rows[0]["ONESTOPFLATFEE"].ToString();
                            oneStopPercent = dsBiller.Tables[0].Rows[0]["ONESTOPPERCENTFEE"].ToString();
                        }


                        isAgreement = dsBiller.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString(); //Added By HNT 26-03-2015                     




                        //Added By HNT 03-04-2015
                        if (dsBiller.Tables[1].Rows.Count > 0)
                        {
                            TodayTxnCount = String.IsNullOrEmpty(dsBiller.Tables[1].Rows[0]["TODAYTXNCOUNT"].ToString()) ? "0" : dsBiller.Tables[1].Rows[0]["TODAYTXNCOUNT"].ToString();
                            TodayTxnAmount = String.IsNullOrEmpty(dsBiller.Tables[1].Rows[0]["TODAYTXNAMOUNT"].ToString()) ? "0" : dsBiller.Tables[1].Rows[0]["TODAYTXNAMOUNT"].ToString();
                        }
                        if (dsBiller.Tables[2].Rows.Count > 0)
                        {
                            totalAgentAmount = String.IsNullOrEmpty(dsBiller.Tables[2].Rows[0]["AGENTAMOUNT"].ToString()) ? "0" : dsBiller.Tables[2].Rows[0]["AGENTAMOUNT"].ToString();
                        }

                        if (String.IsNullOrEmpty(amount))
                            amount = "0";

                        if (string.IsNullOrEmpty(serviceFlatFee))
                            serviceFlatFee = "0";
                        if (string.IsNullOrEmpty(servicePercent))
                            servicePercent = "0";

                        if (string.IsNullOrEmpty(agentFlatFee))
                            agentFlatFee = "0";

                        if (string.IsNullOrEmpty(agentPercent))
                            agentPercent = "0";
                        if (string.IsNullOrEmpty(creditterm))
                            creditterm = "0";
                        if (string.IsNullOrEmpty(creditlimit))
                            creditlimit = "0.00";

                        // 123Remit Cashout
                        if (string.IsNullOrEmpty(serviceFee))
                            agentFee = "0";
                        else
                            agentFee = serviceFee;

                        if (MapTaxID == "0000000000007")//663 Remit Calculate  fees as below
                        {
                            #region <-- 663 remit fees calculation -->
                            DataSet ds = new DataSet();
                            string minAmount = string.Empty;
                            string maxAmount = string.Empty;
                            string txnFee = string.Empty;
                            string serviceCharge = string.Empty;
                            string agentCommissionPercent = string.Empty;
                            string superAgentCommissionPercent = string.Empty;
                            if (_agentWCF.get663FeesByAmount(int.Parse(billerid), decimal.Parse(amount),out ds, out errmsg))
                            {
                                minAmount = ds.Tables[0].Rows[0]["MINAMOUNT"].ToString();
                                maxAmount = ds.Tables[0].Rows[0]["MAXAMOUNT"].ToString();
                                txnFee = ds.Tables[0].Rows[0]["TRANSACTIONFEES"].ToString();
                                serviceCharge = ds.Tables[0].Rows[0]["SERVICECHARGE"].ToString();
                                agentCommissionPercent = ds.Tables[0].Rows[0]["AGENTCOMMISSIONPERCENT"].ToString();
                                superAgentCommissionPercent = ds.Tables[0].Rows[0]["SUPERAGENTCOMMISSIONPERCENT"].ToString();
                                writeLog("amount range:" + minAmount + "to" + maxAmount + "|TransactionFees:" + txnFee + "|ServiceCharge:" + serviceCharge + "|AgentCommissionPercent:" + agentCommissionPercent + "|SuperAgentComissionPercent:" + superAgentCommissionPercent);
                                serviceFeeDbl = (double.Parse(txnFee) + double.Parse(serviceCharge));
                                serviceFee = serviceFeeDbl.ToString("###0.00");
                                totalAmount = (double.Parse(amount) + serviceFeeDbl).ToString("###0.00");

                                oneStopFeeDbl = ((double.Parse(txnFee) + double.Parse(serviceCharge)) - ((double.Parse(txnFee) * double.Parse(agentCommissionPercent)) / 100));
                                oneStopFee = oneStopFeeDbl.ToString("###0.00");

                                agentFeeDbl = 0;
                                agentAmount = double.Parse(amount) - agentFeeDbl;
                                agentAmount += oneStopFeeDbl;
                                writeLog("Amount : " + amount + " | ServiceFee : " + serviceFee +
                               " | AgentFee : " + agentFee + " | 1-Stop Fee : " + oneStopFee.ToString() +
                               " | AgentAmount : " + agentAmount.ToString());
                            }

                            else
                            {
                                writeLog("Error In Getting 663 Service Fees");
                                return Utils.getErrorRes("06", "Transaction not successful cannot calculate service fees.");
                            }
                            #endregion
                        }
                        else if (MapTaxID == "0000000000009")
                        {
                            #region <-- 663 Cashout fees calculation -->
                            DataSet ds = new DataSet();
                            string minAmount = string.Empty;
                            string maxAmount = string.Empty;
                            string txnFee = string.Empty;
                            string serviceCharge = string.Empty;
                            string agentCommissionPercent = string.Empty;
                            string superAgentCommissionPercent = string.Empty;
                            if (_agentWCF.get663FeesByAmount(int.Parse(billerid), decimal.Parse(amount),out ds, out errmsg))
                            {
                                minAmount = ds.Tables[0].Rows[0]["MINAMOUNT"].ToString();
                                maxAmount = ds.Tables[0].Rows[0]["MAXAMOUNT"].ToString();
                                txnFee = ds.Tables[0].Rows[0]["TRANSACTIONFEES"].ToString();
                                serviceCharge = ds.Tables[0].Rows[0]["SERVICECHARGE"].ToString();
                                agentCommissionPercent = ds.Tables[0].Rows[0]["AGENTCOMMISSIONPERCENT"].ToString();
                                superAgentCommissionPercent = ds.Tables[0].Rows[0]["SUPERAGENTCOMMISSIONPERCENT"].ToString();
                                writeLog("amount range:" + minAmount + "to" + maxAmount + "|TransactionFees:" + txnFee + "|ServiceCharge:" + serviceCharge + "|AgentCommissionPercent:" + agentCommissionPercent + "|SuperAgentComissionPercent:" + superAgentCommissionPercent);

                                //serviceFeeDbl = (double.Parse(txnFee) + double.Parse(serviceCharge));
                                serviceFeeDbl = double.Parse(serviceCharge);
                                serviceFee = serviceFeeDbl.ToString("###0.00");
                                totalAmount = (double.Parse(amount) + serviceFeeDbl).ToString("###0.00");

                                //  oneStopFeeDbl = ((double.Parse(txnFee) + double.Parse(serviceCharge)) - ((double.Parse(txnFee) * double.Parse(agentCommissionPercent)) / 100));
                                oneStopFeeDbl = 0;
                                oneStopFee = oneStopFeeDbl.ToString("###0.00");

                                agentFeeDbl = ((double.Parse(txnFee) * double.Parse(agentCommissionPercent)) / 100);
                                agentAmount = double.Parse(amount) + agentFeeDbl;
                                agentAmount += oneStopFeeDbl;
                                writeLog("Amount : " + amount + " | ServiceFee : " + serviceFee +
                               " | AgentFee : " + agentFee + " | 1-Stop Fee : " + oneStopFee.ToString() +
                               " | AgentAmount : " + agentAmount.ToString());
                            }

                            else
                            {
                                writeLog("Error In Getting 663 Service Fees");
                                return Utils.getErrorRes("06", "Transaction not successful cannot calculate service fees.");
                            }
                            #endregion
                        }
                        else
                        {

                            //Calculate Agent Fee
                            serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));
                            serviceFee = serviceFeeDbl.ToString("###0.00"); // For Log Only

                            // totalAmount is to show in SMS only
                            if (MapTaxID == "0000000000026")//MyKyaeCashOut
                                totalAmount = (double.Parse(amount) - serviceFeeDbl).ToString("###0.00");
                            else
                                totalAmount = (double.Parse(amount) + serviceFeeDbl).ToString("###0.00");

                            oneStopFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(oneStopPercent), double.Parse(oneStopFlatFee));
                            oneStopFee = oneStopFeeDbl.ToString("###0.00"); // For log only                            

                            agentFeeDbl = Utils.getFeeNotRound(double.Parse(amount), float.Parse(agentPercent), double.Parse(agentFlatFee));
                            agentAmount = double.Parse(amount) - agentFeeDbl;

                            agentAmount += oneStopFeeDbl;
                            //  }

                            writeLog("Amount : " + amount + " | ServiceFee : " + serviceFee +
                                " | AgentFee : " + agentFee + " | 1-Stop Fee : " + oneStopFee.ToString() +
                                " | AgentAmount : " + agentAmount.ToString());

                        }

                        // agentFeeDbl = double.Parse((double.Parse(agentFee)).ToString("#,##0.00"));//Utils.getAmountDBL(agentFee);

                        // amt = double.Parse((double.Parse(amount)).ToString("#,##0.00"));

                        //doSMS = true;
                        double avlBal = 0;
                        double ledBal = 0;

                        if (isAgreement == "N")
                        {
                            if (MapTaxID != "7777777777777" && MapTaxID != ConfigurationManager.AppSettings["123RemitCashOut"].ToString() && MapTaxID != "0000000000018" && MapTaxID != "0000000000009" && MapTaxID != "0000000000010" && MapTaxID != "0000000000011")//if not MalarMyaineRedeem,123RemitCashOut , MalarMyaineCodeGenerate , 663 Cashout , MercyCorps Generate,MercyCorpsRedeem will check balance.
                            {
                                #region <-- Balance Base -->
                                writeLog("AGREEMENT TYPE is N. Balance must be available.");
                                if (!_agentWCF.getBalance(agentID,out avlBal, out ledBal))
                                {
                                    writeLog("Error in getBalance");
                                }

                                if (avlBal >= agentAmount)
                                {
                                    writeLog("Balance Enough = Agent ID : " + agentID.ToString() + " | Balance : " + avlBal.ToString());

                                    CreditLimitResultModel result = new CreditLimitResultModel();
                                    CreditLimitModel CreditLimitMdl = new CreditLimitModel();
                                    CreditLimitMdl.totalAgentAmount = totalAgentAmount;
                                    result = isEnoughCreditTermsAndLimit(CreditLimitMdl);
                                    if (!result.result)
                                    {
                                        return Utils.getErrorRes(result.rescode, result.resdesc);
                                    }



                                }
                                else
                                {
                                    writeLog("Balance NOT Enough = Agent ID : " + agentID.ToString() + " | Balance : " + avlBal.ToString());

                                    rescode = "10";
                                    resdecs = "Insufficient amount. Please load your balance.";


                                    return Utils.getErrorRes(rescode, resdecs);
                                }
                                #endregion
                            }
                        }
                        else
                        {
                            //if (MapTaxID != "7777777777777")
                            //{
                            if (MapTaxID == "0000000000009")//if biller taxid is 663 Check To reject Non Balance Base User
                            {
                                writeLog("Non Balance Base Agent is Not Allow to do 663 CashOut");
                                return Utils.getErrorRes("10", "Agent not allowed");
                            }

                            writeLog("Agent Total Amount : " + totalAgentAmount);
                            writeLog("AGREEMENT TYPE is Y. Balance will not be needed.");
                            writeLog("Credit term Startdate:" + credittemrstart);
                            writeLog("CreditLimit:" + creditlimit);
                            writeLog("CreditTerm:" + creditterm);
                            CreditLimitResultModel result = new CreditLimitResultModel();
                            CreditLimitModel CreditLimitMdl = new CreditLimitModel();
                            CreditLimitMdl.totalAgentAmount = totalAgentAmount;
                            result = isEnoughCreditTermsAndLimit(CreditLimitMdl);
                            if (!result.result)
                            {
                                return Utils.getErrorRes(result.rescode, result.resdesc);
                            }
                        }
                    }
                    else
                    {
                        rescode = "01";
                        resdecs = "Invalid Services";

                        return Utils.getErrorRes(rescode, resdecs);
                    }
                    #endregion
                }
                else
                {
                    rescode = "01";
                    resdecs = "Invalid Services";

                    return Utils.getErrorRes(rescode, resdecs);

                }

                long txnID = 0;
                string transactionDateTime = "";
                int batchID = 0;
                amt = double.Parse((double.Parse(amount)).ToString("#,##0.00"));
                double tempServiceFeeDbl = 0;
                if (MapTaxID == ConfigurationManager.AppSettings["123RemitCashIn"].ToString() || MapTaxID == ConfigurationManager.AppSettings["123RemitCashOut"].ToString())
                {
                    tempServiceFeeDbl = serviceFeeDbl;
                    serviceFeeDbl = Convert.ToDouble(agentFee);
                }

                #region <-- Insert Transaction Region -->
                try
                {
                    if (_agentWCF.getTransactionByMsgID(messageid))
                    {
                        writeLog("MessageID:" + messageid);
                        if (MapTaxID == "0000000000019")
                        {
                            #region <-- If Tax ID is GRAND GUARDIAN -->
                            if (_agentWCF.getTransactionByPolicyNo(ref1))
                            {
                                #region CheckFraud

                               try
                                {
                                    if (!CheckFraud(out errmsg, 0, email, billerid.ToString(), branchCode, agentCode, amt.ToString()))
                                    {
                                        writeLog("Check Fraud Fail : " + errMsg);
                                        rescode = "01";
                                        resdecs = errmsg;

                                        return Utils.getErrorRes(rescode, resdecs);
                                    }
                                }
                                catch (Exception)
                                {
                                }
                                #endregion

                                #region <-- IF Policy No Is Not Duplicated Do Insert Transaction -->
                                if (!_agentWCF.insertTransactionWithDeductBalance(billerid, agentID, email, "MMK", "MM", ref1, ref2, ref3, ref4, ref5, agentCode, amt, serviceFeeDbl, oneStopFeeDbl, "OVERTHECOUNTER", email, version,
                                                      locLatitude, locLongitude, productdesc, "", branchCode, "", appType, messageid, isAgreement, agentAmount,out  txnID, out transactionDateTime, out  errMsg, out  batchID, out  availablebalance, out  ledgerbalance))
                                {

                                    writeLog("Error in insertTransaction : " + errMsg);
                                    rescode = "01";
                                    resdecs = "Error in Transaction";

                                    return Utils.getErrorRes(rescode, resdecs);
                                }
                                else
                                {
                                    writeLog("After Insert Agent With Deduct Balance TXN ID : " + txnID.ToString() + " | BILLER ID : " + billerid + " | Agent ID:" + agentID + " | AvailableBalance:" + availablebalance + " | LedgerBalance :" + ledgerbalance);
                                }
                                #endregion
                            }
                            else
                            {

                                writeLog("This is Duplicated Policy No GGI");
                                rescode = "01";
                                resdecs = "Duplicated Policy No";

                                return Utils.getErrorRes(rescode, resdecs);
                            }
                            #endregion
                        }
                        else
                        {
                            string REFF3 = string.Empty;
                            string REFF5 = string.Empty;
                            if (topupType == "A")
                            {
                                REFF3 = "Airtime";
                                REFF5 = ref3;
                            }
                            else
                            {
                                REFF3 = ref3;
                                REFF5 = ref5;
                            }
                            if (MapTaxID != "7777777777777" && MapTaxID != ConfigurationManager.AppSettings["123RemitCashOut"].ToString() && MapTaxID != "0000000000018" && MapTaxID != "0000000000009" && MapTaxID != "0000000000010" && MapTaxID != "0000000000011")
                            {
                                #region CheckFraud
                                //TEST

                                try
                                {
                                    if (!CheckFraud(out errmsg, 0, email, billerid.ToString(), branchCode, agentCode, amt.ToString()))
                                    {
                                        writeLog("Check Fraud Fail : " + errMsg);
                                        rescode = "01";
                                        resdecs = errmsg;

                                        return Utils.getErrorRes(rescode, resdecs);
                                    }
                                }
                                catch (Exception)
                                {
                                }
                                #endregion

                                //#region <-- If MapTaxID is not contain above Non-Balance Base MapTaxID (Insert Transaction With Balance Deduction) -->
                                if (!_agentWCF.insertTransactionWithDeductBalance(billerid, agentID, email, "MMK", "MM", ref1, ref2, REFF3, ref4, REFF5, agentCode, amt, serviceFeeDbl, oneStopFeeDbl, "OVERTHECOUNTER", email, version,
                                                     locLatitude, locLongitude, productdesc, "", branchCode, "", appType, messageid, isAgreement, agentAmount,out  txnID, out transactionDateTime, out  errMsg, out  batchID, out  availablebalance, out  ledgerbalance))
                                {

                                    writeLog("Error in insertTransaction : " + errMsg);
                                    rescode = "01";
                                    resdecs = "Error in Transaction";

                                    return Utils.getErrorRes(rescode, resdecs);
                                }
                                else
                                {
                                    writeLog("After Insert Agent With Deduct Balance AgentAmount:" + agentAmount + "| TXN ID : " + txnID.ToString() + " | BILLER ID : " + billerid + " | Agent ID:" + agentID + " | AvailableBalance:" + availablebalance + " | LedgerBalance :" + ledgerbalance);
                                    if (MapTaxID.Trim() == ConfigurationManager.AppSettings["123RemitCashOut"].ToString() || MapTaxID.Trim() == ConfigurationManager.AppSettings["123RemitCashIn"].ToString())
                                    {
                                        ServiceFeeFor123Remit = serviceFeeDbl.ToString();
                                        serviceFeeDbl = tempServiceFeeDbl;
                                    }
                                }
                                #endregion
                            }
                            else
                            {
                                #region CheckFraud

                                try
                                {
                                    if (!CheckFraud(out errmsg, 0, email, billerid.ToString(), branchCode, agentCode, amt.ToString()))
                                    {
                                        writeLog("Check Fraud Fail : " + errMsg);
                                        rescode = "01";
                                        resdecs = errmsg;

                                        return Utils.getErrorRes(rescode, resdecs);
                                    }
                                }
                                catch (Exception)
                                {
                                }
                                #endregion

                                #region <-- If MapTaxID is contain above Non-Balance Base MapTaxID (Insert Transaction Without Balance Deduction) -->
                                if (!_agentWCF.insertTransaction(billerid, agentID,email, "MMK", "MM", ref1, ref2, REFF3, ref4, REFF5, agentCode, amt, serviceFeeDbl, oneStopFeeDbl, "OVERTHECOUNTER", email, version,
                                                  locLatitude, locLongitude, productdesc, "", branchCode, "", appType, messageid,out txnID, out errMsg, out batchID))
                                {

                                    writeLog("Error in insertTransaction : " + errMsg);
                                    rescode = "01";
                                    resdecs = "Error in Transaction";

                                    return Utils.getErrorRes(rescode, resdecs);
                                }
                                else
                                {
                                    writeLog("TXN ID : " + txnID.ToString() + " | BILLER ID : " + billerid);
                                    if (MapTaxID.Trim() == ConfigurationManager.AppSettings["123RemitCashOut"].ToString() || MapTaxID.Trim() == ConfigurationManager.AppSettings["123RemitCashIn"].ToString())
                                    {
                                        ServiceFeeFor123Remit = serviceFeeDbl.ToString();
                                        serviceFeeDbl = tempServiceFeeDbl;
                                    }
                                }
                                #endregion
                            }
                        }
                    }
                    else
                    {
                        writeLog("This is Duplicated request");
                        rescode = "01";
                        resdecs = "Your transaction may be successful. Please go to History";

                        return Utils.getErrorRes(rescode, resdecs);

                    }
                }
                catch (Exception ex)
                {
                    writeLog("Exception in insertTransaction : " + ex.ToString());

                    rescode = "01";
                    resdecs = "Error in Transaction";

                    return Utils.getErrorRes(rescode, resdecs);
                }
                

                // }


                bool TopUpHistory = false;
                bool AddAmountToUser = false;

                try
                {

                    #region <-- 123 Biller -->
                    if (MapTaxID == "1230000000000") //|| MapTaxID == "0000000000010" || MapTaxID == "0000000000012" || taxID == "0000000000011" || taxID == "0000000000009" || taxID == "0000000000008" || taxID == "0000000000007" || taxID == "0000000000013" || taxID == "0000000000014")/////For 123API
                    {
                        writeLog("This is 1-2-3.");

                        string amountTo123 = Utils.getFromOrginalTo12Digit(amount);
                        // Version+ TimeStamp+ MessageID + AgentCode+ PaymentCode 
                        string agentcode = ConfigurationManager.AppSettings["123ChannelCode"].ToString(); //"1STOP";
                        // Version+ TimeStamp+ MessageID + AgentCode+ PaymentCode + InvoiceNo + Amount + ConfirmedBy+ LocLatitude + LocLongitude
                        string hashstr = Utils.hashstrConfirmReq123(version, ts, messageid, agentcode, ref1, ref2, amountTo123, confirmedby, locLatitude, locLongitude);

                        string reqXML123 = "<ConfirmReq><Version>" + version + "</Version><TimeStamp>" + ts
                            + "</TimeStamp><MessageID>" + messageid + "</MessageID>"
                            + "<AgentCode>" + agentcode
                            + "</AgentCode><PaymentCode>" + ref1
                            + "</PaymentCode><InvoiceNo>" + ref2
                            + "</InvoiceNo><Amount>" + amountTo123
                            + "</Amount><ConfirmedBy>" + confirmedby + "</ConfirmedBy><LocLatitude>" + locLatitude
                            + "</LocLatitude><LocLongitude>" + locLongitude
                            + "</LocLongitude><TranRef>" + txnID + "</TranRef><HashValue>" + hashstr
                            + "</HashValue></ConfirmReq>";
                        RouteAPI api_service = new RouteAPI();
                        //writeLog("123 Confirm Req : " + reqXML123);

                        double avalbal = 0;
                        double legbal = 0;

                        if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmReq", reqXML123,out errMsg))
                        {
                            writeLog("Error in InsertTransactionLog Req : " + errMsg);
                        }

                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            #region <-- When Simulator is turn on -->
                            writeLog("Simulator Y");


                            #region <-- Edit by Tz -->

                            int batchid = 0;
                            //double availablebalance = 0;
                            //double ledgerbalance = 0;
                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                        agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);

                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            ConfirmResponseModel conRes = new ConfirmResponseModel();
                            conRes.taxID = taxID;
                            conRes.email = email;
                            conRes.password = password;
                            conRes.messageid = messageid;
                            conRes.billerlogo = billerLogo;
                            conRes.billername = billerName;
                            conRes.rescode = "00";
                            conRes.resdesc = "Successed";
                            conRes.ref1 = ref1;
                            conRes.ref2 = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                            conRes.ref3 = string.Empty;
                            conRes.ref4 = string.Empty;
                            conRes.ref5 = string.Empty;
                            conRes.ref1Name = "Payment Code";
                            conRes.ref2Name = "Invoice No";
                            conRes.ref3Name = ref3Name;
                            conRes.ref4Name = ref4Name;
                            conRes.ref5Name = ref5Name;
                            conRes.availablebalance = availablebalance.ToString();
                            conRes.txnID = txnID.ToString();
                            conRes.TodayTxnCount = TodayTxnCount;
                            conRes.TodayTxnAmount = TodayTxnAmount;
                            conRes.smsMsg = smsMsg;
                            return Utils.getConfirmRes(conRes);
                            #endregion Edit by Tz
                            #endregion
                        }
                        else
                        {
                            writeLog("123 Confirm Req : " + reqXML123);
                            try
                            {
                                response = api_service.Apicalling123(reqXML123);

                                writeLog("123 Confirm Res : " + response);
                            }
                            catch (Exception ex)
                            {
                                writeLog("Exception Error in Confirm Request :" + ex.Message);
                                writeLog("$$$$$$$$$$$$Enter to cache Block$$$$$$$$$$$$$$$");
                                string msg = string.Empty;
                                // sendmail("TEST", "1000", out msg);
                                ///  sendmail123Error(this.agentCode, this.agentName, ref1, ex.Message.ToString(), out msg);
                                //  string agentcode = "1STOP";
                                #region <-- When exception was occur at confirm request Re check 123 Payment Status if Status respose is paid already update 1Stop transaction to Paid -->
                                string hashstrs = Utils.hashstrReq123(version, ts, messageid, agentcode, ref1);

                                #region <-- Inquiry request for check 123 paid status -->

                                string checkstatusreqXML123 = "<InquiryReq><Version>" + version + "</Version><TimeStamp>" + ts
                                    + "</TimeStamp>"
                                    + "<MessageID>" + messageid + "</MessageID>"
                                    + "<AgentCode>" + agentcode + "</AgentCode>"
                                   + "<PaymentCode>" + ref1
                                    + "</PaymentCode><RequestBy>" + taxID
                                    + "</RequestBy><Hash>" + hashstrs
                                    + "</Hash></InquiryReq>";
                                #endregion
                                writeLog("Exception Error Occur at 1-2-3 confirm request recheck payment status of 123 Request:" + checkstatusreqXML123);
                                response = api_service.Apicalling123(checkstatusreqXML123);
                                writeLog("123 Inquiry Res After Getting payment status Request  for reaponse timeout exception handler: " + response);


                                Hashtable htts = Utils.getHTableFromXML(response);
                                string tempcode = string.Empty;
                                string tempdesp = string.Empty;
                                string tempmerchantid = string.Empty;
                                string tempmerchantname = string.Empty;
                                string tempRef1 = string.Empty;
                                string tempRef2 = string.Empty;
                                string tempamt = string.Empty;
                                string tempproductdesc = string.Empty;
                                string tempstatus = string.Empty;
                                string tempexpiry = string.Empty;

                                StringBuilder sbs = new StringBuilder();
                                //  out  version, out ts, out  messageid, out agentcode, out  code, out  desp, out  merchantid, out  merchantname, out  ref1, out  ref2, out  amount, out  productdesc, out  status, out expiry
                                if (!IsValidateInquiryRes123(htts, taxID, out  version, out ts, out  messageid, out agentcode, out  tempcode, out  tempdesp, out  tempmerchantid, out  tempmerchantname, out  tempRef1, out  tempRef2, out  tempamt, out  tempproductdesc, out  tempstatus, out tempexpiry))
                                {
                                    return Utils.getErrorRes(tempcode, tempdesp);
                                }
                                if (tempcode == "02")
                                {
                                    #region <-- If status is PA doing this -->
                                    int batchid = 0;
                                    //double availablebalance = 0;
                                    //double ledgerbalance = 0;

                                    mobileNo = ref3;
                                    if (!_agentWCF.ConfirmUpdate(txnID,ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                                 agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                    {
                                        writeLog("Error in ConfirmUpdate : " + errMsg);

                                    }
                                    else
                                    {
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                                    }
                                    // writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                    if (appType == "CS" || appType == "MS")
                                    {
                                        writeLog("**********Service Fees:************" + serviceFee.ToString());
                                        SMSHelper smsH = new SMSHelper();
                                        smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();

                                        smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, ref2Name, "", "Ref", ref1, ref2, "", txnID.ToString(),
                                            double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);


                                        try
                                        {
                                            writeLog("sendSMSWithTxnID starts.");
                                            //smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                            writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                            smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                            writeLog("sendSMSWithTxnID ends.");
                                        }
                                        catch (Exception exs)
                                        {
                                        }
                                    }


                                    ConfirmResponseModel conRes = new ConfirmResponseModel();
                                    conRes.taxID = taxID;
                                    conRes.email = email;
                                    conRes.password = password;
                                    conRes.messageid = messageid;
                                    conRes.billerlogo = billerLogo;
                                    conRes.billername = billerName;
                                    conRes.rescode = "00";
                                    conRes.resdesc = "Successed";
                                    conRes.ref1 = ref1;
                                    conRes.ref2 = ref2;
                                    conRes.ref3 = string.Empty;
                                    conRes.ref4 = string.Empty;
                                    conRes.ref5 = mobileNo;
                                    conRes.ref1Name = ref1Name;
                                    conRes.ref2Name = ref2Name;
                                    conRes.ref3Name = ref3Name;
                                    conRes.ref4Name = ref4Name;
                                    conRes.ref5Name = ref5Name;
                                    conRes.availablebalance = availablebalance.ToString();
                                    conRes.txnID = txnID.ToString();
                                    conRes.TodayTxnCount = TodayTxnCount;
                                    conRes.TodayTxnAmount = TodayTxnAmount;
                                    conRes.smsMsg = smsMsg;
                                    return Utils.getConfirmRes(conRes);
                                    #endregion

                                }
                                #endregion
                            }
                        }

                        if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmRes", response,out errMsg))
                        {
                            writeLog("Error in InsertTransactionLog Res : " + errMsg);
                        }

                        Hashtable htt = Utils.getHTableFromXML(response);
                        //writeLog("123 Confirm Res : " + response);
                        // break response from Biller 
                        StringBuilder sb = new StringBuilder();
                        mobileNo = ref3;
                        if (!IsValidateConfirmRes123(htt, out  rescode, out  resdecs, out  version, out  ts, out  rescode, out  resdecs))
                        {
                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                        if (rescode != "00")
                        {
                            // rescode = "01";                           
                            //double availablebalance = 0;


                            if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                            {
                                writeLog("Error in updateError : " + errMsg);
                            }

                            ConfirmResponseModel conRes = new ConfirmResponseModel();
                            conRes.taxID = taxID;
                            conRes.email = email;
                            conRes.password = password;
                            conRes.messageid = messageid;
                            conRes.billerlogo = billerLogo;
                            conRes.billername = billerName;
                            conRes.rescode = rescode;
                            conRes.resdesc = resdecs;
                            conRes.ref1 = ref1;
                            conRes.ref2 = ref2;
                            conRes.ref3 = string.Empty;
                            conRes.ref4 = string.Empty;
                            conRes.ref5 = mobileNo;
                            conRes.ref1Name = ref1Name;
                            conRes.ref2Name = ref2Name;
                            conRes.ref3Name = ref3Name;
                            conRes.ref4Name = ref4Name;
                            conRes.ref5Name = ref5Name;
                            conRes.availablebalance = availablebalance.ToString();
                            conRes.txnID = txnID.ToString();
                            conRes.TodayTxnCount = TodayTxnCount;
                            conRes.TodayTxnAmount = TodayTxnAmount;
                            conRes.smsMsg = smsMsg;
                            return Utils.getConfirmRes(conRes);
                        }
                        else
                        {
                            int batchid = 0;
                            //double availablebalance = 0;
                            //double ledgerbalance = 0;

                            if (!_agentWCF.ConfirmUpdate(txnID,ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                         agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);

                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }
                            // writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                            if (appType == "CS" || appType == "MS")
                            {
                                writeLog("**********Service Fees:************" + serviceFee.ToString());
                                SMSHelper smsH = new SMSHelper();
                                smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();

                                smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, ref2Name, "", "Ref", ref1, ref2, "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                try
                                {
                                    writeLog("sendSMSWithTxnID starts.");

                                    writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                    writeLog("sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {
                                }
                            }
                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                            ConfirmResponseModel conRes = new ConfirmResponseModel();
                            conRes.taxID = taxID;
                            conRes.email = email;
                            conRes.password = password;
                            conRes.messageid = messageid;
                            conRes.billerlogo = billerLogo;
                            conRes.billername = billerName;
                            conRes.rescode = rescode;
                            conRes.resdesc = resdecs;
                            conRes.ref1 = ref1;
                            conRes.ref2 = ref2;
                            conRes.ref3 = string.Empty;
                            conRes.ref4 = string.Empty;
                            conRes.ref5 = mobileNo;
                            conRes.ref1Name = ref1Name;
                            conRes.ref2Name = ref2Name;
                            conRes.ref3Name = ref3Name;
                            conRes.ref4Name = ref4Name;
                            conRes.ref5Name = ref5Name;
                            conRes.availablebalance = availablebalance.ToString();
                            conRes.txnID = txnID.ToString();
                            conRes.TodayTxnCount = TodayTxnCount;
                            conRes.TodayTxnAmount = TodayTxnAmount;
                            conRes.smsMsg = smsMsg;
                            return Utils.getConfirmRes(conRes);
                        }
                        // }
                    }
                    #endregion

                    #region <-- Putet Tz -->
                    else if (MapTaxID == "0000000000006") /////For PutetAPI
                    {


                        //<PINReq> 
                        // <Version>1.0</Version> 
                        // <TimeStamp>yyyyMMddhhmmssffff</TimeStamp> 
                        // <MessageID>eee43434333</MessageID> 
                        // <PINType></PINType> 
                        // <Amount></Amount>
                        // <HashValue></HashValue> 
                        //     </PINReq>


                        //                  <Version>1.0</Version>
                        //<TimeStamp>2015-05-22 18:29:40:238</TimeStamp>
                        //<MessageID>dfea8909-b7f9-456f-8ab1-79a8d51a5b86</MessageID>
                        //<PINType>3M</PINType>
                        //<Amount>000000148500</Amount>

                        //version = "1.0";
                        //ts = "2015-05-22 18:29:40:238";
                        //messageid = "dfea8909-b7f9-456f-8ab1-79a8d51a5b86";
                        //ref1 = "3M";
                        //amount = "1485";
                        writeLog("This is Putet.");
                        int batchid = 0;
                        //double availablebalance = 0;
                        //double ledgerbalance = 0;
                        string amountToPutet = Utils.getFromOrginalTo12Digit(amount);
                        string hashstr = Utils.hashstrConfirmPutetReq(version, ts, messageid, ref1, amountToPutet);
                        double avalbal = 0;
                        double legbal = 0;

                        string reqXMLPutet = "<PINReq><Version>1.0</Version><TimeStamp>" + ts
                            + "</TimeStamp><MessageID>" + messageid + "</MessageID>"
                            + "<PINType>" + ref1 + "</PINType>"
                            + "<Amount>" + amountToPutet + "</Amount>"

                            + "<HashValue>" + hashstr.ToLower()
                            + "</HashValue></PINReq>";

                        RouteAPI api_service = new RouteAPI();


                        if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmReq", reqXMLPutet,out errMsg))
                        {
                            writeLog("Error in InsertTransactionLog Req : " + errMsg);
                        }
                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            writeLog("Simulator Y");
                            StringBuilder sb = new StringBuilder();

                            //<PINRes> 
                            //<Version>1.0</Version> 
                            //<TimeStamp>yyyyMMddhhmmssffff</TimeStamp> 
                            //<MessageID>eee43434333</MessageID>
                            //<ResCode>00</ResCode>
                            //<ResDesc></ResDesc> 
                            //<PINType></PINType> 
                            //<Amount></Amount> 
                            //<PIN>1234567890123456</PIN> 
                            //<Expiry></Expiry> 
                            //<SerialNo></SerialNo> 
                            //<HashValue></HashValue>
                            // </PINRes>
                            string testpin = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                            string time = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                            string hash = Utils.hashstrConfirmPutetRes(version, time, messageid, "00", "Success", ref1, amount, testpin, "", "54185");
                            string lowercasehash = hash.ToLower();
                            sb.Append("<PINRes>");
                            sb.Append("<Version>1.0</Version>");
                            sb.Append("<TimeStamp>" + time + "</TimeStamp>");//System.DateTime.Now.ToString("yyyyMMddhhmmssffff")
                            sb.Append("<MessageID>" + messageid + "</MessageID>");


                            sb.Append("<ResDesc>" + "Success" + "</ResDesc>");
                            sb.Append("<PINType>" + ref1 + "</PINType>");
                            sb.Append("<Amount>" + amount + "</Amount>");
                            sb.Append("<PIN>" + testpin + "</PIN>");
                            sb.Append("<Expiry></Expiry>");
                            sb.Append("<SerialNo>" + "54185" + "</SerialNo>");
                            sb.Append("<ResCode>00</ResCode>");
                            sb.Append("<HashValue>" + lowercasehash + "</HashValue>");
                            sb.Append("</PINRes>");
                            // writeLog("RES XML : " + sb.ToString());
                            response = sb.ToString();
                            // return sb.ToString();
                        }
                        else
                        {
                            writeLog("Putet Confirm Req : " + reqXMLPutet);
                            response = api_service.ApicallingPutet(reqXMLPutet);
                            writeLog("Putet Confirm Res : " + response);
                        }
                        if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmRes", response,out errMsg))
                        {
                            writeLog("Error in InsertTransactionLog Res : " + errMsg);
                        }
                        Hashtable htt = Utils.getHTableFromXML(response);

                        // break response from Biller 
                        mobileNo = ref3;
                        if (!IsValidateConfirmReqPutet(htt, out rescode, out resdecs, out version,
                            out messageid, out ref1, out ref2, out ref3))
                        {

                            writeLog("Error in IsValidateConfirmReqPutet : " + resdecs);
                            return GeterrorResponse(rescode, resdecs, txnID, resdecs);

                        }
                        if (rescode != "00")
                        {

                            if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                            {
                                writeLog("Error in updateError : " + errMsg);
                            }

                            ConfirmResponseModel conRes = new ConfirmResponseModel();
                            conRes.taxID = taxID;
                            conRes.email = email;
                            conRes.password = password;
                            conRes.messageid = messageid;
                            conRes.billername = billerName;
                            conRes.billerlogo = billerLogo;
                            conRes.rescode = rescode;
                            conRes.resdesc = resdecs;
                            conRes.ref1 = ref1;
                            conRes.ref2 = ref2;
                            conRes.ref3 = string.Empty;
                            conRes.ref4 = ref3;
                            conRes.ref5 = mobileNo;
                            conRes.ref1Name = ref1Name;
                            conRes.ref2Name = ref2Name;
                            conRes.ref3Name = string.Empty;
                            conRes.ref4Name = ref3Name;
                            conRes.ref5Name = ref5Name;
                            conRes.batchID = batchid.ToString();
                            conRes.availablebalance = availablebalance.ToString();
                            conRes.txnID = txnID.ToString();
                            conRes.TodayTxnCount = TodayTxnCount;
                            conRes.TodayTxnAmount = TodayTxnAmount;
                            conRes.smsMsg = smsMsg;
                            return Utils.getConfirmRes(conRes);


                        }
                        else
                        {
                            writeLog("***************Enter Confirm Update *******************");
                            //if (_agentWCF.ConfirmUpdate(out  errMsg, out  batchID, out  availablebalance, out  ledgerbalance, txnID,
                            //    ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                            //    agentAmount, agentFeeDbl, isAgreement))
                            //{
                            //    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            if (!_agentWCF.ConfirmUpdate(txnID,ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                     agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);

                                resdecs = "Error in update database";
                                rescode = "06";
                                //if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                                //{
                                //    writeLog("Error in updateError : " + errMsg);
                                //}
                                //return Utils.getErrorRes(rescode, "Transaction fail");
                                return GetErrorResponseWithAddBalance(rescode, "Transaction fail", txnID, resdecs, agentID, agentAmount, isAgreement);
                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            SMSHelper smsH = new SMSHelper();
                            ref2 = (ref2 == "3M" ? "3-Month" : ref2 == "6M" ? "6-Month" : "12-Month");
                            // amount = (ref2 == "3M" ? "1500" : ref2 == "6M" ? "3000" : "6000");
                            // totalAmount = (ref2 == "3M" ? "1500" : ref2 == "6M" ? "3000" : "6000");
                            smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Duration", "", "Ref", ref3, ref2, "", txnID.ToString(),
                                double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);
                            if (appType == "CS" || appType == "MS")
                            {

                                smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();


                                try
                                {
                                    writeLog("sendSMSWithTxnID starts.");
                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                    writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                    writeLog("sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {
                                }
                            }

                            ConfirmResponseModel conRes = new ConfirmResponseModel();
                            conRes.taxID = taxID;
                            conRes.email = email;
                            conRes.password = password;
                            conRes.messageid = messageid;
                            conRes.billername = billerName;
                            conRes.billerlogo = billerLogo;
                            conRes.rescode = rescode;
                            conRes.resdesc = resdecs;
                            conRes.ref1 = ref1;
                            conRes.ref2 = ref2;
                            conRes.ref3 = string.Empty;
                            conRes.ref4 = ref3;
                            conRes.ref5 = mobileNo;
                            conRes.ref1Name = ref1Name;
                            conRes.ref2Name = ref2Name;
                            conRes.ref3Name = string.Empty;
                            conRes.ref4Name = ref4Name;
                            conRes.ref5Name = ref5Name;
                            conRes.batchID = batchid.ToString();
                            conRes.availablebalance = availablebalance.ToString();
                            conRes.txnID = txnID.ToString();
                            conRes.TodayTxnCount = TodayTxnCount;
                            conRes.TodayTxnAmount = TodayTxnAmount;
                            conRes.smsMsg = smsMsg;
                            return Utils.getConfirmRes(conRes);

                        }
                    }
                    #endregion

                    #region <-- Easypoing Code Generate Tz 28-sep-2015 -->
                    else if (MapTaxID == "0000000000017") /////For Easy Point/MercyCrop(Shan)/MercyCrop(Rakhine) Code Generate
                    {
                        //                     <ConfirmReq>
                        //   <Version>1.0</Version>
                        //<TimeStamp>yyyyMMddhhmmssffff</TimeStamp>
                        //<MessageID>eee43434333</MessageID>
                        //<AgentID>2</AgentID>
                        //<Amount></Amount> 
                        //<CodeDesc></CodeDesc> 
                        //<ConfirmedBy></ConfirmedBy> //UserEmail
                        //<LocLatitude></LocLatitude>
                        //   <LocLongitude></LocLongitude>
                        //   <HashValue></HashValue>	//MessageID + AgentID + Amount + ConfirmedBy+ LocLatitude + LocLongitude
                        //</ConfirmReq>
                        writeLog("This is EasyPoint DigitalCode Buy.");
                        int batchid = 0;
                        //double availablebalance = 0;
                        //double ledgerbalance = 0;
                        string agnid = string.Empty;
                        ref2 = productdesc;
                        string amountToeasypoint = Utils.getFromOrginalTo12Digit(amount);
                        string easypointid = MapTaxID == "0000000000017" ? ConfigurationManager.AppSettings["easyPointID"].ToString() : ConfigurationManager.AppSettings["easyPointMercyID"].ToString();
                        string key = MapTaxID == "0000000000017" ? ConfigurationManager.AppSettings["easyPointSecretKey"].ToString() : ConfigurationManager.AppSettings["easyPointMercyKey"].ToString();
                        string hashstr = Utils.hashstrConfirmEasyPointReq(messageid, easypointid.ToString(), amountToeasypoint, email, locLatitude, locLongitude, key);
                        double avalbal = 0;
                        double legbal = 0;

                        string reqXMLeasyPoint = "<ConfirmReq><Version>1.0</Version><TimeStamp>" + ts
                            + "</TimeStamp><MessageID>" + messageid + "</MessageID>"
                            + "<AgentID>" + easypointid + "</AgentID>"
                            + "<Amount>" + amountToeasypoint + "</Amount>"
                            + "<ConfirmedBy>" + email + "</ConfirmedBy>"
                            + "<CodeDesc>" + productdesc + "</CodeDesc>"
                            + "<LocLatitude>" + locLatitude + "</LocLatitude>"
                             + "<LocLongitude>" + locLongitude + "</LocLongitude>"

                            + "<HashValue>" + hashstr
                            + "</HashValue></ConfirmReq>";

                        RouteAPI api_service = new RouteAPI();


                        if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmReq", reqXMLeasyPoint,out errMsg))
                        {
                            writeLog("Error in InsertTransactionLog Req : " + errMsg);
                        }
                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            #region <-- If Simulator is on -->
                            writeLog("Simulator Y");
                            //                         <ConfirmRes>
                            //<Version>1.0</Version>
                            //<TimeStamp>yyyyMMddhhmmssffff</TimeStamp>
                            //<MessageID>eee43434333</MessageID>
                            //<AgentID>2</AgentID>
                            //<ResCode>00</ResCode>
                            //<ResDesc></ResDesc>
                            //<DigitalCode></DigitalCode>  // 18 Digit codes
                            //<SerialNo></SerialNo>  // 18 Digit codes
                            //<Expiry></Expiry>  
                            //<HashValue></HashValue> // MessageID + AgentID + ResCode+ ResDesc + DigitalCode + SerialNo + Expiry
                            //</ConfirmRes>

                            StringBuilder sb = new StringBuilder();


                            string testpin = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                            string time = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                            string expirys = System.DateTime.Now.ToShortDateString();
                            string hash = Utils.hashstrConfirmeasypointRes(messageid, easypointid.ToString(), "00", "Success", time, time, expirys, "5000", key);
                            // string lowercasehash = hash.ToLower();
                            sb.Append("<ConfirmRes>");
                            sb.Append("<Version>1.0</Version>");
                            sb.Append("<TimeStamp>" + time + "</TimeStamp>");//System.DateTime.Now.ToString("yyyyMMddhhmmssffff")
                            sb.Append("<MessageID>" + messageid + "</MessageID>");
                            sb.Append("<AgentID>" + easypointid + "</AgentID>");
                            sb.Append("<ResCode>00</ResCode>");
                            sb.Append("<ResDesc>" + "Success" + "</ResDesc>");
                            sb.Append("<DigitalCode>" + time + "</DigitalCode>");
                            sb.Append("<SerialNo>" + time + "</SerialNo>");

                            sb.Append("<Expiry>" + expirys + "</Expiry>");
                            sb.Append("<HashValue>" + hash + "</HashValue>");
                            sb.Append("</ConfirmRes>");
                            // writeLog("RES XML : " + sb.ToString());
                            response = sb.ToString();
                            // return sb.ToString();
                            #endregion
                        }
                        else
                        {
                            writeLog("EasyPoint CodeGenerate Confirm Req : " + reqXMLeasyPoint);
                            response = api_service.ApicallingEasypoint(reqXMLeasyPoint);
                            writeLog("EasyPoint Confirm Res : " + response);
                        }
                        if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmRes", response,out errMsg))
                        {
                            writeLog("Error in InsertTransactionLog Res : " + errMsg);
                        }
                        Hashtable htt = Utils.getHTableFromXML(response);

                        // break response from Biller 
                        mobileNo = ref3;
                        // messageid = string.Empty;
                        if (!IsValidateConfirmResEasyPoint(htt, MapTaxID, out  rescode, out  resdecs, out  version, out  messageid, out  ref1, out  ref3, out  agnid))
                        {

                            writeLog("Error in IsValidateConfirmResEasypoint : " + resdecs);
                            //return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);

                        }
                        if (rescode != "00")
                        {

                            if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                            {
                                writeLog("Error in updateError : " + errMsg);
                            }


                            ConfirmResponseModel conRes = new ConfirmResponseModel();
                            conRes.taxID = taxID;
                            conRes.email = email;
                            conRes.password = password;
                            conRes.messageid = messageid;
                            conRes.billername = billerName;
                            conRes.billerlogo = billerLogo;
                            conRes.rescode = rescode;
                            conRes.resdesc = resdecs;
                            conRes.ref1 = ref1;
                            conRes.ref2 = ref2;
                            conRes.ref3 = string.Empty;
                            conRes.ref4 = ref3;
                            conRes.ref5 = mobileNo;
                            conRes.ref1Name = ref1Name;
                            conRes.ref2Name = ref2Name;
                            conRes.ref3Name = string.Empty;
                            conRes.ref4Name = ref4Name;
                            conRes.ref5Name = ref5Name;
                            conRes.batchID = batchid.ToString();
                            conRes.availablebalance = availablebalance.ToString();
                            conRes.txnID = txnID.ToString();
                            conRes.TodayTxnCount = TodayTxnCount;
                            conRes.TodayTxnAmount = TodayTxnAmount;
                            conRes.smsMsg = smsMsg;
                            return Utils.getConfirmRes(conRes);
                        }
                        else
                        {
                            writeLog("***************Enter Confirm Update *******************");
                            if (MapTaxID == "0000000000017")
                            {
                                if (!_agentWCF.ConfirmUpdate(txnID,ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                         agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                {
                                    writeLog("Error in ConfirmUpdate : " + errMsg);
                                    resdecs = "Error in update database";
                                    rescode = "06";
                                    if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                                    {
                                        writeLog("Error in updateError : " + errMsg);
                                    }
                                    return Utils.getErrorRes(rescode, "Transaction fail");
                                }
                                else
                                {
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                                }
                            }
                            else if (MapTaxID == "0000000000018")
                            {
                                if (!_agentWCF.ConfirmUpdateCashOut(txnID,ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                         agentAmount, agentFeeDbl, isAgreement, smsStatus,out  errMsg, out  batchID, out  avalbal, out  ledgerbalance))
                                {
                                    writeLog("Error in ConfirmUpdate : " + errMsg);
                                    resdecs = "Error in update database";
                                    rescode = "06";
                                    if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                                    {
                                        writeLog("Error in updateError : " + errMsg);
                                    }
                                    return Utils.getErrorRes(rescode, "Transaction fail");

                                }
                                else
                                {
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                                }
                            }

                            SMSHelper smsH = new SMSHelper();
                            smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Description", "", "Ref", ref3, ref2, "", txnID.ToString(),
                                   double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                            if (appType == "CS" || appType == "MS")
                            {
                                smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                // ref2 = (ref2 == "3M" ? "3-Month" : ref2 == "6M" ? "6-Month" : "12-Month");
                                // amount = (ref2 == "3M" ? "1500" : ref2 == "6M" ? "3000" : "6000");
                                // totalAmount = (ref2 == "3M" ? "1500" : ref2 == "6M" ? "3000" : "6000");
                                //smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Description", "", "Ref", ref3, ref2, "", txnID.ToString(),
                                //    double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);
                                try
                                {
                                    writeLog("sendSMSWithTxnID starts.");
                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);

                                    writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                    writeLog("sendSMSWithTxnID ends.");

                                }
                                catch (Exception ex)
                                {
                                }
                            }
                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amt.ToString()), billerName));

                            ConfirmResponseModel conRes = new ConfirmResponseModel();
                            conRes.taxID = taxID;
                            conRes.email = email;
                            conRes.password = password;
                            conRes.messageid = messageid;
                            conRes.billername = billerName;
                            conRes.billerlogo = billerLogo;
                            conRes.rescode = rescode;
                            conRes.resdesc = resdecs;
                            conRes.ref1 = ref1;
                            conRes.ref2 = ref2;
                            conRes.ref3 = string.Empty;
                            conRes.ref4 = string.Empty;
                            conRes.ref5 = mobileNo;
                            conRes.ref1Name = ref1Name;
                            conRes.ref2Name = ref2Name;
                            conRes.ref3Name = string.Empty;
                            conRes.ref4Name = string.Empty;
                            conRes.ref5Name = ref5Name;
                            conRes.batchID = batchid.ToString();
                            conRes.availablebalance = availablebalance.ToString();
                            conRes.txnID = txnID.ToString();
                            conRes.TodayTxnCount = TodayTxnCount;
                            conRes.TodayTxnAmount = TodayTxnAmount;
                            conRes.smsMsg = smsMsg;
                            return Utils.getConfirmRes(conRes);

                        }
                    }
                    #endregion

                    #region <-- MarlarMyine/MercyCorps Code Generate Tz 2017-Feb-07 -->
                    else if (MapTaxID == "0000000000018" || MapTaxID == "0000000000010") ///
                    {
                        writeLog("This is Marlarmyaing DigitalCode Buy.");
                        int batchid = 0;
                        //double availablebalance = 0;
                        //double ledgerbalance = 0;
                        string agnid = string.Empty;
                        string customerName = string.Empty;
                        customerName = ref1;
                        ref2 = productdesc;
                        string amountToeasypoint = Utils.getFromOrginalTo12Digit(amount);
                        string easypointid = MapTaxID == "0000000000010" ? ConfigurationManager.AppSettings["MercycorpsAgentID"].ToString() : ConfigurationManager.AppSettings["easyPointMercyID"].ToString();
                        string key = MapTaxID == "0000000000010" ? ConfigurationManager.AppSettings["MercycorpsGenerateKey"].ToString() : ConfigurationManager.AppSettings["easyPointMercyKey"].ToString();
                        string hashstr = Utils.hashstrConfirmEasyPointReq(messageid, easypointid.ToString(), amountToeasypoint, email, locLatitude, locLongitude, key);
                        double avalbal = 0;
                        double legbal = 0;

                        string reqXMLeasyPoint = "<ConfirmReq><Version>1.0</Version><TimeStamp>" + ts
                            + "</TimeStamp><MessageID>" + messageid + "</MessageID>"
                            + "<AgentID>" + easypointid + "</AgentID>"
                            + "<Amount>" + amountToeasypoint + "</Amount>"
                            + "<ConfirmedBy>" + email + "</ConfirmedBy>"
                            + "<CodeDesc>" + productdesc + "</CodeDesc>"
                            + "<LocLatitude>" + locLatitude + "</LocLatitude>"
                             + "<LocLongitude>" + locLongitude + "</LocLongitude>"

                            + "<HashValue>" + hashstr
                            + "</HashValue></ConfirmReq>";

                        RouteAPI api_service = new RouteAPI();


                        if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmReq", reqXMLeasyPoint,out errMsg))
                        {
                            writeLog("Error in InsertTransactionLog Req : " + errMsg);
                        }
                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            #region <-- If Simulator is on -->
                            writeLog("Simulator Y");
                            //                         <ConfirmRes>
                            //<Version>1.0</Version>
                            //<TimeStamp>yyyyMMddhhmmssffff</TimeStamp>
                            //<MessageID>eee43434333</MessageID>
                            //<AgentID>2</AgentID>
                            //<ResCode>00</ResCode>
                            //<ResDesc></ResDesc>
                            //<DigitalCode></DigitalCode>  // 18 Digit codes
                            //<SerialNo></SerialNo>  // 18 Digit codes
                            //<Expiry></Expiry>  
                            //<HashValue></HashValue> // MessageID + AgentID + ResCode+ ResDesc + DigitalCode + SerialNo + Expiry
                            //</ConfirmRes>

                            StringBuilder sb = new StringBuilder();


                            string testpin = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                            string time = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                            string expirys = System.DateTime.Now.ToShortDateString();
                            string hash = Utils.hashstrConfirmeasypointRes(messageid, easypointid.ToString(), "00", "Success", time, time, expirys, "5000", key);
                            // string lowercasehash = hash.ToLower();
                            sb.Append("<ConfirmRes>");
                            sb.Append("<Version>1.0</Version>");
                            sb.Append("<TimeStamp>" + time + "</TimeStamp>");//System.DateTime.Now.ToString("yyyyMMddhhmmssffff")
                            sb.Append("<MessageID>" + messageid + "</MessageID>");
                            sb.Append("<AgentID>" + easypointid + "</AgentID>");
                            sb.Append("<ResCode>00</ResCode>");
                            sb.Append("<ResDesc>" + "Success" + "</ResDesc>");
                            sb.Append("<DigitalCode>" + time + "</DigitalCode>");
                            sb.Append("<SerialNo>" + time + "</SerialNo>");

                            sb.Append("<Expiry>" + expirys + "</Expiry>");
                            sb.Append("<HashValue>" + hash + "</HashValue>");
                            sb.Append("</ConfirmRes>");
                            // writeLog("RES XML : " + sb.ToString());
                            response = sb.ToString();
                            // return sb.ToString();
                            #endregion
                        }
                        else
                        {
                            writeLog("EasyPoint CodeGenerate Confirm Req : " + reqXMLeasyPoint);
                            response = api_service.ApicallingEasypoint(reqXMLeasyPoint);
                            writeLog("EasyPoint Confirm Res : " + response);
                        }
                        if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmRes", response,out errMsg))
                        {
                            writeLog("Error in InsertTransactionLog Res : " + errMsg);
                        }
                        Hashtable htt = Utils.getHTableFromXML(response);

                        // break response from Biller 
                        mobileNo = ref3;
                        // messageid = string.Empty;
                        if (!IsValidateConfirmResEasyPoint(htt, MapTaxID, out  rescode, out  resdecs, out  version, out  messageid, out  ref1, out  ref3, out  agnid))
                        {

                            writeLog("Error in IsValidateConfirmResEasypoint : " + resdecs);
                            return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                        }
                        if (rescode != "00")
                        {

                            if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                            {
                                writeLog("Error in updateError : " + errMsg);
                            }


                            ConfirmResponseModel conRes = new ConfirmResponseModel();
                            conRes.taxID = taxID;
                            conRes.email = email;
                            conRes.password = password;
                            conRes.messageid = messageid;
                            conRes.billername = billerName;
                            conRes.billerlogo = billerLogo;
                            conRes.rescode = rescode;
                            conRes.resdesc = resdecs;
                            conRes.ref1 = ref1;
                            conRes.ref2 = ref2;
                            conRes.ref3 = string.Empty;
                            conRes.ref4 = ref3;
                            conRes.ref5 = mobileNo;
                            conRes.ref1Name = ref1Name;
                            conRes.ref2Name = ref2Name;
                            conRes.ref3Name = string.Empty;
                            conRes.ref4Name = ref4Name;
                            conRes.ref5Name = ref5Name;
                            conRes.batchID = batchid.ToString();
                            conRes.availablebalance = availablebalance.ToString();
                            conRes.txnID = txnID.ToString();
                            conRes.TodayTxnCount = TodayTxnCount;
                            conRes.TodayTxnAmount = TodayTxnAmount;
                            conRes.smsMsg = smsMsg;
                            return Utils.getConfirmRes(conRes);
                        }
                        else
                        {
                            writeLog("***************Enter Confirm Update *******************");

                            ref1 = customerName;
                            if (!_agentWCF.ConfirmUpdateCashOut(txnID, ref3, ref2, ref1, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                     agentAmount, agentFeeDbl, isAgreement, smsStatus,out  errMsg, out  batchID, out  avalbal, out  legbal))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                                {
                                    writeLog("Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");

                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }


                            SMSHelper smsH = new SMSHelper();
                            smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Description", "", "Ref", ref3, ref2, "", txnID.ToString(),
                                   double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                            if (appType == "CS" || appType == "MS")
                            {
                                smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                try
                                {
                                    writeLog("sendSMSWithTxnID starts.");

                                    writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                    writeLog("sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {
                                }
                            }
                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                            ConfirmResponseModel conRes = new ConfirmResponseModel();
                            conRes.taxID = taxID;
                            conRes.email = email;
                            conRes.password = password;
                            conRes.messageid = messageid;
                            conRes.billername = billerName;
                            conRes.billerlogo = billerLogo;
                            conRes.rescode = rescode;
                            conRes.resdesc = resdecs;
                            conRes.ref1 = ref1;
                            conRes.ref2 = ref2;
                            conRes.ref3 = string.Empty;
                            conRes.ref4 = string.Empty;
                            conRes.ref5 = mobileNo;
                            conRes.ref1Name = ref3Name;
                            conRes.ref2Name = ref2Name;
                            conRes.ref3Name = string.Empty;
                            conRes.ref4Name = string.Empty;
                            conRes.ref5Name = ref5Name;
                            conRes.batchID = batchid.ToString();
                            conRes.availablebalance = availablebalance.ToString();
                            conRes.txnID = txnID.ToString();
                            conRes.TodayTxnCount = TodayTxnCount;
                            conRes.TodayTxnAmount = TodayTxnAmount;
                            conRes.smsMsg = smsMsg;
                            return Utils.getConfirmRes(conRes);

                        }
                    }
                    #endregion

                    #region <-- Easypoint/mercy corps Redeem 14-Oct-2015 tz before -->
                    //if (MapTaxID == "7777777777777")
                    //{

                    //    //<ConfirmReq>
                    //    //<Version></Version>
                    //    //<TimeStamp></TimeStamp>
                    //    //<MessageID></MessageID>
                    //    //<PartnerID></PartnerID>
                    //    //<PartnerID></DigitalCode>
                    //    //<TranRef></TranRef>
                    //    //<HashValue></HashValue>
                    //    //</ConfirmReq>
                    //    writeLog("This is EasyPoint/Mercy Corps Redeem.");
                    //    int batchid = 0;
                    //    int topupid = 0;
                    //    double availablebalance = 0;
                    //    double ledgerbalance = 0;
                    //    string agnid = string.Empty;
                    //    // ref2 = productdesc;
                    //    string amountToeasypoint = Utils.getFromOrginalTo12Digit(amount);
                    //    string easypointid = ConfigurationManager.AppSettings["easyPointMercyRedeemID"].ToString();
                    //    // Version + TimeStamp + MessageID + PartnerID + DigitalCode + TranRef
                    //    string key = ConfigurationManager.AppSettings["easyPointMercyRedeemKey"].ToString();
                    //    string hashstr = Utils.hashstrRedeemConfirmEasyPointReq(version, ts, messageid, easypointid.ToString(), ref1, ref5, amountToeasypoint, key);

                    //    string reqXMLeasyPoint = "<ConfirmReq><Version>1.0</Version><TimeStamp>" + ts
                    //        + "</TimeStamp><MessageID>" + messageid + "</MessageID>"
                    //        + "<PartnerID>" + easypointid + "</PartnerID>"
                    //        + "<DigitalCode>" + ref1 + "</DigitalCode>"
                    //        + "<TranAmount>" + amountToeasypoint + "</TranAmount>"
                    //        + "<TranRef>" + ref5 + "</TranRef>"
                    //        + "<HashValue>" + hashstr
                    //        + "</HashValue></ConfirmReq>";
                    //    RouteAPI api_service = new RouteAPI();


                    //    //if (!_agentWCF.InsertTransactionLog(out errMsg, txnID, "ConfirmRedeemReqEasyPoint", reqXMLeasyPoint))
                    //    //{
                    //    //    writeLog("Error in InsertTransactionLog Req : " + errMsg);
                    //    //}
                    //    StringBuilder sb = new StringBuilder();

                    //    if (_agentWCF.insertAgentTopupMercyCrop(out topupid, out errMsg, double.Parse(amount), agentID, int.Parse(agentUserUniqueID), "PR", productdesc, "", "MercyCorps", "", "", "", "", productdesc, "", ""))
                    //    {
                    //        txnID = topupid;
                    //        writeLog("Insert TopUp Transaction OK Topupid:" + topupid);
                    //    }
                    //    else
                    //    {
                    //        writeLog("Error in Insert TopUp Transaction");
                    //    }

                    //    if (!_agentWCF.insertAgentTopupLog(out errMsg, topupid, "MercyCropREQ", reqXMLeasyPoint))
                    //    {
                    //        writeLog("Error in insertAgentTopupLog(MercyCropREQ) : " + errMsg);
                    //    }
                    //    if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                    //    {
                    //        #region if Simulator is on
                    //        writeLog("Simulator Y");
                    //        //<ConfirmRes>
                    //        //<Version></Version>
                    //        //<TimeStamp></TimeStamp>
                    //        //<MessageID></MessageID>
                    //        //<PartnerID></PartnerID>
                    //        //<DigitalCode></DigitalCode>
                    //        //<ResCode></ResCode>
                    //        //<TranRef></TranRef>
                    //        //<HashValue></HashValue>
                    //        //</ConfirmRes>



                    //        string testpin = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                    //        string time = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                    //        string expirys = System.DateTime.Now.ToShortDateString();
                    //        // string mercykey = ConfigurationManager.AppSettings["easyPointMercyRedeemKey"].ToString();
                    //        //Version + TimeStamp + MessageID + PartnerID + DigitalCode + ResCode + TranRef
                    //        // (string version, string timestamp, string messageid, string agentid,string partneragnid, string digitalcode,string rescode, string agnref,string amttoesp,string key)
                    //        string hash = Utils.hashstrRedeemConfirmEasyPointRes(version, time, messageid, easypointid, "12", ref1, "00", "50", amountToeasypoint, key);
                    //        // string lowercasehash = hash.ToLower();
                    //        sb.Append("<ConfirmRes>");
                    //        sb.Append("<Version>1.0</Version>");
                    //        sb.Append("<TimeStamp>" + time + "</TimeStamp>");//System.DateTime.Now.ToString("yyyyMMddhhmmssffff")
                    //        sb.Append("<MessageID>" + messageid + "</MessageID>");
                    //        sb.Append("<PartnerID>" + easypointid + "</PartnerID>");
                    //        sb.Append("<AgentID>" + "50" + "</AgentID>");
                    //        sb.Append("<DigitalCode>" + ref1 + "</DigitalCode>");
                    //        sb.Append("<TranAmount>" + amountToeasypoint + "</TranAmount>");
                    //        sb.Append("<ResCode>00</ResCode>");
                    //        sb.Append("<ResDesc>" + "Approved" + "</ResDesc>");

                    //        sb.Append("<TranRef>12</TranRef>");


                    //        sb.Append("<HashValue>" + hash + "</HashValue>");
                    //        sb.Append("</ConfirmRes>");
                    //        // writeLog("RES XML : " + sb.ToString());
                    //        response = sb.ToString();
                    //        // return sb.ToString();


                    //        #endregion
                    //    }
                    //    else
                    //    {
                    //        writeLog("EasyPoint Redeem Confirm Req : " + reqXMLeasyPoint);
                    //        response = api_service.RedeemApicallingEasypoint(reqXMLeasyPoint);
                    //        writeLog("EasyPoint Redeem Confirm Res : " + response);
                    //    }
                    //    //if (!_agentWCF.InsertTransactionLog(out errMsg, txnID, "EasyPointRedeemConfirmRes", response))
                    //    //{
                    //    //    writeLog("Error in InsertTransactionLog Res : " + errMsg);
                    //    //}
                    //    Hashtable htt = Utils.getHTableFromXML(response);
                    //    //  StringBuilder sb = new StringBuilder();
                    //    mobileNo = ref3;
                    //    if (!IsValidateRedeemConfirmResEasyPoint(htt, out  rescode, out  resdecs, out version, out  messageid, out  ref1, out ref5, out  agnid))
                    //    {

                    //        return GeterrorResponse(rescode, resdecs, txnID, resdecs);

                    //    }
                    //    if (rescode != "00")
                    //    {
                    //        if (!_agentWCF.updateAgentTopupMercycrop(out errMsg, topupid, "ER", "", "MercyCorps", DateTime.Now.ToString(), resdecs, rescode, ref5, productdesc, "", "", ""))
                    //        {
                    //            writeLog("Error in insertAgentTopupMercyCrops:" + errMsg);
                    //        }
                    //        // rescode = "01";                           
                    //        availablebalance = 0;

                    //        if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                    //        {
                    //            writeLog("Error in updateError : " + errMsg);
                    //        }

                    //        ConfirmResponseModel conRes = new ConfirmResponseModel();
                    //        conRes.taxID = taxID;
                    //        conRes.email = email;
                    //        conRes.password = password;
                    //        conRes.messageid = messageid;
                    //        conRes.billerlogo = billerLogo;
                    //        conRes.billername = billerName;
                    //        conRes.rescode = rescode;
                    //        conRes.resdesc = resdecs;
                    //        conRes.ref1 = ref1;
                    //        conRes.ref2 = ref2;
                    //        conRes.ref3 = string.Empty;
                    //        conRes.ref4 = string.Empty;
                    //        conRes.ref5 = string.Empty;
                    //        conRes.ref1Name = ref1Name;
                    //        conRes.ref2Name = ref2Name;
                    //        conRes.ref3Name = ref3Name;
                    //        conRes.ref4Name = ref4Name;
                    //        conRes.ref5Name = ref5Name;
                    //        conRes.batchID = batchid.ToString();
                    //        conRes.availablebalance = availablebalance.ToString();
                    //        conRes.txnID = txnID.ToString();
                    //        conRes.TodayTxnCount = TodayTxnCount;
                    //        conRes.TodayTxnAmount = TodayTxnAmount;
                    //        conRes.smsMsg = smsMsg;
                    //        return Utils.getConfirmRes(conRes);


                    //    }
                    //    else
                    //    {
                    //        bool isOKAddFund = false;
                    //        if (agentID > 0)
                    //        {
                    //            double avalBal = 0;
                    //            double ledeBal = 0;

                    //            if (_agentWCF.addFund2OneStopPlus(out avalBal, out ledeBal, out errMsg, agentID, double.Parse(amount)))
                    //            {

                    //                isOKAddFund = true;
                    //                writeLog("After addFund = AgentIDPlus : " + agentID.ToString() + " | AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                    //            }
                    //            else
                    //            {
                    //                writeLog("Error in addFund2OneStopPlus : " + errMsg);
                    //            }
                    //        }
                    //        else
                    //        {
                    //            writeLog("No AgentID for Redeem : " + agentID.ToString());
                    //        }
                    //        if (isOKAddFund)
                    //        {

                    //            if (!_agentWCF.updateAgentTopupMercycrop(out errMsg, topupid, "AP", ref1, "MercyCorps", System.DateTime.Now.ToString("yyyyMMddhhmmssffff"), resdecs, rescode, ref5, productdesc, "", "", "0"))
                    //            {
                    //                writeLog("Error in insertAgentTopupMercyCrops:" + errMsg);
                    //            }
                    //        }
                    //        if (appType == "CS" || appType == "MS")
                    //        {
                    //            SMSHelper smsH = new SMSHelper();
                    //            smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                    //            smsMsg = smsH.getMessageBillerMercyCrops(agentName, MapTaxID, billerName, ref1Name, ref2Name, "", "Ref", ref1, ref2, "", ref5.ToString(),
                    //                double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                    //            //if (!smsWcf.sendSMS(mobileNo, smsMsg, "EN"))
                    //            //{
                    //            //    writeLog("Error in sendSMS to this number : " + mobileNo);
                    //            //}
                    //            //else
                    //            //{
                    //            //    smsStatus="Y";
                    //            //    writeLog("SMS Sent :"+smsStatus);
                    //            //}
                    //            try
                    //            {
                    //                writeLog("sendSMSWithTxnID starts." + " smsMsg :" + smsMsg);
                    //                //smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                    //                writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                    //                smsWcf.AGDSendSms(mobileNo, smsMsg, sendername);
                    //                writeLog("sendSMSWithTxnID ends.");
                    //            }
                    //            catch (Exception ex)
                    //            {
                    //            }
                    //        }
                    //        //  availablebalance = 0;

                    //        ConfirmResponseModel conRes = new ConfirmResponseModel();
                    //        conRes.taxID = taxID;
                    //        conRes.email = email;
                    //        conRes.password = password;
                    //        conRes.messageid = messageid;
                    //        conRes.rescode = rescode;
                    //        conRes.resdesc = resdecs;
                    //        conRes.ref1 = ref1;
                    //        conRes.ref2 = ref2;
                    //        conRes.ref3 = string.Empty;
                    //        conRes.ref4 = string.Empty;
                    //        conRes.ref5 = string.Empty;
                    //        conRes.ref1Name = ref1Name;
                    //        conRes.ref2Name = ref2Name;
                    //        conRes.ref3Name = ref3Name;
                    //        conRes.ref4Name = ref4Name;
                    //        conRes.ref5Name = ref5Name;
                    //        conRes.batchID = batchid.ToString();
                    //        conRes.availablebalance = availablebalance.ToString();
                    //        conRes.txnID = txnID.ToString();
                    //        conRes.TodayTxnCount = TodayTxnCount;
                    //        conRes.TodayTxnAmount = TodayTxnAmount;
                    //        conRes.smsMsg = smsMsg;
                    //        return Utils.getConfirmRes(conRes);
                    //    }

                    //}
                    #endregion

                    #region <-- Easypoint/mercy corps Redeem 24-Jan-2017 tz -->
                    if (MapTaxID == "7777777777777" || MapTaxID == "0000000000011")
                    {

                        //<ConfirmReq>
                        //<Version></Version>
                        //<TimeStamp></TimeStamp>
                        //<MessageID></MessageID>
                        //<PartnerID></PartnerID>
                        //<PartnerID></DigitalCode>
                        //<TranRef></TranRef>
                        //<HashValue></HashValue>
                        //</ConfirmReq>

                        writeLog("This is EasyPoint/Mercy Corps Redeem.");
                        int batchid = 0;
                        int topupid = 0;
                        //double availablebalance = 0;
                        //double ledgerbalance = 0;
                        string agnid = string.Empty;
                        // ref2 = productdesc;
                        string amountToeasypoint = Utils.getFromOrginalTo12Digit(amount);
                        string easypointid = MapTaxID == "7777777777777" ? ConfigurationManager.AppSettings["easyPointMercyRedeemID"].ToString() : ConfigurationManager.AppSettings["MercyCorpsPartnerID"].ToString();
                        // Version + TimeStamp + MessageID + PartnerID + DigitalCode + TranRef
                        string key = MapTaxID == "7777777777777" ? ConfigurationManager.AppSettings["easyPointMercyRedeemKey"].ToString() : ConfigurationManager.AppSettings["MercyCorpsRedeemKey"].ToString();
                        string hashstr = Utils.hashstrRedeemConfirmEasyPointReq(version, ts, messageid, easypointid.ToString(), ref1, ref5, amountToeasypoint, key);
                        double avalbal = 0;
                        double legbal = 0;

                        string reqXMLeasyPoint = "<ConfirmReq><Version>1.0</Version><TimeStamp>" + ts
                            + "</TimeStamp><MessageID>" + messageid + "</MessageID>"
                            + "<PartnerID>" + easypointid + "</PartnerID>"
                            + "<DigitalCode>" + ref1 + "</DigitalCode>"
                            + "<TranAmount>" + amountToeasypoint + "</TranAmount>"
                            + "<TranRef>" + ref5 + "</TranRef>"
                            + "<HashValue>" + hashstr
                            + "</HashValue></ConfirmReq>";
                        RouteAPI api_service = new RouteAPI();

                        StringBuilder sb = new StringBuilder();

                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            #region <-- If Simulator is on -->
                            writeLog("Simulator Y");

                            string testpin = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                            string time = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                            string expirys = System.DateTime.Now.ToShortDateString();
                            string hash = Utils.hashstrRedeemConfirmEasyPointRes(version, time, messageid, easypointid, "12", ref1, "00", "50", amountToeasypoint, key);

                            sb.Append("<ConfirmRes>");
                            sb.Append("<Version>1.0</Version>");
                            sb.Append("<TimeStamp>" + time + "</TimeStamp>");//System.DateTime.Now.ToString("yyyyMMddhhmmssffff")
                            sb.Append("<MessageID>" + messageid + "</MessageID>");
                            sb.Append("<PartnerID>" + easypointid + "</PartnerID>");
                            sb.Append("<AgentID>" + "50" + "</AgentID>");
                            sb.Append("<DigitalCode>" + ref1 + "</DigitalCode>");
                            sb.Append("<TranAmount>" + amountToeasypoint + "</TranAmount>");
                            sb.Append("<ResCode>00</ResCode>");
                            sb.Append("<ResDesc>" + "Approved" + "</ResDesc>");

                            sb.Append("<TranRef>12</TranRef>");


                            sb.Append("<HashValue>" + hash + "</HashValue>");
                            sb.Append("</ConfirmRes>");
                            // writeLog("RES XML : " + sb.ToString());
                            response = sb.ToString();
                            // return sb.ToString();


                            #endregion
                        }
                        else
                        {
                            writeLog("EasyPoint Redeem Confirm Req : " + reqXMLeasyPoint);
                            response = api_service.RedeemApicallingEasypoint(reqXMLeasyPoint);
                            writeLog("EasyPoint Redeem Confirm Res : " + response);
                        }

                        Hashtable htt = Utils.getHTableFromXML(response);

                        mobileNo = ref3;
                        if (!IsValidateRedeemConfirmResEasyPoint(htt, MapTaxID, out  rescode, out  resdecs, out version, out  messageid, out  ref1, out ref5, out  agnid))
                        {
                            return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                        }
                        if (rescode != "00")
                        {
                            //if (!_agentWCF.updateAgentTopupMercycrop(out errMsg, topupid, "ER", "", "MercyCorps", DateTime.Now.ToString(), resdecs, rescode, ref5, productdesc, "", "", ""))
                            //{
                            //    writeLog("Error in insertAgentTopupMercyCrops:" + errMsg);
                            //}
                            // rescode = "01";                           
                            availablebalance = 0;

                            if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                            {
                                writeLog("Error in updateError : " + errMsg);
                            }

                            ConfirmResponseModel conRes = new ConfirmResponseModel();
                            conRes.taxID = taxID;
                            conRes.email = email;
                            conRes.password = password;
                            conRes.messageid = messageid;
                            conRes.billerlogo = billerLogo;
                            conRes.billername = billerName;
                            conRes.rescode = rescode;
                            conRes.resdesc = resdecs;
                            conRes.ref1 = ref1;
                            conRes.ref2 = ref2;
                            conRes.ref3 = ref5;
                            conRes.ref4 = string.Empty;
                            conRes.ref5 = string.Empty;
                            conRes.ref1Name = ref1Name;
                            conRes.ref2Name = ref2Name;
                            conRes.ref3Name = ref3Name;
                            conRes.ref4Name = ref4Name;
                            conRes.ref5Name = ref5Name;
                            conRes.batchID = batchid.ToString();
                            conRes.availablebalance = availablebalance.ToString();
                            conRes.txnID = txnID.ToString();
                            conRes.TodayTxnCount = TodayTxnCount;
                            conRes.TodayTxnAmount = TodayTxnAmount;
                            conRes.smsMsg = smsMsg;
                            return Utils.getConfirmRes(conRes);


                        }
                        else
                        {
                            #region <-- Not use -->
                            /*
                        bool isOKAddFund = false;
                        if (agentID > 0)
                        {
                            double avalBal = 0;
                            double ledeBal = 0;

                            if (_agentWCF.addFund2OneStopPlus(out avalBal, out ledeBal, out errMsg, agentID, double.Parse(amount)))
                            {

                                isOKAddFund = true;
                                writeLog("After addFund = AgentIDPlus : " + agentID.ToString() + " | AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            }
                            else
                            {
                                writeLog("Error in addFund2OneStopPlus : " + errMsg);
                            }
                        }
                        else
                        {
                            writeLog("No AgentID for Redeem : " + agentID.ToString());
                        }
                        if (isOKAddFund)
                        {

                            if (!_agentWCF.updateAgentTopupMercycrop(out errMsg, topupid, "AP", ref1, "MercyCorps", System.DateTime.Now.ToString("yyyyMMddhhmmssffff"), resdecs, rescode, ref5, productdesc, "", "", "0"))
                            {
                                writeLog("Error in insertAgentTopupMercyCrops:" + errMsg);
                            }
                        }
                         */
                            #endregion

                            //if (!_agentWCF.ConfirmUpdateCashOut(out  errMsg, out  batchID, out  availablebalance, out  ledgerbalance, txnID,
                            //       ref1, agentCode, productdesc, ref5, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                            //       agentAmount, agentFeeDbl, isAgreement, smsStatus))
                            //{
                            //    writeLog("Error in ConfirmUpdate : " + errMsg);
                            //}
                            if (!_agentWCF.ConfirmUpdateCashOut(txnID,ref1, ref2, ref5, "", mobileNo, "", "PA", "Paid Successfully", agentID, email,
                             agentAmount, agentFeeDbl, isAgreement, smsStatus,out  errMsg, out  batchID, out  avalbal, out  legbal))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                                {
                                    writeLog("Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }
                            if (appType == "CS" || appType == "MS")
                            {
                                SMSHelper smsH = new SMSHelper();
                                smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();

                                smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, ref2Name, "", "Ref", ref1, ref2, "", txnID.ToString(),
                                       double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                //smsH.getMessageBillerMercyCrops(agentName, MapTaxID, billerName, ref1Name, ref2Name, "", "Ref", ref1, agentCode, "", ref5.ToString(),
                                //double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                try
                                {
                                    writeLog("sendSMSWithTxnID starts." + " smsMsg :" + smsMsg);
                                    //smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                    writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                    writeLog("sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {
                                }
                            }
                            //  availablebalance = 0;

                            ConfirmResponseModel conRes = new ConfirmResponseModel();
                            conRes.taxID = taxID;
                            conRes.email = email;
                            conRes.password = password;
                            conRes.messageid = messageid;
                            conRes.rescode = rescode;
                            conRes.resdesc = resdecs;
                            conRes.ref1 = ref1;
                            conRes.ref2 = ref2;
                            conRes.ref3 = ref5;
                            conRes.ref4 = string.Empty;
                            conRes.ref5 = mobileNo;
                            conRes.ref1Name = ref1Name;
                            conRes.ref2Name = ref2Name;
                            conRes.ref3Name = ref3Name;
                            conRes.ref4Name = ref4Name;
                            conRes.ref5Name = ref5Name;
                            conRes.batchID = batchid.ToString();
                            conRes.availablebalance = availablebalance.ToString();
                            conRes.txnID = txnID.ToString();
                            conRes.TodayTxnCount = TodayTxnCount;
                            conRes.TodayTxnAmount = TodayTxnAmount;
                            conRes.smsMsg = smsMsg;
                            return Utils.getConfirmRes(conRes);
                        }

                    }
                    #endregion

                    #region <-- 1-Stop+ -->
                    else if (MapTaxID == "0000000000005") /////For OneStop+
                    {
                        writeLog("This is Channel+.");
                        int batchid = 0;
                        StringBuilder sb = new StringBuilder();                      
                        double avalbal = 0;
                        double legbal = 0;
                        string maha_User = string.Empty;
                        int agentIDplusForChannel = 0;
                        double readdedamount = 0;
                      

                        if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmReq", reqXml,out errMsg))
                        {
                            writeLog("Error in InsertTransactionLog Req : " + errMsg);
                        }

                        Hashtable htt = Utils.getHTableFromXML(reqXml);
                     
                        if (!IsValidateConfirmReqOneStop(htt, out rescode, out resdecs, out version, out messageid, out ref1, out ref3))
                        {
                            //return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                        else
                        {
                            try {
                            bool isOKAddFund = false;
                            // ref4 = txnID.ToString();
                            mobileNo = ref3;
                            DataSet dsAgnt;
                            if (!_agentWCF.getAgentNameByAgentCode(ref1,out dsAgnt, out errmsg))//Ref1 is agentCode
                            {
                                writeLog("Error in getAgentNameByAgentCode : " + errmsg);
                            }
                            if (dsAgnt.Tables[0].Rows.Count > 0)
                            {
                                if (dsAgnt.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString() != "Y")
                                {
                                    
                                    if (dsAgnt.Tables[1].Rows.Count > 0)
                                    {
                                        DeviceToken = (dsAgnt.Tables[1].Rows[0]["DEVICETOKEN"] == DBNull.Value ? string.Empty : dsAgnt.Tables[1].Rows[0]["DEVICETOKEN"].ToString());
                                        DeviceInfo = (dsAgnt.Tables[1].Rows[0]["DEVICEINFO"] == DBNull.Value ? string.Empty : dsAgnt.Tables[1].Rows[0]["DEVICEINFO"].ToString());

                                        writeLog("Device Token:" + DeviceToken + "Device Info" + DeviceInfo);
                                    }
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                    int agentIDPlus = 0;
                                    string agentNamePlus = "";
                                    agentIDPlus = int.Parse(dsAgnt.Tables[0].Rows[0]["AGENTID"].ToString());
                                    agentNamePlus = dsAgnt.Tables[0].Rows[0]["AGENTNAME"].ToString();
                                    agentIDplusForChannel = agentIDPlus;
                                    if (agentIDPlus > 0)
                                    {
                                        DataSet dsFirstUser = null;
                                        _agentWCF.getMaHaOneStopPlusPartnerFirstUser(ref1, out dsFirstUser, out errmsg);
                                        if (dsFirstUser.Tables[0].Rows.Count > 0)
                                        {
                                            maha_User = dsFirstUser.Tables[0].Rows[0]["AGENTUSERNAME"].ToString() + "," + dsFirstUser.Tables[0].Rows[0]["PHNO"].ToString() + "," + dsFirstUser.Tables[0].Rows[0]["NRC"].ToString() + "," + transactionDateTime;
                                        }

                                        double avalBal = 0;
                                        double ledeBal = 0;
                                        double amountToTopup = 0;
                                        //  amountToTopup = (agentAmount - oneStopFeeDbl);

                                        #region <-- Add Balance Into Payee -->

                                        if (_agentWCF.addFund2OneStopPlus(agentIDPlus, amt,out avalBal, out ledeBal, out errMsg))
                                        {
                                            readdedamount = amt;
                                            AddAmountToUser = true;
                                            isOKAddFund = true;
                                            writeLog("After addFund = AgentIDPlus : " + agentIDPlus.ToString() + " |Topuped Amount :" + amt.ToString() + "| AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                        }
                                        else
                                        {
                                            writeLog("Error in addFund2OneStopPlus : " + errMsg);
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        writeLog("No AgentID for 1Stop+ : " + agentIDPlus.ToString());
                                    }

                                    if (isOKAddFund)
                                    {
                                        writeLog("Fund Added OK to AgentID : " + agentIDPlus);
                                        #region <-- Update Transaction Region -->


                                        if (!_agentWCF.ConfirmUpdate(txnID,ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                 agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                        {
                                            writeLog("Error in ConfirmUpdate : " + errMsg);
                                        }
                                        else
                                        {
                                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                            if (!_agentWCF.insertAgentTopupBy1Stop(amt, agentIDPlus, agentUserUniqueID, "AP", ConfigurationManager.AppSettings["ChannelTopup"].ToString(), txnID, agentCode, mobileNo, serviceFee, agentName, out errMsg))
                                            {
                                                writeLog("Error in insertAgentTopupBy1Stop : " + errMsg);
                                            }

                                            else
                                            {
                                                TopUpHistory = true;
                                            }
                                            //throw new System.InvalidOperationException("Logfile cannot be read-only");
                                        }
                                        #endregion
                                        if (appType == "CS" || appType == "MS")
                                        {
                                            #region <-- Send SMS Region -->

                                            SMSHelper smsH = new SMSHelper();
                                            smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                            smsMsg = smsH.getMessageBiller1Stop(agentName, MapTaxID, billerName, ref1Name, ref2Name, "", "Ref", ref1, ref2, "", txnID.ToString(),
                                                double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                            try
                                            {
                                                writeLog("sendSMSWithTxnID starts." + " smsMsg :" + smsMsg);
                                                //smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                                writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);

                                                // smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                                pushNotiWCF.ServiceClient pushnoti = new pushNotiWCF.ServiceClient();
                                                if (!string.IsNullOrEmpty(DeviceInfo))
                                                {
                                                    writeLog("Device Info is not Empty:" + DeviceInfo);
                                                    if (DeviceInfo.StartsWith("iOS"))
                                                    {
                                                        writeLog("Push To IOS:" + DeviceInfo);
                                                        pushnoti.PushToApple(DeviceToken, smsMsg, 0, out errmsg);
                                                    }
                                                    else
                                                    {
                                                        writeLog("Push To andriod:" + DeviceInfo);
                                                        pushnoti.PushToAndroid(DeviceToken, smsMsg, out errmsg);
                                                    }
                                                }
                                                writeLog("sendSMSWithTxnID ends.");
                                            }
                                            catch (Exception ex)
                                            {
                                                writeLog("Exception error occue at 1stop+ notification" + ex.Message);
                                            }
                                            #endregion
                                        }

                                        #region <-- Success Confirm Response to Client -->
                                       
                                        Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amt.ToString()), ConfigurationManager.AppSettings["ChannelTopup"].ToString()));
                                        Task.Factory.StartNew(() => _fraudWCF.CheckReceiver(agentIDPlus, decimal.Parse(amt.ToString()), ConfigurationManager.AppSettings["ChannelTopup"].ToString(), txnID.ToString()));

                                        ConfirmResponseModel conRes = new ConfirmResponseModel();

                                        conRes.email = email;
                                        conRes.password = password;
                                        conRes.messageid = messageid;
                                        conRes.billerlogo = billerLogo;
                                        conRes.billername = billerName;
                                        conRes.taxID = taxID;
                                        conRes.rescode = "00";
                                        conRes.resdesc = "Success";
                                        conRes.ref1 = ref1;                                        
                                        conRes.ref2 = ref2;                                        
                                        conRes.ref3 = ref3;                                        
                                        conRes.ref4 = txnID.ToString();                                        
                                        //conRes.ref5 = mobileNo;
                                        conRes.ref5 =maha_User;                                        
                                        conRes.ref1Name = ref1Name;
                                        conRes.ref2Name = ref2Name;
                                        conRes.ref3Name = ref3Name;
                                        conRes.ref4Name = ref4Name;
                                        //conRes.ref5Name = ref5Name;
                                        conRes.ref5Name = "";
                                        conRes.batchID = batchid.ToString();
                                        conRes.availablebalance = availablebalance.ToString();
                                        conRes.txnID = txnID.ToString();
                                        conRes.TodayTxnCount = TodayTxnCount;
                                        conRes.TodayTxnAmount = TodayTxnAmount;
                                        conRes.smsMsg = smsMsg;
                                        return Utils.getConfirmRes(conRes);

                                        #endregion
                                    }


                                    else
                                    {
                                        writeLog("Fund Added NOT OK to AgentID : " + agentIDPlus);
                                        rescode = "10";
                                        resdecs = "Adding Fund Failed";
                                        //return Utils.getErrorRes(rescode, resdecs);
                                        return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                    }


                                } ///////////  end of --> if (isOKAddFund) and else {}

                                else
                                {
                                    ///  if (dsAgnt.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString() != "Y")   else 
                                    return GetErrorResponseWithAddBalance("01", "Agent NOT Applicable", txnID, resdecs, agentID, agentAmount, isAgreement);
                                }

                            }//////////////////////// end of --> if (dsAgnt.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString() != "Y")


                            else  ////////////////else statement of  if (dsAgnt.Tables[0].Rows.Count > 0)
                            {
                                rescode = "01";
                                resdecs = errMsg;
                                //return Utils.getErrorRes(rescode, "Ref Not Found");
                                return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                            }


                           }
                            catch (Exception ex)
                            {
                                if (MapTaxID == "0000000000005" &&  AddAmountToUser == true)
                                {
                                    writeLog("Error ConfirmToBiller : " + ex.ToString());
                                    rescode = "97";
                                    resdecs = "BIS API Error";
                                    return ChannelPlusGetErrorResponse(rescode, resdecs, txnID, resdecs, agentID, agentIDplusForChannel, agentAmount,readdedamount, isAgreement);
                                }
                                else
                                {
                                    writeLog("Error ConfirmToBiller : " + ex.ToString());
                                    rescode = "97";
                                    resdecs = "BIS API Error";
                                    return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                }
                          
                          }
                        } // Conclusion of  the wohole else { 

                    }

                    #endregion

                    #region <-- TelenorE_Load -->
                    else if (MapTaxID == "0000000000060")
                    {
                        double avalbal = 0;
                        double legbal = 0;

                        writeLog("This is TELENOR E-LOAD for POS.");

                        #region <-- TELENOR AIRTIMEs -->
                        
                        rescode = "01";
                        resdecs = "Airtime Topup is NOT Available.";
                        mobileNo = ref3;
                        ref3 = "Airtime";                        
                        string responseresult = string.Empty;

                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            string timediff = "-2";
                            if (validateTelenorAirtime(ref3, ref2, timediff, out resdecs))
                            {
                                #region <-- Request To Telenor AirTimeWCF -->


                                responseresult = "OK";
                                ref4 = responseresult + " " + DateTime.Now.ToShortDateString();
                                resdecs = responseresult.ToString().Trim();
                                writeLog("Response Description:" + resdecs);
                                writeLog("Response Result From Telenor AirTime:" + responseresult);
                                writeLog("Length:" + responseresult.Length);
                                #endregion

                                #region <-- This Is Telenor AirTime -->
                                if (responseresult.ToString().Trim() == "OK")
                                {
                                    writeLog("Response OK");
                                    // ref4 = ref4 + " " + expiry;
                                    //double availablebalance = 0;
                                    //double ledgerbalance = 0;
                                    //string errMsg = null;
                                    amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                    if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                        agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                                    {
                                        writeLog("Error in ConfirmUpdate : " + errMsg);
                                    }
                                    else
                                    {
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                    }
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                    rescode = "00";
                                    resdecs = "Success";


                                    ConfirmResponseModel conRes = new ConfirmResponseModel();
                                    conRes.taxID = taxID;
                                    conRes.email = email;
                                    conRes.password = password;
                                    conRes.messageid = messageid;
                                    conRes.billerlogo = billerLogo;
                                    conRes.billername = billerName;
                                    conRes.rescode = rescode;
                                    conRes.resdesc = resdecs;
                                    conRes.ref1 = ref1;
                                    conRes.ref2 = ref2;
                                    conRes.ref3 = ref3;
                                    conRes.ref4 = ref4;
                                    conRes.ref5 = mobileNo;
                                    conRes.ref1Name = ref1Name;
                                    conRes.ref2Name = ref2Name;
                                    conRes.ref3Name = ref3Name;
                                    conRes.ref4Name = ref4Name;
                                    conRes.ref5Name = ref5Name;
                                    conRes.batchID = string.Empty;
                                    conRes.availablebalance = availablebalance.ToString();
                                    conRes.txnID = txnID.ToString();
                                    conRes.TodayTxnCount = TodayTxnCount;
                                    conRes.TodayTxnAmount = TodayTxnAmount;
                                    conRes.smsMsg = smsMsg;
                                    return Utils.getConfirmRes(conRes);
                                }
                                else
                                {
                                    return GetErrorResponseWithAddBalance("06", "Transaction is not successful please tryagain!", txnID, resdecs, agentID, agentAmount, isAgreement);
                                }
                                #endregion

                            }
                            else
                            {
                                  return GetErrorResponseWithAddBalance("06", "Transaction is not successful please tryagain!", txnID, resdecs, agentID, agentAmount, isAgreement);
                            }
                        }
                        else
                        {
                            if (ConfigurationManager.AppSettings["TelenorAirTime"].ToString() == "Y")
                            {

                                string timediff = "-2";

                                if (validateTelenorAirtime(ref3, ref2, timediff, out resdecs))
                                {
                                    #region <-- Request To Telenor AirTimeWCF -->
                                    tlnAirTimeWCF.ServiceClient tlnairtime = new tlnAirTimeWCF.ServiceClient();


                                    responseresult = tlnairtime.UploadWithAirTime(ref2, mobileNo);

                                    ref4 = responseresult.Trim() + " " + DateTime.Now.ToShortDateString();
                                    resdecs = responseresult.ToString().Trim();
                                    writeLog("Response Description:" + resdecs);
                                    writeLog("Response Result From Telenor AirTime:" + responseresult);
                                    writeLog("Length:" + responseresult.Length);
                                    #endregion

                                    #region <-- This Is Telenor AirTime -->
                                    if (responseresult.ToString().Trim() == "OK")
                                    {
                                        writeLog("Response OK");
                                        
                                        amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                        if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                            agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                                        {
                                            writeLog("Error in ConfirmUpdate : " + errMsg);
                                        }
                                        else
                                        {
                                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                        }
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                        rescode = "00";
                                        resdecs = "Success";


                                        ConfirmResponseModel conRes = new ConfirmResponseModel();
                                        conRes.taxID = taxID;
                                        conRes.email = email;
                                        conRes.password = password;
                                        conRes.messageid = messageid;
                                        conRes.billerlogo = billerLogo;
                                        conRes.billername = billerName;
                                        conRes.rescode = rescode;
                                        conRes.resdesc = resdecs;
                                        conRes.ref1 = ref1;
                                        conRes.ref2 = ref2;
                                        conRes.ref3 = ref3;
                                        conRes.ref4 = ref4;
                                        conRes.ref5 = mobileNo;
                                        conRes.ref1Name = ref1Name;
                                        conRes.ref2Name = ref2Name;
                                        conRes.ref3Name = ref3Name;
                                        conRes.ref4Name = ref4Name;
                                        conRes.ref5Name = ref5Name;
                                        conRes.batchID = string.Empty;
                                        conRes.availablebalance = availablebalance.ToString();
                                        conRes.txnID = txnID.ToString();
                                        conRes.TodayTxnCount = TodayTxnCount;
                                        conRes.TodayTxnAmount = TodayTxnAmount;
                                        conRes.smsMsg = smsMsg;
                                        return Utils.getConfirmRes(conRes);
                                    }
                                    else
                                    {
                                        return GetErrorResponseWithAddBalance("06", "Transaction is not successful please tryagain!", txnID, resdecs, agentID, agentAmount, isAgreement);
                                    }
                                    #endregion

                                }
                                else
                                {
                                    return GetErrorResponseWithAddBalance("06", "Transaction is not successful please tryagain!", txnID, resdecs, agentID, agentAmount, isAgreement);
                                }

                            }
                            else if (ConfigurationManager.AppSettings["EBATelenorAirTime"].ToString() == "Y")
                            {
                                writeLog("$$$$$$$$ This Is EBA Tenenor AirTime $$$$$$$$$");

                                #region <-- This is Easy Bill -->
                                                               
                                #region <-- Initialize Variable -->
                                
                                string oneStopRef = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                                EABAirTimeTopUpReq pinreq = new EABAirTimeTopUpReq();
                                AirTimeTopUpResults pinres = new AirTimeTopUpResults();
                                string aesKey = string.Empty;

                                if (IsTokenNullOrExpire(Token))
                                {
                                    Token = GetOAuthToken();
                                }

                                pinreq.Token = Token.Token;
                                pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                                pinreq.BillerCode = "Telenor";
                                pinreq.Amount = ref2;
                                pinreq.NetworkType = "GSM";
                                pinreq.ChannelRefID = oneStopRef;
                                pinreq.MobileNumber = mobileNo;


                                var json_serializer1 = new JavaScriptSerializer();

                                string jsonReq = json_serializer1.Serialize(pinreq);
                                writeLog("ESBA JasonReq:" + jsonReq);
                                #endregion
                               string jsonres = string.Empty;
                                jsonres = Utils.pinRequest(jsonReq, esbAirTimeTopup);

                                writeLog("ESBA JasonRes:" + jsonres);
                                if (string.IsNullOrEmpty(jsonres))
                                {
                                    resdecs = "No Response From ESBA";
                                    rescode = "06";
                                   
                                    return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                }
                                var json_serializerpinres = new JavaScriptSerializer();
                                pinres = json_serializerpinres.Deserialize<AirTimeTopUpResults>(jsonres);



                                if (pinres.AirTimeTopUpResult.TransactionStatus == 0)//|| pinres.AirTimeTopUpResult.ResponseCode == 2
                                {

                                    ref4 = pinres.AirTimeTopUpResult.ChannelRefID + ":" + pinres.AirTimeTopUpResult.AirTimeToupTransactionID + " " + DateTime.Now.ToShortDateString();
                                     amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                    #region <-- Update Transaction -->
                                    if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                        agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                                    {
                                        writeLog("Error in ConfirmUpdate : " + errMsg);
                                    }
                                    else
                                    {
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                    }
                                    #endregion
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                                    #region <-- Response Back To Client -->
                                    rescode = "00";
                                    resdecs = "Success";
                                    ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                    confirmres.taxID = taxID;
                                    confirmres.email = email;
                                    confirmres.password = password;
                                    confirmres.messageid = messageid;
                                    confirmres.billername = billerName;
                                    confirmres.billerlogo = billerLogo;
                                    confirmres.rescode = rescode;
                                    confirmres.resdesc = resdecs;
                                    confirmres.ref1 = ref1;
                                    confirmres.ref2 = ref2;
                                    confirmres.ref3 = ref3;
                                    confirmres.ref4 = ref4;
                                    confirmres.ref5 = mobileNo;
                                    confirmres.ref1Name = ref1Name;
                                    confirmres.ref2Name = ref2Name;
                                    confirmres.ref3Name = ref3Name;
                                    confirmres.ref5Name = ref5Name;
                                    confirmres.availablebalance = availablebalance.ToString();
                                    confirmres.txnID = txnID.ToString();
                                    confirmres.TodayTxnAmount = TodayTxnAmount;
                                    confirmres.TodayTxnCount = TodayTxnCount;
                                    confirmres.smsMsg = smsMsg;

                                    return Utils.getConfirmRes(confirmres);
                                    #endregion

                                    

                                }
                                else
                                {
                                    
                                    return GetErrorResponseWithAddBalance(pinres.AirTimeTopUpResult.ResponseCode.ToString(), "Transaction Not Successful Please Tryagain!", txnID, pinres.AirTimeTopUpResult.ResponseDescription, agentID, agentAmount, isAgreement);
                                }

                                #endregion

                            }
                            else
                            {
                               
                                return GetErrorResponseWithAddBalance("06", resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                            }
                        }
                        #endregion

                    }
                    #endregion

                    #region <-- Telenor -->
                    else if (MapTaxID == "5555555555555")
                    {
                        double avalbal = 0;
                        double legbal = 0;

                        writeLog("This is TELENOR TOPUP.");

                        if (topupType == "A")
                        {
                            #region <-- TELENOR AIRTIMEs -->
                            writeLog("This is Airtime topup.");
                            rescode = "01";
                            resdecs = "Airtime Topup is NOT Available.";
                            mobileNo = ref3;
                            ref3 = "Airtime";
                            // string success = "OK";
                            string responseresult = string.Empty;

                            if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                            {
                                string timediff = "-2";
                                if (validateTelenorAirtime(ref3, ref2, timediff, out resdecs))
                                {
                                    #region <-- Request To Telenor AirTimeWCF -->


                                    responseresult = "OK";
                                    ref4 = responseresult + " " + DateTime.Now.ToShortDateString();
                                    resdecs = responseresult.ToString().Trim();
                                    writeLog("Response Description:" + resdecs);
                                    writeLog("Response Result From Telenor AirTime:" + responseresult);
                                    writeLog("Length:" + responseresult.Length);
                                    #endregion

                                    #region <-- This Is Telenor AirTime -->
                                    if (responseresult.ToString().Trim() == "OK")
                                    {
                                        writeLog("Response OK");
                                        // ref4 = ref4 + " " + expiry;
                                        //double availablebalance = 0;
                                        //double ledgerbalance = 0;
                                        //string errMsg = null;
                                        amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                        if (!_agentWCF.ConfirmUpdate(txnID,ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                            agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                        {
                                            writeLog("Error in ConfirmUpdate : " + errMsg);
                                        }
                                        else
                                        {
                                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                        }
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                        rescode = "00";
                                        resdecs = "Success";


                                        ConfirmResponseModel conRes = new ConfirmResponseModel();
                                        conRes.taxID = taxID;
                                        conRes.email = email;
                                        conRes.password = password;
                                        conRes.messageid = messageid;
                                        conRes.billerlogo = billerLogo;
                                        conRes.billername = billerName;
                                        conRes.rescode = rescode;
                                        conRes.resdesc = resdecs;
                                        conRes.ref1 = ref1;
                                        conRes.ref2 = ref2;
                                        conRes.ref3 = ref3;
                                        conRes.ref4 = ref4;
                                        conRes.ref5 = mobileNo;
                                        conRes.ref1Name = ref1Name;
                                        conRes.ref2Name = ref2Name;
                                        conRes.ref3Name = ref3Name;
                                        conRes.ref4Name = ref4Name;
                                        conRes.ref5Name = ref5Name;
                                        conRes.batchID = string.Empty;
                                        conRes.availablebalance = availablebalance.ToString();
                                        conRes.txnID = txnID.ToString();
                                        conRes.TodayTxnCount = TodayTxnCount;
                                        conRes.TodayTxnAmount = TodayTxnAmount;
                                        conRes.smsMsg = smsMsg;
                                        return Utils.getConfirmRes(conRes);
                                    }
                                    else
                                    {

                                        //return GeterrorResponse("06", "Transaction is not successful please tryagain!", txnID, resdecs);
                                        return GetErrorResponseWithAddBalance("06", "Transaction is not successful please tryagain!", txnID, resdecs, agentID, agentAmount, isAgreement);
                                    }
                                    #endregion

                                }
                                else
                                {
                                    //return GeterrorResponse("06", resdecs, txnID, resdecs);
                                    return GetErrorResponseWithAddBalance("06", "Transaction is not successful please tryagain!", txnID, resdecs, agentID, agentAmount, isAgreement);
                                }
                            }
                            else
                            {
                                if (ConfigurationManager.AppSettings["TelenorAirTime"].ToString() == "Y")
                                {

                                    string timediff = "-2";

                                    if (validateTelenorAirtime(ref3, ref2, timediff, out resdecs))
                                    {
                                        #region <-- Request To Telenor AirTimeWCF -->
                                        tlnAirTimeWCF.ServiceClient tlnairtime = new tlnAirTimeWCF.ServiceClient();


                                        responseresult = tlnairtime.UploadWithAirTime(ref2, mobileNo);

                                        ref4 = responseresult.Trim() + " " + DateTime.Now.ToShortDateString();
                                        resdecs = responseresult.ToString().Trim();
                                        writeLog("Response Description:" + resdecs);
                                        writeLog("Response Result From Telenor AirTime:" + responseresult);
                                        writeLog("Length:" + responseresult.Length);
                                        #endregion

                                        #region <-- This Is Telenor AirTime -->
                                        if (responseresult.ToString().Trim() == "OK")
                                        {
                                            writeLog("Response OK");
                                            // ref4 = ref4 + " " + expiry;
                                            //double availablebalance = 0;
                                            //double ledgerbalance = 0;
                                            //string errMsg = null;
                                            amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                            if (!_agentWCF.ConfirmUpdate(txnID,ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                                agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                            {
                                                writeLog("Error in ConfirmUpdate : " + errMsg);
                                            }
                                            else
                                            {
                                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                            }
                                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                            rescode = "00";
                                            resdecs = "Success";


                                            ConfirmResponseModel conRes = new ConfirmResponseModel();
                                            conRes.taxID = taxID;
                                            conRes.email = email;
                                            conRes.password = password;
                                            conRes.messageid = messageid;
                                            conRes.billerlogo = billerLogo;
                                            conRes.billername = billerName;
                                            conRes.rescode = rescode;
                                            conRes.resdesc = resdecs;
                                            conRes.ref1 = ref1;
                                            conRes.ref2 = ref2;
                                            conRes.ref3 = ref3;
                                            conRes.ref4 = ref4;
                                            conRes.ref5 = mobileNo;
                                            conRes.ref1Name = ref1Name;
                                            conRes.ref2Name = ref2Name;
                                            conRes.ref3Name = ref3Name;
                                            conRes.ref4Name = ref4Name;
                                            conRes.ref5Name = ref5Name;
                                            conRes.batchID = string.Empty;
                                            conRes.availablebalance = availablebalance.ToString();
                                            conRes.txnID = txnID.ToString();
                                            conRes.TodayTxnCount = TodayTxnCount;
                                            conRes.TodayTxnAmount = TodayTxnAmount;
                                            conRes.smsMsg = smsMsg;
                                            return Utils.getConfirmRes(conRes);
                                        }
                                        else
                                        {

                                            //return GeterrorResponse("06", "Transaction is not successful please tryagain!", txnID, resdecs);
                                            return GetErrorResponseWithAddBalance("06", "Transaction is not successful please tryagain!", txnID, resdecs, agentID, agentAmount, isAgreement);
                                        }
                                        #endregion

                                    }
                                    else
                                    {
                                        //return GeterrorResponse("06", resdecs, txnID, resdecs);
                                        return GetErrorResponseWithAddBalance("06", "Transaction is not successful please tryagain!", txnID, resdecs, agentID, agentAmount, isAgreement);
                                    }

                                }
                                else if (ConfigurationManager.AppSettings["EBATelenorAirTime"].ToString() == "Y")
                                {
                                    writeLog("$$$$$$$$ This Is EBA Tenenor AirTime $$$$$$$$$");

                                    #region <-- This is Easy Bill -->

                                    //string OoredooNumberlist = ConfigurationManager.AppSettings["OoredooNumber"].ToString();
                                    //if (!isValidPhoneNumber(mobileNo, OoredooNumberlist))
                                    //{

                                    //    string errres = string.Empty;
                                    //    errres = GeterrorResponse("06", "Invalid Mobile Number!", txnID, "Invalid Mobile");
                                    //    writeLog("Err Response MyanpayAir Time:" + errres);
                                    //    return errres;
                                    //}
                                    #region <-- Initialize Variable -->

                                    //mobileNo = ref3;
                                    //ref3 = "Airtime";
                                    string oneStopRef = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                                    EABAirTimeTopUpReq pinreq = new EABAirTimeTopUpReq();
                                    AirTimeTopUpResults pinres = new AirTimeTopUpResults();
                                    string aesKey = string.Empty;

                                    if (IsTokenNullOrExpire(Token))
                                    {
                                        Token = GetOAuthToken();
                                    }

                                    pinreq.Token = Token.Token;
                                    pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                                    pinreq.BillerCode = "Telenor";
                                    pinreq.Amount = ref2;
                                    pinreq.NetworkType = "GSM";
                                    pinreq.ChannelRefID = oneStopRef;
                                    pinreq.MobileNumber = mobileNo;


                                    var json_serializer1 = new JavaScriptSerializer();

                                    string jsonReq = json_serializer1.Serialize(pinreq);
                                    writeLog("ESBA JasonReq:" + jsonReq);
                                    #endregion
                                    //Request PIN To ESBA
                                    string jsonres = string.Empty;

                                    jsonres = Utils.pinRequest(jsonReq, esbAirTimeTopup);


                                    writeLog("ESBA JasonRes:" + jsonres);
                                    if (string.IsNullOrEmpty(jsonres))
                                    {
                                        resdecs = "No Response From ESBA";
                                        rescode = "06";
                                        //if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                                        //{
                                        //    writeLog("Error in updateError : " + errMsg);
                                        //}
                                        //return Utils.getErrorRes(rescode, resdecs);
                                        return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                    }
                                    var json_serializerpinres = new JavaScriptSerializer();
                                    pinres = json_serializerpinres.Deserialize<AirTimeTopUpResults>(jsonres);



                                    if (pinres.AirTimeTopUpResult.TransactionStatus == 0)//|| pinres.AirTimeTopUpResult.ResponseCode == 2
                                    {

                                        ref4 = pinres.AirTimeTopUpResult.ChannelRefID + ":" + pinres.AirTimeTopUpResult.AirTimeToupTransactionID + " " + DateTime.Now.ToShortDateString();
                                        //ref4 = airtimeinqRes.EnquiryAirtimeTopUpResult.ChannelRefID + ":" + airtimeinqRes.EnquiryAirtimeTopUpResult.AirtimeTransactionID + " " + DateTime.Now.ToShortDateString();
                                        //double availablebalance = 0;
                                        //double ledgerbalance = 0;
                                        //string errMsg = null;

                                        amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                        #region <-- Update Transaction -->
                                        if (!_agentWCF.ConfirmUpdate(txnID,ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                            agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                        {
                                            writeLog("Error in ConfirmUpdate : " + errMsg);
                                        }
                                        else
                                        {
                                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                        }
                                        #endregion
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                                        #region <-- Response Back To Client -->
                                        rescode = "00";
                                        resdecs = "Success";
                                        ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                        confirmres.taxID = taxID;
                                        confirmres.email = email;
                                        confirmres.password = password;
                                        confirmres.messageid = messageid;
                                        confirmres.billername = billerName;
                                        confirmres.billerlogo = billerLogo;
                                        confirmres.rescode = rescode;
                                        confirmres.resdesc = resdecs;
                                        confirmres.ref1 = ref1;
                                        confirmres.ref2 = ref2;
                                        confirmres.ref3 = ref3;
                                        confirmres.ref4 = ref4;
                                        confirmres.ref5 = mobileNo;
                                        confirmres.ref1Name = ref1Name;
                                        confirmres.ref2Name = ref2Name;
                                        confirmres.ref3Name = ref3Name;
                                        confirmres.ref5Name = ref5Name;
                                        confirmres.availablebalance = availablebalance.ToString();
                                        confirmres.txnID = txnID.ToString();
                                        confirmres.TodayTxnAmount = TodayTxnAmount;
                                        confirmres.TodayTxnCount = TodayTxnCount;
                                        confirmres.smsMsg = smsMsg;

                                        return Utils.getConfirmRes(confirmres);
                                        #endregion

                                        #region old logic Inquiry status after topup request success.
                                        //EABAirTimeTopUpEnquiryReq airtimeReq = new EABAirTimeTopUpEnquiryReq();
                                        //ebaAirTimeTopUpEnquiryResults airtimeinqRes = new ebaAirTimeTopUpEnquiryResults();

                                        //airtimeReq.Token = Token.Token;
                                        //airtimeReq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                                        //airtimeReq.ChannelRefID = pinreq.ChannelRefID;

                                        //var json_serializer2 = new JavaScriptSerializer();
                                        //string jsonReqinq = json_serializer2.Serialize(pinreq);
                                        //writeLog("EbaTelenorAirtime inqReq:" + jsonReqinq);
                                        //string jsonresinq = Utils.pinRequest(jsonReqinq, esbAirTimeInq);
                                        //writeLog("ebaTelenorAirtime inqRes:" + jsonresinq);
                                        //var json_serializerpinres2 = new JavaScriptSerializer();

                                        //airtimeinqRes = json_serializerpinres2.Deserialize<ebaAirTimeTopUpEnquiryResults>(jsonresinq);
                                        //if (airtimeinqRes.EnquiryAirtimeTopUpResult.ResponseCode == "0" && !string.IsNullOrEmpty(airtimeinqRes.EnquiryAirtimeTopUpResult.ChannelRefID) && !string.IsNullOrEmpty(airtimeinqRes.EnquiryAirtimeTopUpResult.AirtimeTransactionID))
                                        //{

                                        //ref4 = airtimeinqRes.EnquiryAirtimeTopUpResult.ChannelRefID + ":" + airtimeinqRes.EnquiryAirtimeTopUpResult.AirtimeTransactionID + " " + DateTime.Now.ToShortDateString();
                                        ////double availablebalance = 0;
                                        ////double ledgerbalance = 0;
                                        ////string errMsg = null;
                                        //amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                        //#region <-- Update Transaction -->
                                        //if (!_agentWCF.ConfirmUpdate(out  errMsg, out  batchID, out  avalbal, out  legbal, txnID,
                                        //    ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                        //    agentAmount, agentFeeDbl, isAgreement, smsStatus))
                                        //{
                                        //    writeLog("Error in ConfirmUpdate : " + errMsg);
                                        //}
                                        //else
                                        //{
                                        //    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                        //}
                                        //#endregion
                                        //writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                                        //#region <-- Response Back To Client -->
                                        //rescode = "00";
                                        //resdecs = "Success";
                                        //ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                        //confirmres.taxID = taxID;
                                        //confirmres.email = email;
                                        //confirmres.password = password;
                                        //confirmres.messageid = messageid;
                                        //confirmres.billername = billerName;
                                        //confirmres.billerlogo = billerLogo;
                                        //confirmres.rescode = rescode;
                                        //confirmres.resdesc = resdecs;
                                        //confirmres.ref1 = ref1;
                                        //confirmres.ref2 = ref2;
                                        //confirmres.ref3 = ref3;
                                        //confirmres.ref4 = ref4;
                                        //confirmres.ref5 = mobileNo;
                                        //confirmres.ref1Name = ref1Name;
                                        //confirmres.ref2Name = ref2Name;
                                        //confirmres.ref3Name = ref3Name;
                                        //confirmres.ref5Name = ref5Name;
                                        //confirmres.availablebalance = availablebalance.ToString();
                                        //confirmres.txnID = txnID.ToString();
                                        //confirmres.TodayTxnAmount = TodayTxnAmount;
                                        //confirmres.TodayTxnCount = TodayTxnCount;
                                        //confirmres.smsMsg = smsMsg;

                                        //return Utils.getConfirmRes(confirmres);
                                        //#endregion
                                        //  }
                                        //  else
                                        //   {
                                        ////if (!_agentWCF.updateError(out errMsg, txnID, "ER", pinres.AirTimeTopUpResult.ResponseDescription))
                                        ////{
                                        ////    writeLog("Error in updateError : " + errMsg);
                                        ////}
                                        ////return Utils.getErrorRes(pinres.AirTimeTopUpResult.ResponseCode.ToString(), "Transaction Not Successful Please Tryagain!");
                                        //return GetErrorResponseWithAddBalance(pinres.AirTimeTopUpResult.ResponseCode.ToString(), "Transaction Not Successful Please Tryagain!", txnID, pinres.AirTimeTopUpResult.ResponseDescription, agentID, agentAmount, isAgreement);
                                        //  }
                                        #endregion

                                    }
                                    else
                                    {
                                        // resdecs = Utils.EsbResponseDescription(pinres.GetTelcoPINResult.ResponseCode);
                                        //if (!_agentWCF.updateError(out errMsg, txnID, "ER", pinres.AirTimeTopUpResult.ResponseDescription))
                                        //{
                                        //    writeLog("Error in updateError : " + errMsg);
                                        //}
                                        //return Utils.getErrorRes(pinres.AirTimeTopUpResult.ResponseCode.ToString(), "Transaction Not Successful Please Tryagain!");
                                        return GetErrorResponseWithAddBalance(pinres.AirTimeTopUpResult.ResponseCode.ToString(), "Transaction Not Successful Please Tryagain!", txnID, pinres.AirTimeTopUpResult.ResponseDescription, agentID, agentAmount, isAgreement);
                                    }

                                    #endregion

                                }
                                else
                                {
                                    //return GeterrorResponse("06", resdecs, txnID, resdecs);
                                    return GetErrorResponseWithAddBalance("06", resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                }
                            }
                            #endregion

                        }
                        else
                        {
                            #region <-- If TopUp Type is Not AirTime "A" -->
                            if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                            {
                                #region <-- Simulator On -->
                                writeLog("Simulator Y");
                                int batchid = 0;
                                //double availablebalance = 0;
                                //double ledgerbalance = 0;
                                //string errMsg = null;
                                //reqCardType = ref1;
                                //reqCardPrice = ref2;
                                mobileNo = ref3;
                                ref3 = new Random().Next(00000000, 99999999).ToString() + new Random().Next(00000000, 99999999).ToString();
                                ref4 = new Random().Next(00000000, 99999999).ToString() + new Random().Next(00000000, 99999999).ToString();
                                ref4 = ref4 + " 6/12/2016";
                                //amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));   

                                if (!_agentWCF.InsertTransactionLog(txnID, "TopupReq", "Test Req",out errMsg))
                                {
                                    writeLog("Error in InsertTransactionLog Req : " + errMsg);
                                }
                                if (!_agentWCF.InsertTransactionLog(txnID, "TopupRes", "Test Res",out errMsg))
                                {
                                    writeLog("Error in InsertTransactionLog Res : " + errMsg);
                                }

                                //if (_agentWCF.ConfirmUpdate(out  errMsg, out  batchID, out  availablebalance, out  ledgerbalance, txnID,
                                //        ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                //        agentAmount, agentFeeDbl, isAgreement))
                                //{

                                if (!_agentWCF.ConfirmUpdate(txnID,ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                         agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                {
                                    writeLog("Error in ConfirmUpdate : " + errMsg);
                                }
                                else
                                {
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                }
                                // writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                                if (appType == "CS" || appType == "MS")
                                {
                                    if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                    {
                                        SMSHelper smsH = new SMSHelper();
                                        smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                        string[] words = ref4.Split(' ');
                                        string PIN = words[0].ToString();
                                        string Expiry = words[1].ToString();

                                        //smsMsg = smsH.getMessageBiller(agentName, taxID, billerName, "Code", "Expiry", "", "Ref", PIN, Expiry, "", txnID.ToString(),
                                        //double.Parse(amount).ToString("#,##0.00"), serviceFee, totalAmount, branchCode);
                                        smsMsg = smsH.getMessageTopup(agentName, MapTaxID, billerName, PIN, ref3, Expiry, double.Parse(amount).ToString("#,###.00"), branchCode);

                                        try
                                        {
                                            writeLog("sendSMSWithTxnID starts.");
                                            //  smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                            writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                            smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                            writeLog("sendSMSWithTxnID ends.");
                                        }
                                        catch (Exception ex)
                                        {
                                            writeLog("sendSMSWithTxnID error : " + ex.ToString());
                                        }
                                    }

                                }

                                rescode = "00";
                                resdecs = "Success";
                                ConfirmResponseModel conRes = new ConfirmResponseModel();
                                conRes.taxID = taxID;
                                conRes.email = email;
                                conRes.password = password;
                                conRes.messageid = messageid;
                                conRes.billerlogo = billerLogo;
                                conRes.billername = billerName;
                                conRes.rescode = rescode;
                                conRes.resdesc = resdecs;
                                conRes.ref1 = ref1;
                                conRes.ref2 = ref2;
                                conRes.ref3 = ref3;
                                conRes.ref4 = ref4;
                                conRes.ref5 = mobileNo;
                                conRes.ref1Name = ref1Name;
                                conRes.ref2Name = ref2Name;
                                conRes.ref3Name = ref3Name;
                                conRes.ref4Name = ref4Name;
                                conRes.ref5Name = ref5Name;
                                conRes.batchID = string.Empty;
                                conRes.availablebalance = availablebalance.ToString();
                                conRes.txnID = txnID.ToString();
                                conRes.TodayTxnCount = TodayTxnCount;
                                conRes.TodayTxnAmount = TodayTxnAmount;
                                conRes.smsMsg = smsMsg;
                                return Utils.getConfirmRes(conRes);


                                #endregion
                            }
                            else
                            {
                                if (ConfigurationManager.AppSettings["IsTelenorMyanPay"].ToString() == "Y")
                                {
                                    #region <-- When MyanPay Flat is Y -->
                                    writeLog("$$$$$$$$$$$$$$$$ This Is TELENOR Request Myan Pay  $$$$$$$$$$$$$$$");
                                    amt = double.Parse((double.Parse(ref2)).ToString("###0.00"));
                                    mobileNo = ref3;



                                    string msg = string.Empty;




                                    #region <-- Variable Declaraction and assigning for myanpay request -->
                                    TopupService.ResellerServiceClient topupwcf = new TopupService.ResellerServiceClient();
                                    TopupService.PrepaidCardResellerRequest topuprequest = new TopupService.PrepaidCardResellerRequest();
                                    TopupService.PrepaidCardResellerResponse topupresponse = new TopupService.PrepaidCardResellerResponse();
                                    TopupService.AuthenticationRequest authrequest = new TopupService.AuthenticationRequest();
                                    TopupService.AuthenticationResponse authresponse = new TopupService.AuthenticationResponse();
                                    string reqresellerID, reqresellerName, reqstrPassword, IV, KEY, reqCardType, reqCardPrice;
                                    IV = ConfigurationManager.AppSettings["TopupIV"].ToString();
                                    KEY = ConfigurationManager.AppSettings["TopupKEY"].ToString();
                                    reqresellerID = ConfigurationManager.AppSettings["TopupResellerID"].ToString();
                                    reqresellerName = ConfigurationManager.AppSettings["TopupResellerName"].ToString();
                                    reqstrPassword = ConfigurationManager.AppSettings["TopupResellerPassword"].ToString();
                                    reqCardType = ref1;
                                    reqCardPrice = ref2;
                                    string tokenkey = "";
                                    StringBuilder sberror = new StringBuilder();
                                    bool authResult = false;
                                    // string mobileNo="";
                                    // mobileNo = ref3;
                                    string resResponseMessage, resErrorMessage, resResellerID, resExpiryDate = "", resSerialNumber = "", resPinNumber = "", resInvoiceID = "";
                                    ///AuthRequest & Response
                                    #endregion
                                    try
                                    {
                                        #region <-- Authenticate to myanpay -->
                                        authrequest.CredentialPassword = TopupEncrypt(reqstrPassword, KEY, IV);
                                        authrequest.CredentialUserName = TopupEncrypt(reqresellerName, KEY, IV);
                                        writeLog("Topup Auth Request : CredentialUserName = " + reqresellerName + ",CredentialPassword = " + reqstrPassword);
                                        authresponse = topupwcf.AuthenticationAPI(authrequest);

                                        if (authresponse.ResponseMessage != null)
                                        {
                                            if (authresponse.ResponseMessage == "Success")
                                            {
                                                authResult = true;
                                            }
                                            else
                                            {
                                                writeLog("Fail Auth Request");
                                            }
                                        }

                                        if (authresponse.ResellerAPIToken != null)
                                        {
                                            tokenkey = authresponse.ResellerAPIToken;

                                            authResult = true;
                                        }

                                        if (!String.IsNullOrEmpty(authresponse.ErrorMessage))
                                        {
                                            resdecs = authresponse.ErrorMessage;
                                            writeLog("Auth Error Message : " + authresponse.ErrorMessage);
                                        }

                                        if (!authResult)
                                        {
                                            //return GeterrorResponse("06", resdecs, txnID, resdecs);
                                            return GetErrorResponseWithAddBalance("06", resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                        }
                                        #endregion
                                    }
                                    catch (Exception ex)
                                    {
                                        #region <-- Exception hendler for myanpay authentication -->
                                        writeLog("Error in Topup Auth Request :" + ex.ToString());

                                        //return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                                        return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                        #endregion
                                    }

                                    if (authResult && !String.IsNullOrEmpty(authresponse.ResellerAPIToken))
                                    {
                                        writeLog("Success Auth Request");
                                        writeLog("Topup Auth Response : ResponseMessage = " + authresponse.ResponseMessage + ",ResellerAPIToken = " + authresponse.ResellerAPIToken);
                                        bool topupresult = false;
                                        try
                                        {
                                            //Request

                                            #region <-- Requesting for topup -->
                                            topuprequest.ResellerID = TopupEncrypt(reqresellerID, KEY, IV);
                                            topuprequest.ResellerAPIToken = authresponse.ResellerAPIToken;
                                            topuprequest.CardType = TopupEncrypt(reqCardType, KEY, IV);
                                            topuprequest.CardPrice = TopupEncrypt(reqCardPrice, KEY, IV);

                                            if (!_agentWCF.InsertTransactionLog(txnID, "TopupReq", "ResellerID=" + topuprequest.ResellerID + ",ResellerAPIToken=" + topuprequest.ResellerAPIToken +
                                                ",CardType=" + topuprequest.CardType + ",CardPrice=" + topuprequest.CardPrice,out errMsg))
                                            {
                                                writeLog("Error in InsertTransactionLog Req : " + errMsg);
                                            }

                                            topupresponse = topupwcf.SoldOutPrepaidCard(topuprequest);

                                            writeLog("Topup Paid Request : ResellerID = " + reqresellerID + ",ResellerAPIToken = " + authresponse.ResellerAPIToken + ",CardType = " + reqCardType + ",CardPrice = " + reqCardPrice);

                                            #endregion

                                            ///Response

                                            #region <-- Topup response -->
                                            if (!String.IsNullOrEmpty(topupresponse.ResponseMessage))
                                            {
                                                if (topupresponse.ResponseMessage == "Success")
                                                {
                                                    topupresult = true;
                                                    resResponseMessage = topupresponse.ResponseMessage;
                                                }

                                            }
                                            if (!String.IsNullOrEmpty(topupresponse.ErrorMessage))
                                            {
                                                resErrorMessage = topupresponse.ErrorMessage;
                                                writeLog("Topup Response Error : " + topupresponse.ErrorMessage);
                                            }
                                            if (!String.IsNullOrEmpty(topupresponse.ResellerID))
                                            {
                                                resResellerID = TopupDecrypt(topupresponse.ResellerID, KEY, IV);
                                                topupresult = true;
                                            }
                                            if (!String.IsNullOrEmpty(topupresponse.SerialNumber))
                                            {
                                                ref3 = TopupDecrypt(topupresponse.SerialNumber, KEY, IV);
                                                topupresult = true;
                                            }
                                            if (!String.IsNullOrEmpty(topupresponse.PinNumber))
                                            {
                                                ref4 = TopupDecrypt(topupresponse.PinNumber, KEY, IV);
                                                topupresult = true;
                                            }
                                            if (!String.IsNullOrEmpty(topupresponse.InvoiceID))
                                            {
                                                ref5 = TopupDecrypt(topupresponse.InvoiceID, KEY, IV);
                                                topupresult = true;
                                            }
                                            if (!String.IsNullOrEmpty(topupresponse.ExpiredDate))
                                            {
                                                resExpiryDate = TopupDecrypt(topupresponse.ExpiredDate, KEY, IV);
                                                ref4 = ref4 + " " + resExpiryDate;
                                                topupresult = true;
                                            }

                                            if (!_agentWCF.InsertTransactionLog(txnID, "TopupRes", "ResellerID=" + topupresponse + ",SerialNo=" + resSerialNumber +
                                                ",PinNumber=" + resPinNumber + ",InvoiceID=" + resInvoiceID + ",Expiry=" + resExpiryDate,out errMsg))
                                            {
                                                writeLog("Error in InsertTransactionLog Res : " + errMsg);
                                            }
                                            #endregion

                                            if (topupresult)
                                            {
                                                #region <-- If topupresult is true -->
                                                writeLog("Topup Paid Response : ResponseMessage = " + topupresponse.ResponseMessage + ",resResellerID = " + topupresponse + ",resSerialNumber = " + resSerialNumber +
                                                    ",resPinNumber = " + resPinNumber + ",resInvoiceID = " + resInvoiceID + ",resExpiryDate = " + resExpiryDate);
                                                int batchid = 0;
                                                //double availablebalance = 0;
                                                //double ledgerbalance = 0;
                                                //string errMsg = null;
                                                amt = double.Parse((double.Parse(reqCardPrice)).ToString("#,##0.00"));

                                                if (!_agentWCF.ConfirmUpdate(txnID,ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                                        agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                                {
                                                    writeLog("Error in ConfirmUpdate : " + errMsg);

                                                }
                                                else
                                                {
                                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                                                }
                                                ref3 = Utils.maskString(ref3);
                                                if (appType == "CS" || appType == "MS")
                                                {
                                                    if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                                    {
                                                        SMSHelper smsH = new SMSHelper();
                                                        smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                                        string[] words = ref4.Split(' ');
                                                        string PIN = words[0].ToString();
                                                        string Expiry = words[1].ToString();
                                                        //taxID == "0000000000001" ||

                                                        smsMsg = smsH.getMessageTopup(agentName, MapTaxID, billerName, PIN, ref3, Expiry, double.Parse(amount).ToString("#,###.00"), branchCode);

                                                        try
                                                        {
                                                            writeLog("sendSMSWithTxnID starts.");
                                                            // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                                            writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                                            smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                                            writeLog("sendSMSWithTxnID ends.");
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //To Develop Airtime
                                                    }
                                                }



                                                rescode = "00";
                                                resdecs = "Success";

                                                ConfirmResponseModel conRes = new ConfirmResponseModel();
                                                conRes.taxID = taxID;
                                                conRes.email = email;
                                                conRes.password = password;
                                                conRes.messageid = messageid;
                                                conRes.billerlogo = billerLogo;
                                                conRes.billername = billerName;
                                                conRes.rescode = rescode;
                                                conRes.resdesc = resdecs;
                                                conRes.ref1 = ref1;
                                                conRes.ref2 = ref2;
                                                conRes.ref3 = ref3;
                                                conRes.ref4 = ref4;
                                                conRes.ref5 = mobileNo;
                                                conRes.ref1Name = ref1Name;
                                                conRes.ref2Name = ref2Name;
                                                conRes.ref3Name = ref3Name;
                                                conRes.ref4Name = ref4Name;
                                                conRes.ref5Name = ref5Name;
                                                conRes.batchID = batchid.ToString();
                                                conRes.availablebalance = availablebalance.ToString();
                                                conRes.txnID = txnID.ToString();
                                                conRes.TodayTxnCount = TodayTxnCount;
                                                conRes.TodayTxnAmount = TodayTxnAmount;
                                                conRes.smsMsg = smsMsg;
                                                return Utils.getConfirmRes(conRes);
                                                #endregion
                                            }
                                            else
                                            {
                                                #region <-- If topupresult is false -->
                                                writeLog("Error in Paid Response.");
                                                if (!String.IsNullOrEmpty(errmsg))
                                                {
                                                    string customMessage = errmsg.ToString();
                                                }


                                                //return GeterrorResponse("06", topupresponse.ErrorMessage, txnID, topupresponse.ErrorMessage);
                                                return GetErrorResponseWithAddBalance("06", topupresponse.ErrorMessage, txnID, topupresponse.ErrorMessage, agentID, agentAmount, isAgreement);
                                                #endregion
                                            }




                                        }
                                        catch (Exception Ex)
                                        {
                                            writeLog("Error in Topup Paid Request :" + Ex.ToString());
                                            rescode = "99";
                                            resdecs = "System Error";

                                            //return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                        }
                                    }
                                    #endregion

                                }
                                else
                                {
                                    // ref4 = ref4 + " " + resExpiryDate;
                                    mobileNo = ref3;
                                    amt = double.Parse((double.Parse(ref2)).ToString("###0.00"));

                                    if (ConfigurationManager.AppSettings["EBATelenorDirect"].ToString() == "Y")
                                    {
                                        #region <-- This IS EBA only -->
                                        #region <-- Initialize Variable -->
                                        writeLog("$$$$$$$$$ This Is ESBA $$$$$$$$$$$$$");
                                        pinReq pinreq = new pinReq();
                                        GetTelcoPINResults pinres = new GetTelcoPINResults();
                                        string aesKey = string.Empty;
                                        aesKey = ConfigurationManager.AppSettings["EsbaAesKey"].ToString();
                                        if (IsTokenNullOrExpire(Token))
                                        {
                                            Token = GetOAuthToken();
                                        }


                                        pinreq.Token = Token.Token;
                                        pinreq.BillerCode = "Telenor";
                                        pinreq.NetworkType = ConfigurationManager.AppSettings["EsbGSMWCDMA"].ToString();
                                        pinreq.PriceType = ref2;
                                        pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                                        pinreq.ChannelRefID = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                                        amt = double.Parse((double.Parse(ref2)).ToString("###0.00"));
                                        //  mobileNo = ref3;

                                        var json_serializer1 = new JavaScriptSerializer();

                                        string jsonReq = json_serializer1.Serialize(pinreq);
                                        writeLog("ESBA JasonReq:" + jsonReq);
                                        #endregion
                                        //Request PIN To ESBA
                                        string jsonres = Utils.pinRequest(jsonReq, esbGetPinMethod);

                                        writeLog("ESBA JasonRes:" + jsonres);
                                        if (string.IsNullOrEmpty(jsonres))
                                        {
                                            resdecs = "No Response From ESBA";
                                            rescode = "06";
                                            //return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                        }
                                        var json_serializerpinres = new JavaScriptSerializer();
                                        pinres = json_serializerpinres.Deserialize<GetTelcoPINResults>(jsonres);


                                        if (pinres.GetTelcoPINResult.TransactionStatus == "0" && !string.IsNullOrEmpty(pinres.GetTelcoPINResult.PIN))
                                        {
                                            writeLog("$$$$$$$$$$$$$$$$$ GET TELENORPIN FROM ESBA OK $$$$$$$$$$$$$$$$$$$$$$$");
                                            pinres.GetTelcoPINResult.PIN = Utils.AESDecryptText(pinres.GetTelcoPINResult.PIN, aesKey);
                                            ref4 = pinres.GetTelcoPINResult.PIN + " " + pinres.GetTelcoPINResult.ExpiryDate;
                                            ref3 = pinres.GetTelcoPINResult.SerialNumber;

                                            //double availablebalance = 0;
                                            //double ledgerbalance = 0;
                                            //string errMsg = null;
                                            amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                            #region <-- Update Transaction -->

                                            if (!_agentWCF.ConfirmUpdate(txnID,
                                                ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                                agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                            {
                                                writeLog("Error in ConfirmUpdate : " + errMsg);
                                                resdecs = "Error in update database";
                                                rescode = "06";
                                                if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                                                {
                                                    writeLog("Error in updateError : " + errMsg);
                                                }
                                                return Utils.getErrorRes(rescode, "Transaction fail");
                                            }
                                            else
                                            {
                                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                            }
                                            #endregion
                                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                            ref3 = Utils.maskString(ref3);
                                            #region <-- Send SMS -->
                                            if (appType == "CS" || appType == "MS")
                                            {
                                                if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                                {
                                                    SMSHelper smsH = new SMSHelper();
                                                    smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                                    string[] words = ref4.Split(' ');
                                                    string PIN = words[0].ToString();
                                                    string Expiry = words[1].ToString();

                                                    smsMsg = smsH.getMessageTopup(agentName, MapTaxID, billerName, PIN, ref3, Expiry, double.Parse(amount).ToString("#,###.00"), branchCode);

                                                    try
                                                    {
                                                        writeLog("sendSMSWithTxnID starts.");
                                                        //  smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                                        writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                                        smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                                        writeLog("sendSMSWithTxnID ends.");
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                    }
                                                }
                                                else
                                                {
                                                    //To Develop Airtime
                                                }
                                            }
                                            #endregion
                                            #region <-- Response Back To Client -->
                                            rescode = "00";
                                            resdecs = "Success";
                                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                            confirmres.taxID = taxID;
                                            confirmres.email = email;
                                            confirmres.password = password;
                                            confirmres.messageid = messageid;
                                            confirmres.billername = billerName;
                                            confirmres.billerlogo = billerLogo;
                                            confirmres.rescode = rescode;
                                            confirmres.resdesc = resdecs;
                                            confirmres.ref1 = ref1;
                                            confirmres.ref2 = ref2;
                                            confirmres.ref3 = ref3;
                                            confirmres.ref4 = ref4;
                                            confirmres.ref5 = mobileNo;
                                            confirmres.ref1Name = ref1Name;
                                            confirmres.ref2Name = ref2Name;
                                            confirmres.ref3Name = ref3Name;
                                            confirmres.ref5Name = ref5Name;
                                            confirmres.availablebalance = availablebalance.ToString();
                                            confirmres.txnID = txnID.ToString();
                                            confirmres.TodayTxnAmount = TodayTxnAmount;
                                            confirmres.TodayTxnCount = TodayTxnCount;
                                            confirmres.smsMsg = smsMsg;

                                            return Utils.getConfirmRes(confirmres);
                                            #endregion



                                        }
                                        else
                                        {

                                            resdecs = Utils.EsbResponseDescription(pinres.GetTelcoPINResult.ResponseCode);
                                            //if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                                            //{
                                            //    writeLog("Error in updateError : " + errMsg);
                                            //}
                                            //return Utils.getErrorRes(pinres.GetTelcoPINResult.ResponseCode, "Out of Stock");
                                            return GetErrorResponseWithAddBalance(pinres.GetTelcoPINResult.ResponseCode, "Out of Stock", txnID, resdecs, agentID, agentAmount, isAgreement);
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        #region <-- Get Telenor Pin From DB -->
                                        telenorWCF.PINServiceClient tlnWS = new telenorWCF.PINServiceClient();

                                        if (tlnWS.getPIN(out resdecs, out ref4, out expiry, out ref3, amt))
                                        {
                                            #region <-- Telenor PINs from TelcoPIN DB -->
                                            writeLog("$$$$$$$$$$$$$$$$$ GET TELENORPIN FROM 1Stop DB OK $$$$$$$$$$$$$$$$$$$$$$$");
                                            ref4 = ref4 + " " + expiry;
                                            //double availablebalance = 0;
                                            //double ledgerbalance = 0;
                                            //string errMsg = null;
                                            amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));


                                            //if (_agentWCF.ConfirmUpdate(out  errMsg, out  batchID, out  availablebalance, out  ledgerbalance, txnID,
                                            //                   ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                            //                   agentAmount, agentFeeDbl, isAgreement))

                                            //{
                                            if (!_agentWCF.ConfirmUpdate(txnID,ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                                agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                            {
                                                writeLog("Error in ConfirmUpdate : " + errMsg);
                                                resdecs = "Error in update database";
                                                rescode = "06";
                                                if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                                                {
                                                    writeLog("Error in updateError : " + errMsg);
                                                }
                                                return Utils.getErrorRes(rescode, "Transaction fail");
                                            }
                                            else
                                            {
                                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                            }
                                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                            ref3 = Utils.maskString(ref3);
                                            if (appType == "CS" || appType == "MS")
                                            {
                                                if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                                {
                                                    SMSHelper smsH = new SMSHelper();
                                                    smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                                    string[] words = ref4.Split(' ');
                                                    string PIN = words[0].ToString();
                                                    string Expiry = words[1].ToString();

                                                    smsMsg = smsH.getMessageTopup(agentName, MapTaxID, billerName, PIN, ref3, Expiry, double.Parse(amount).ToString("#,###.00"), branchCode);


                                                    try
                                                    {
                                                        writeLog("sendSMSWithTxnID starts.");
                                                        //  smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                                        writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                                        smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                                        writeLog("sendSMSWithTxnID ends.");
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                    }
                                                }
                                                else
                                                {
                                                    //To Develop Airtime
                                                }
                                            }



                                            rescode = "00";
                                            resdecs = "Success";

                                            ConfirmResponseModel conRes = new ConfirmResponseModel();
                                            conRes.taxID = taxID;
                                            conRes.email = email;
                                            conRes.password = password;
                                            conRes.messageid = messageid;
                                            conRes.billerlogo = billerLogo;
                                            conRes.billername = billerName;
                                            conRes.rescode = rescode;
                                            conRes.resdesc = resdecs;
                                            conRes.ref1 = ref1;
                                            conRes.ref2 = ref2;
                                            conRes.ref3 = ref3;
                                            conRes.ref4 = ref4;
                                            conRes.ref5 = mobileNo;
                                            conRes.ref1Name = ref1Name;
                                            conRes.ref2Name = ref2Name;
                                            conRes.ref3Name = ref3Name;
                                            conRes.ref4Name = ref4Name;
                                            conRes.ref5Name = ref5Name;
                                            conRes.batchID = string.Empty;
                                            conRes.availablebalance = availablebalance.ToString();
                                            conRes.txnID = txnID.ToString();
                                            conRes.TodayTxnCount = TodayTxnCount;
                                            conRes.TodayTxnAmount = TodayTxnAmount;
                                            conRes.smsMsg = smsMsg;
                                            return Utils.getConfirmRes(conRes);
                                            #endregion
                                        }
                                        else if (ConfigurationManager.AppSettings["IsESBATELENOR"].ToString() == "Y")
                                        {
                                            #region <-- Telenor PINs from EBA -->
                                            writeLog("$$$$$$$$$$$$$$$$$$$ Get TELENORPINS for 1Stop DB Not OK This Is Easy Bills $$$$$$$$$$$$$");
                                            #region <-- Initialize Variable -->
                                            writeLog("$$$$$$$$$ This Is ESBA $$$$$$$$$$$$$");
                                            pinReq pinreq = new pinReq();
                                            GetTelcoPINResults pinres = new GetTelcoPINResults();
                                            string aesKey = string.Empty;
                                            aesKey = ConfigurationManager.AppSettings["EsbaAesKey"].ToString();
                                            if (IsTokenNullOrExpire(Token))
                                            {
                                                Token = GetOAuthToken();
                                            }


                                            pinreq.Token = Token.Token;
                                            pinreq.BillerCode = "Telenor";
                                            pinreq.NetworkType = ConfigurationManager.AppSettings["EsbGSMWCDMA"].ToString();
                                            pinreq.PriceType = ref2;
                                            pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                                            pinreq.ChannelRefID = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                                            amt = double.Parse((double.Parse(ref2)).ToString("###0.00"));
                                            //  mobileNo = ref3;

                                            var json_serializer1 = new JavaScriptSerializer();

                                            string jsonReq = json_serializer1.Serialize(pinreq);
                                            writeLog("ESBA JasonReq:" + jsonReq);
                                            #endregion
                                            //Request PIN To ESBA
                                            string jsonres = Utils.pinRequest(jsonReq, esbGetPinMethod);
                                            writeLog("ESBA JasonRes:" + jsonres);
                                            if (string.IsNullOrEmpty(jsonres))
                                            {
                                                resdecs = "No Response From ESBA";
                                                rescode = "06";
                                                //return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                                                return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                            }
                                            var json_serializerpinres = new JavaScriptSerializer();
                                            pinres = json_serializerpinres.Deserialize<GetTelcoPINResults>(jsonres);


                                            if (pinres.GetTelcoPINResult.TransactionStatus == "0" && !string.IsNullOrEmpty(pinres.GetTelcoPINResult.PIN))
                                            {
                                                writeLog("$$$$$$$$$$$$$$$$$ GET TELENORPIN FROM ESBA OK $$$$$$$$$$$$$$$$$$$$$$$");
                                                pinres.GetTelcoPINResult.PIN = Utils.AESDecryptText(pinres.GetTelcoPINResult.PIN, aesKey);
                                                ref4 = pinres.GetTelcoPINResult.PIN + " " + pinres.GetTelcoPINResult.ExpiryDate;
                                                ref3 = pinres.GetTelcoPINResult.SerialNumber;

                                                //double availablebalance = 0;
                                                //double ledgerbalance = 0;
                                                //string errMsg = null;
                                                amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                                #region <-- Update Transaction -->

                                                if (!_agentWCF.ConfirmUpdate(txnID,ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                                    agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                                {
                                                    writeLog("Error in ConfirmUpdate : " + errMsg);
                                                    resdecs = "Error in update database";
                                                    rescode = "06";
                                                    if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                                                    {
                                                        writeLog("Error in updateError : " + errMsg);
                                                    }
                                                    return Utils.getErrorRes(rescode, "Transaction fail");
                                                }
                                                else
                                                {
                                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                                }
                                                #endregion
                                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                                ref3 = Utils.maskString(ref3);
                                                #region <-- Send SMS -->
                                                if (appType == "CS" || appType == "MS")
                                                {
                                                    if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                                    {
                                                        SMSHelper smsH = new SMSHelper();
                                                        smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                                        string[] words = ref4.Split(' ');
                                                        string PIN = words[0].ToString();
                                                        string Expiry = words[1].ToString();

                                                        smsMsg = smsH.getMessageTopup(agentName, MapTaxID, billerName, PIN, ref3, Expiry, double.Parse(amount).ToString("#,###.00"), branchCode);

                                                        try
                                                        {
                                                            writeLog("sendSMSWithTxnID starts.");
                                                            //  smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                                            writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                                            smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                                            writeLog("sendSMSWithTxnID ends.");
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //To Develop Airtime
                                                    }
                                                }
                                                #endregion
                                                #region <-- Response Back To Client -->
                                                rescode = "00";
                                                resdecs = "Success";
                                                ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                                confirmres.taxID = taxID;
                                                confirmres.email = email;
                                                confirmres.password = password;
                                                confirmres.messageid = messageid;
                                                confirmres.billername = billerName;
                                                confirmres.billerlogo = billerLogo;
                                                confirmres.rescode = rescode;
                                                confirmres.resdesc = resdecs;
                                                confirmres.ref1 = ref1;
                                                confirmres.ref2 = ref2;
                                                confirmres.ref3 = ref3;
                                                confirmres.ref4 = ref4;
                                                confirmres.ref5 = mobileNo;
                                                confirmres.ref1Name = ref1Name;
                                                confirmres.ref2Name = ref2Name;
                                                confirmres.ref3Name = ref3Name;
                                                confirmres.ref5Name = ref5Name;
                                                confirmres.availablebalance = availablebalance.ToString();
                                                confirmres.txnID = txnID.ToString();
                                                confirmres.TodayTxnAmount = TodayTxnAmount;
                                                confirmres.TodayTxnCount = TodayTxnCount;
                                                confirmres.smsMsg = smsMsg;

                                                return Utils.getConfirmRes(confirmres);
                                                #endregion



                                            }
                                            else
                                            {
                                                resdecs = Utils.EsbResponseDescription(pinres.GetTelcoPINResult.ResponseCode);
                                                //if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                                                //{
                                                //    writeLog("Error in updateError : " + errMsg);
                                                //}
                                                //return Utils.getErrorRes(pinres.GetTelcoPINResult.ResponseCode, "Out of Stock");
                                                return GetErrorResponseWithAddBalance(pinres.GetTelcoPINResult.ResponseCode, "Out of Stock", txnID, resdecs, agentID, agentAmount, isAgreement);
                                            }
                                            #endregion
                                        }
                                        else
                                        {
                                            writeLog("Error in getPIN of Telenor.");
                                            if (!String.IsNullOrEmpty(errmsg))
                                            {
                                                string customMessage = errmsg.ToString();
                                            }


                                            //return GeterrorResponse("06", resdecs, txnID, resdecs);
                                            return GetErrorResponseWithAddBalance("06", "Out of Stock", txnID, resdecs, agentID, agentAmount, isAgreement);
                                        }
                                        #endregion
                                    }


                                }
                            }
                            #endregion
                        }

                    }

                    #endregion

                    #region <-- OoredooE_Load -->

                    else if (MapTaxID == "0000000000062")
                    {
                        double avalbal = 0;
                        double legbal = 0;

                        #region <-- Airtime Topup -->
                        writeLog("This is Ooredoo Airtime topup.");
                        rescode = "01";
                        resdecs = "Airtime Topup is NOT Available.";
                        mobileNo = ref3;
                        ref3 = "Airtime";

                        if (CheckIsMyanPayAirtime(MapTaxID))
                        {
                            writeLog("$$$$$$$ This Is Ooredoo Myanpay AirTime $$$$$$$$");
                            #region <-- Myanpay Ooredoo airtime -->
                            string OoredooNumberlist = ConfigurationManager.AppSettings["OoredooNumber"].ToString();
                            if (!isValidPhoneNumber(mobileNo, OoredooNumberlist))
                            {
                               
                                rescode = "06";
                                resdecs = "Invalid Mobile Number!";
                                return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                            }


                            string myanpayRefCode = "2C2P" + System.DateTime.Now.ToString("yyMMddhhmmssffff");


                            MyanPay_ELoadRequest myanpayEloadReq = new MyanPay_ELoadRequest();
                            myanpayEloadReq.MobileNumber = mobileNo;
                            myanpayEloadReq.OrderNumber = myanpayRefCode;
                            myanpayEloadReq.TopUpAmount = ref2;
                           
                            MyanPay_ELoadResponse mpteloadres = MyanpayAirtime(myanpayEloadReq);
                            if (!mpteloadres.result)
                            {
                                return GetErrorResponseWithAddBalance("06", "Transaction is not successful please tryagain!", txnID, mpteloadres.ResponseMessage, agentID, agentAmount, isAgreement);
                            }
                            else
                            {
                               
                                ref4 = mpteloadres.InvoiceNumber + ":" + mpteloadres.OrderNumber + " " + mpteloadres.DateTime;
                                resdecs = mpteloadres.ResponseMessage.ToString().Trim();
                                writeLog("Response Description MyanPay:" + resdecs);
                                writeLog("Response Result From MyanPay AirTime:" + mpteloadres.Status);

                                ConfirmResponseModel confirmresmdl = new ConfirmResponseModel();
                                if (!_agentWCF.ConfirmUpdate(txnID,
                                    ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                    agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                                {
                                    writeLog("Error in ConfirmUpdate : " + errMsg);
                                }
                                else
                                {
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                }
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                rescode = "00";
                                resdecs = "Success";

                                #region <-- Initiate confirmResponse Data to client -->
                                confirmresmdl.taxID = taxID;
                                confirmresmdl.email = email;
                                confirmresmdl.password = password;
                                confirmresmdl.messageid = messageid;
                                confirmresmdl.billername = billerName;
                                confirmresmdl.billerlogo = billerLogo;
                                confirmresmdl.rescode = rescode;
                                confirmresmdl.resdesc = resdecs;
                                confirmresmdl.ref1 = ref1;
                                confirmresmdl.ref2 = ref2;
                                confirmresmdl.ref3 = ref3;
                                confirmresmdl.ref4 = ref4;
                                confirmresmdl.ref5 = mobileNo;
                                confirmresmdl.ref1Name = ref1Name;
                                confirmresmdl.ref2Name = ref2Name;
                                confirmresmdl.ref3Name = ref3Name;
                                confirmresmdl.ref4Name = ref4Name;
                                confirmresmdl.ref5Name = ref5Name;
                                confirmresmdl.availablebalance = availablebalance.ToString();
                                confirmresmdl.txnID = txnID.ToString();
                                confirmresmdl.TodayTxnCount = TodayTxnCount;
                                confirmresmdl.TodayTxnAmount = TodayTxnAmount;
                                confirmresmdl.smsMsg = smsMsg;
                                #endregion

                                string confirmRes = Utils.getConfirmRes(confirmresmdl);

                                writeLog("Confirm Res:" + confirmRes);

                                return confirmRes;


                            }
                            #endregion
                        }
                        else if (CheckIsEBAAirtime(MapTaxID))
                        {
                            writeLog("$$$$$$$$ This Is EBA Ooredoo AirTime $$$$$$$$$");


                            #region <-- This is Easy Bill -->

                            string OoredooNumberlist = ConfigurationManager.AppSettings["OoredooNumber"].ToString();
                            if (!isValidPhoneNumber(mobileNo, OoredooNumberlist))
                            {                               
                                rescode = "06";
                                resdecs = "Invalid Mobile Number!";
                                return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                            }
                            #region <-- Initialize Variable -->                           
                            string oneStopRef = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                            EABAirTimeTopUpReq pinreq = new EABAirTimeTopUpReq();
                            AirTimeTopUpResults pinres = new AirTimeTopUpResults();
                            string aesKey = string.Empty;

                            if (IsTokenNullOrExpire(Token))
                            {
                                Token = GetOAuthToken();
                            }

                            pinreq.Token = Token.Token;
                            pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                            pinreq.BillerCode = "Ooredoo";
                            pinreq.Amount = ref2;
                            pinreq.NetworkType = "GSM";
                            pinreq.ChannelRefID = oneStopRef;
                            pinreq.MobileNumber = mobileNo;


                            var json_serializer1 = new JavaScriptSerializer();

                            string jsonReq = json_serializer1.Serialize(pinreq);
                            writeLog("ESBA JasonReq:" + jsonReq);
                            #endregion
                            //Request PIN To ESBA
                            string jsonres = string.Empty;

                            jsonres = Utils.pinRequest(jsonReq, esbAirTimeTopup);

                            writeLog("ESBA JasonRes:" + jsonres);
                            if (string.IsNullOrEmpty(jsonres))
                            {
                                resdecs = "No Response From ESBA";
                                rescode = "06";
                                return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                            }
                            var json_serializerpinres = new JavaScriptSerializer();
                            pinres = json_serializerpinres.Deserialize<AirTimeTopUpResults>(jsonres);



                            if (pinres.AirTimeTopUpResult.TransactionStatus == 0)
                            {
                                ref4 = pinres.AirTimeTopUpResult.ChannelRefID + ":" + pinres.AirTimeTopUpResult.AirTimeToupTransactionID + " " + DateTime.Now.ToShortDateString();
                               
                                amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                #region <-- Update Transaction -->
                                if (!_agentWCF.ConfirmUpdate(txnID,
                                    ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                    agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                                {
                                    writeLog("Error in ConfirmUpdate : " + errMsg);
                                }
                                else
                                {
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                }
                                #endregion
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());


                                rescode = "00";
                                resdecs = "Success";
                                ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                confirmres.taxID = taxID;
                                confirmres.email = email;
                                confirmres.password = password;
                                confirmres.messageid = messageid;
                                confirmres.billername = billerName;
                                confirmres.billerlogo = billerLogo;
                                confirmres.rescode = rescode;
                                confirmres.resdesc = resdecs;
                                confirmres.ref1 = ref1;
                                confirmres.ref2 = ref2;
                                confirmres.ref3 = ref3;
                                confirmres.ref4 = ref4;
                                confirmres.ref5 = mobileNo;
                                confirmres.ref1Name = ref1Name;
                                confirmres.ref2Name = ref2Name;
                                confirmres.ref3Name = ref3Name;
                                confirmres.ref5Name = ref5Name;
                                confirmres.availablebalance = availablebalance.ToString();
                                confirmres.txnID = txnID.ToString();
                                confirmres.TodayTxnAmount = TodayTxnAmount;
                                confirmres.TodayTxnCount = TodayTxnCount;
                                confirmres.smsMsg = smsMsg;

                                return Utils.getConfirmRes(confirmres);
                               
                            }
                            else
                            {                                
                                return GetErrorResponseWithAddBalance(pinres.AirTimeTopUpResult.ResponseCode.ToString(), "Transaction Not Successful Please Tryagain!", txnID, pinres.AirTimeTopUpResult.ResponseDescription, agentID, agentAmount, isAgreement);
                            }

                            #endregion

                        }
                        else
                        {                            
                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                        #endregion

                    }
                    #endregion

                    #region <-- OOredoo -->

                    if (MapTaxID == "6666666666666")
                    {
                        double avalbal = 0;
                        double legbal = 0;

                        if (topupType == "A")
                        {
                            #region <-- Airtime Topup -->
                            writeLog("This is Ooredoo Airtime topup.");
                            rescode = "01";
                            resdecs = "Airtime Topup is NOT Available.";
                            mobileNo = ref3;
                            ref3 = "Airtime";

                            if (CheckIsMyanPayAirtime(MapTaxID))
                            {
                                writeLog("$$$$$$$ This Is Ooredoo Myanpay AirTime $$$$$$$$");
                                #region <-- Myanpay Ooredoo airtime -->
                                string OoredooNumberlist = ConfigurationManager.AppSettings["OoredooNumber"].ToString();
                                if (!isValidPhoneNumber(mobileNo, OoredooNumberlist))
                                {
                                    //if (!_agentWCF.updateError(out errMsg, txnID, "ER", "Invalid Mobile"))
                                    //{
                                    //    writeLog("Error in updateError : " + errMsg);
                                    //}
                                    //string errres = string.Empty;
                                    //errres = GeterrorResponse("06", "Invalid Mobile Number!", txnID, "Invalid Mobile");
                                    //writeLog("Err Response MyanpayAir Time:" + errres);
                                    //return errres;
                                    rescode = "06";
                                    resdecs = "Invalid Mobile Number!";
                                    return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                }


                                string myanpayRefCode = "2C2P" + System.DateTime.Now.ToString("yyMMddhhmmssffff");


                                MyanPay_ELoadRequest myanpayEloadReq = new MyanPay_ELoadRequest();
                                myanpayEloadReq.MobileNumber = mobileNo;
                                myanpayEloadReq.OrderNumber = myanpayRefCode;
                                myanpayEloadReq.TopUpAmount = ref2;
                                // myanpayEloadReq.UserEmail = ConfigurationManager.AppSettings["MyanPayEloadUserMail"].ToString();

                                MyanPay_ELoadResponse mpteloadres = MyanpayAirtime(myanpayEloadReq);
                                if (!mpteloadres.result)
                                {

                                    //if (!_agentWCF.updateError(out errMsg, txnID, "ER", mpteloadres.ResponseMessage))
                                    //{
                                    //    writeLog("Error in updateError : " + errMsg);
                                    //}
                                    //string errres = string.Empty;
                                    //errres = GeterrorResponse("06", "Transaction is not successful please tryagain!", txnID, mpteloadres.ResponseMessage);
                                    //writeLog("Err Response MyanpayAir Time:" + errres);
                                    //return errres;
                                    return GetErrorResponseWithAddBalance("06", "Transaction is not successful please tryagain!", txnID, mpteloadres.ResponseMessage, agentID, agentAmount, isAgreement);
                                }
                                else
                                {
                                    //double availablebalance = 0;
                                    //double ledgerbalance = 0;
                                    ref4 = mpteloadres.InvoiceNumber + ":" + mpteloadres.OrderNumber + " " + mpteloadres.DateTime;
                                    resdecs = mpteloadres.ResponseMessage.ToString().Trim();
                                    writeLog("Response Description MyanPay:" + resdecs);
                                    writeLog("Response Result From MyanPay AirTime:" + mpteloadres.Status);

                                    ConfirmResponseModel confirmresmdl = new ConfirmResponseModel();
                                    if (!_agentWCF.ConfirmUpdate(txnID,
                                        ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                        agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                    {
                                        writeLog("Error in ConfirmUpdate : " + errMsg);
                                    }
                                    else
                                    {
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                    }
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                    rescode = "00";
                                    resdecs = "Success";

                                    #region <-- Initiate confirmResponse Data to client -->
                                    confirmresmdl.taxID = taxID;
                                    confirmresmdl.email = email;
                                    confirmresmdl.password = password;
                                    confirmresmdl.messageid = messageid;
                                    confirmresmdl.billername = billerName;
                                    confirmresmdl.billerlogo = billerLogo;
                                    confirmresmdl.rescode = rescode;
                                    confirmresmdl.resdesc = resdecs;
                                    confirmresmdl.ref1 = ref1;
                                    confirmresmdl.ref2 = ref2;
                                    confirmresmdl.ref3 = ref3;
                                    confirmresmdl.ref4 = ref4;
                                    confirmresmdl.ref5 = mobileNo;
                                    confirmresmdl.ref1Name = ref1Name;
                                    confirmresmdl.ref2Name = ref2Name;
                                    confirmresmdl.ref3Name = ref3Name;
                                    confirmresmdl.ref4Name = ref4Name;
                                    confirmresmdl.ref5Name = ref5Name;
                                    confirmresmdl.availablebalance = availablebalance.ToString();
                                    confirmresmdl.txnID = txnID.ToString();
                                    confirmresmdl.TodayTxnCount = TodayTxnCount;
                                    confirmresmdl.TodayTxnAmount = TodayTxnAmount;
                                    confirmresmdl.smsMsg = smsMsg;
                                    #endregion

                                    string confirmRes = Utils.getConfirmRes(confirmresmdl);

                                    writeLog("Confirm Res:" + confirmRes);

                                    return confirmRes;


                                }
                                #endregion
                            }
                            else if (CheckIsEBAAirtime(MapTaxID))
                            {
                                writeLog("$$$$$$$$ This Is EBA Ooredoo AirTime $$$$$$$$$");


                                #region <-- This is Easy Bill -->

                                string OoredooNumberlist = ConfigurationManager.AppSettings["OoredooNumber"].ToString();
                                if (!isValidPhoneNumber(mobileNo, OoredooNumberlist))
                                {

                                    //string errres = string.Empty;
                                    //errres = GeterrorResponse("06", "Invalid Mobile Number!", txnID, "Invalid Mobile");
                                    //writeLog("Err Response MyanpayAir Time:" + errres);
                                    //return errres;
                                    rescode = "06";
                                    resdecs = "Invalid Mobile Number!";
                                    return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                }
                                #region <-- Initialize Variable -->

                                //mobileNo = ref3;
                                //ref3 = "Airtime";
                                string oneStopRef = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                                EABAirTimeTopUpReq pinreq = new EABAirTimeTopUpReq();
                                AirTimeTopUpResults pinres = new AirTimeTopUpResults();
                                string aesKey = string.Empty;

                                if (IsTokenNullOrExpire(Token))
                                {
                                    Token = GetOAuthToken();
                                }

                                pinreq.Token = Token.Token;
                                pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                                pinreq.BillerCode = "Ooredoo";
                                pinreq.Amount = ref2;
                                pinreq.NetworkType = "GSM";
                                pinreq.ChannelRefID = oneStopRef;
                                pinreq.MobileNumber = mobileNo;


                                var json_serializer1 = new JavaScriptSerializer();

                                string jsonReq = json_serializer1.Serialize(pinreq);
                                writeLog("ESBA JasonReq:" + jsonReq);
                                #endregion
                                //Request PIN To ESBA
                                string jsonres = string.Empty;

                                jsonres = Utils.pinRequest(jsonReq, esbAirTimeTopup);

                                writeLog("ESBA JasonRes:" + jsonres);
                                if (string.IsNullOrEmpty(jsonres))
                                {
                                    resdecs = "No Response From ESBA";
                                    rescode = "06";
                                    //if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                                    //{
                                    //    writeLog("Error in updateError : " + errMsg);
                                    //}
                                    //return Utils.getErrorRes(rescode, resdecs);
                                    return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                }
                                var json_serializerpinres = new JavaScriptSerializer();
                                pinres = json_serializerpinres.Deserialize<AirTimeTopUpResults>(jsonres);



                                if (pinres.AirTimeTopUpResult.TransactionStatus == 0)
                                {
                                    ref4 = pinres.AirTimeTopUpResult.ChannelRefID + ":" + pinres.AirTimeTopUpResult.AirTimeToupTransactionID + " " + DateTime.Now.ToShortDateString();
                                    //double availablebalance = 0;
                                    //double ledgerbalance = 0;
                                    //string errMsg = null;
                                    amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                    #region <-- Update Transaction -->
                                    if (!_agentWCF.ConfirmUpdate(txnID,
                                        ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                        agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                    {
                                        writeLog("Error in ConfirmUpdate : " + errMsg);
                                    }
                                    else
                                    {
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                    }
                                    #endregion
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());


                                    rescode = "00";
                                    resdecs = "Success";
                                    ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                    confirmres.taxID = taxID;
                                    confirmres.email = email;
                                    confirmres.password = password;
                                    confirmres.messageid = messageid;
                                    confirmres.billername = billerName;
                                    confirmres.billerlogo = billerLogo;
                                    confirmres.rescode = rescode;
                                    confirmres.resdesc = resdecs;
                                    confirmres.ref1 = ref1;
                                    confirmres.ref2 = ref2;
                                    confirmres.ref3 = ref3;
                                    confirmres.ref4 = ref4;
                                    confirmres.ref5 = mobileNo;
                                    confirmres.ref1Name = ref1Name;
                                    confirmres.ref2Name = ref2Name;
                                    confirmres.ref3Name = ref3Name;
                                    confirmres.ref5Name = ref5Name;
                                    confirmres.availablebalance = availablebalance.ToString();
                                    confirmres.txnID = txnID.ToString();
                                    confirmres.TodayTxnAmount = TodayTxnAmount;
                                    confirmres.TodayTxnCount = TodayTxnCount;
                                    confirmres.smsMsg = smsMsg;

                                    return Utils.getConfirmRes(confirmres);
                                    #region not use
                                    //int waitingtime = int.Parse(ConfigurationManager.AppSettings["EBAOoredooAirtimeThread"].ToString());
                                    //writeLog("waiting:" + waitingtime);
                                    //Thread.Sleep(waitingtime);
                                    //EABAirTimeTopUpEnquiryReq airtimeReq = new EABAirTimeTopUpEnquiryReq();
                                    //ebaAirTimeTopUpEnquiryResults airtimeinqRes = new ebaAirTimeTopUpEnquiryResults();

                                    //airtimeReq.Token = Token.Token;
                                    //airtimeReq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                                    //airtimeReq.ChannelRefID = pinreq.ChannelRefID;

                                    //var json_serializer2 = new JavaScriptSerializer();
                                    //string jsonReqinq = json_serializer2.Serialize(pinreq);
                                    //writeLog("ebaooredooAirtime inqReq:" + jsonReqinq);
                                    //string jsonresinq = Utils.pinRequest(jsonReqinq, esbAirTimeInq);
                                    //writeLog("ebaooredooAirtime inqRes:" + jsonresinq);
                                    //var json_serializerpinres2 = new JavaScriptSerializer();

                                    //airtimeinqRes = json_serializerpinres2.Deserialize<ebaAirTimeTopUpEnquiryResults>(jsonresinq);
                                    //if (airtimeinqRes.EnquiryAirtimeTopUpResult.ResponseCode == "0" && !string.IsNullOrEmpty(airtimeinqRes.EnquiryAirtimeTopUpResult.ChannelRefID) && !string.IsNullOrEmpty(airtimeinqRes.EnquiryAirtimeTopUpResult.AirtimeTransactionID))
                                    //{

                                    //    ref4 = airtimeinqRes.EnquiryAirtimeTopUpResult.ChannelRefID + ":" + airtimeinqRes.EnquiryAirtimeTopUpResult.AirtimeTransactionID + " " + DateTime.Now.ToShortDateString();
                                    //    //double availablebalance = 0;
                                    //    //double ledgerbalance = 0;
                                    //    //string errMsg = null;
                                    //    amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                    //    #region <-- Update Transaction -->
                                    //    if (!_agentWCF.ConfirmUpdate(out  errMsg, out  batchID, out  avalbal, out  legbal, txnID,
                                    //        ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                    //        agentAmount, agentFeeDbl, isAgreement, smsStatus))
                                    //    {
                                    //        writeLog("Error in ConfirmUpdate : " + errMsg);
                                    //    }
                                    //    else
                                    //    {
                                    //        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                    //    }
                                    //    #endregion
                                    //    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                                    //    #region <-- Response Back To Client -->
                                    //    rescode = "00";
                                    //    resdecs = "Success";
                                    //    ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                    //    confirmres.taxID = taxID;
                                    //    confirmres.email = email;
                                    //    confirmres.password = password;
                                    //    confirmres.messageid = messageid;
                                    //    confirmres.billername = billerName;
                                    //    confirmres.billerlogo = billerLogo;
                                    //    confirmres.rescode = rescode;
                                    //    confirmres.resdesc = resdecs;
                                    //    confirmres.ref1 = ref1;
                                    //    confirmres.ref2 = ref2;
                                    //    confirmres.ref3 = ref3;
                                    //    confirmres.ref4 = ref4;
                                    //    confirmres.ref5 = mobileNo;
                                    //    confirmres.ref1Name = ref1Name;
                                    //    confirmres.ref2Name = ref2Name;
                                    //    confirmres.ref3Name = ref3Name;
                                    //    confirmres.ref5Name = ref5Name;
                                    //    confirmres.availablebalance = availablebalance.ToString();
                                    //    confirmres.txnID = txnID.ToString();
                                    //    confirmres.TodayTxnAmount = TodayTxnAmount;
                                    //    confirmres.TodayTxnCount = TodayTxnCount;
                                    //    confirmres.smsMsg = smsMsg;

                                    //    return Utils.getConfirmRes(confirmres);
                                    //    #endregion
                                    //}
                                    //else
                                    //{
                                    //    //if (!_agentWCF.updateError(out errMsg, txnID, "ER", pinres.AirTimeTopUpResult.ResponseDescription))
                                    //    //{
                                    //    //    writeLog("Error in updateError : " + errMsg);
                                    //    //}
                                    //    //return Utils.getErrorRes(pinres.AirTimeTopUpResult.ResponseCode.ToString(), "Transaction Not Successful Please Tryagain!");
                                    //    return GetErrorResponseWithAddBalance(pinres.AirTimeTopUpResult.ResponseCode.ToString(), "Transaction Not Successful Please Tryagain!", txnID, pinres.AirTimeTopUpResult.ResponseDescription, agentID, agentAmount, isAgreement);
                                    //}

                                    #endregion
                                }
                                else
                                {
                                    // resdecs = Utils.EsbResponseDescription(pinres.GetTelcoPINResult.ResponseCode);
                                    //if (!_agentWCF.updateError(out errMsg, txnID, "ER", pinres.AirTimeTopUpResult.ResponseDescription))
                                    //{
                                    //    writeLog("Error in updateError : " + errMsg);
                                    //}
                                    //return Utils.getErrorRes(pinres.AirTimeTopUpResult.ResponseCode.ToString(), "Transaction Not Successful Please Tryagain!");
                                    return GetErrorResponseWithAddBalance(pinres.AirTimeTopUpResult.ResponseCode.ToString(), "Transaction Not Successful Please Tryagain!", txnID, pinres.AirTimeTopUpResult.ResponseDescription, agentID, agentAmount, isAgreement);
                                }

                                #endregion

                            }
                            else
                            {
                                //string errres = string.Empty;
                                //errres = GeterrorResponse(rescode, resdecs, txnID, resdecs);

                                //return errres;
                                return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                            }
                            #endregion
                        }
                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            #region <-- Simulatro Mode -->
                            writeLog("Simulator Y");
                            int batchid = 0;
                            //double availablebalance = 0;
                            //double ledgerbalance = 0;

                            mobileNo = ref3;
                            ref3 = new Random().Next(00000000, 99999999).ToString() + new Random().Next(00000000, 99999999).ToString();
                            ref4 = new Random().Next(00000000, 99999999).ToString() + new Random().Next(00000000, 99999999).ToString();
                            ref4 = ref4 + " 6/12/2016";

                            if (!_agentWCF.InsertTransactionLog(txnID, "TopupReq", "Test Req",out errMsg))
                            {
                                writeLog("Error in InsertTransactionLog Req : " + errMsg);
                            }
                            if (!_agentWCF.InsertTransactionLog(txnID, "TopupRes", "Test Res",out errMsg))
                            {
                                writeLog("Error in InsertTransactionLog Res : " + errMsg);
                            }


                            if (!_agentWCF.ConfirmUpdate(txnID,ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                     agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);
                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                            }

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                    string[] words = ref4.Split(' ');
                                    string PIN = words[0].ToString();
                                    string Expiry = words[1].ToString();
                                    smsMsg = smsH.getMessageTopup(agentName, MapTaxID, billerName, PIN, ref3, Expiry, double.Parse(amount).ToString("#,###.00"), branchCode);




                                    try
                                    {
                                        writeLog("sendSMSWithTxnID starts.");
                                        //  smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                        writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                        writeLog("sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                    }
                                }

                            }
                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = mobileNo;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }
                        else
                        {
                            mobileNo = ref3;

                            if (ConfigurationManager.AppSettings["IsOOredooMyanPay"].ToString() == "Y")
                            {
                                writeLog("$$$$$$$$$$ This Is MyanPay $$$$$$$$$$$$$");
                                #region <-- When MyanPay Flat is Y -->
                                writeLog("$$$$$$$$$$$$$$$$ This Is Ooredoo Request Myan Pay  $$$$$$$$$$$$$$$");
                                amt = double.Parse((double.Parse(ref2)).ToString("###0.00"));



                                string msg = string.Empty;

                                telenorWCF.PINServiceClient tlnWS = new telenorWCF.PINServiceClient();
                                if (tlnWS.getPINMYANPAY(out resdecs, out ref4, out expiry, out ref3, amt, ref1))
                                {
                                    #region <-- Get Pin From DB First -->
                                    ref4 = ref4 + " " + expiry;
                                    int batchid = 0;
                                    //double availablebalance = 0;
                                    //double ledgerbalance = 0;




                                    //if (resdecs != "Out of Stock" && resdecs !="Internal Telco Error")
                                    //{
                                    writeLog("$$$$$$$$$$$$$$This Is Get Pin From DB OK $$$$$$$$$$$$$$$");
                                    writeLog("Pin :" + ref4 + "| Expiry :" + expiry + "| SerialNo :" + ref3);

                                    if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                    {
                                        writeLog("Error in ConfirmUpdate : " + errMsg);

                                    }
                                    else
                                    {
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                                    }
                                    ref3 = Utils.maskString(ref3);
                                    //    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                    if (appType == "CS" || appType == "MS")
                                    {
                                        if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                        {
                                            SMSHelper smsH = new SMSHelper();
                                            smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                            //string PIN = ref4;
                                            //string Expiry = expiry;
                                            string[] words = ref4.Split(' ');
                                            string PIN = words[0].ToString();
                                            string Expiry = words[1].ToString();

                                            if (MapTaxID == "0000000000001" || MapTaxID == "0000000000002" || MapTaxID == "0000000000003" || MapTaxID == "0000000000004" || MapTaxID == "0000000000015" || MapTaxID == "0000000000016")
                                            {
                                                smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Expiry", "", "Ref", PIN, Expiry, "", txnID.ToString(),
                                                double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);
                                            }
                                            else
                                            {
                                                smsMsg = smsH.getMessageTopup(agentName, MapTaxID, billerName, PIN, ref3, Expiry, double.Parse(amount).ToString("#,###.00"), branchCode);
                                            }


                                            try
                                            {
                                                writeLog("sendSMSWithTxnIDLB starts.");
                                                //  smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                                writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                                smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                                writeLog("sendSMSWithTxnIDLB ends.");
                                            }
                                            catch (Exception ex)
                                            {
                                            }
                                        }
                                        else
                                        {
                                            //To Develop Airtime
                                        }
                                    }


                                    rescode = "00";
                                    resdecs = "Success";

                                    ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                    confirmres.taxID = taxID;
                                    confirmres.email = email;
                                    confirmres.password = password;
                                    confirmres.messageid = messageid;
                                    confirmres.billername = billerName;
                                    confirmres.billerlogo = billerLogo;
                                    confirmres.rescode = rescode;
                                    confirmres.resdesc = resdecs;
                                    confirmres.ref1 = ref1;
                                    confirmres.ref2 = ref2;
                                    confirmres.ref3 = ref3;
                                    confirmres.ref4 = ref4;
                                    confirmres.ref5 = mobileNo;
                                    confirmres.ref1Name = ref1Name;
                                    confirmres.ref2Name = ref2Name;
                                    confirmres.ref3Name = ref3Name;
                                    confirmres.ref4Name = ref4Name;
                                    confirmres.ref5Name = ref5Name;
                                    confirmres.batchID = batchid.ToString();
                                    confirmres.availablebalance = availablebalance.ToString();
                                    confirmres.txnID = txnID.ToString();
                                    confirmres.TodayTxnAmount = TodayTxnAmount;
                                    confirmres.TodayTxnCount = TodayTxnCount;
                                    confirmres.smsMsg = smsMsg;

                                    return Utils.getConfirmRes(confirmres);

                                    #endregion
                                }
                                else
                                {

                                    #region <-- This is MyanpayDirect Request -->

                                    #region <-- Variable Declaraction and assigning for myanpay request -->
                                    TopupService.ResellerServiceClient topupwcf = new TopupService.ResellerServiceClient();
                                    TopupService.PrepaidCardResellerRequest topuprequest = new TopupService.PrepaidCardResellerRequest();
                                    TopupService.PrepaidCardResellerResponse topupresponse = new TopupService.PrepaidCardResellerResponse();
                                    TopupService.AuthenticationRequest authrequest = new TopupService.AuthenticationRequest();
                                    TopupService.AuthenticationResponse authresponse = new TopupService.AuthenticationResponse();
                                    string reqresellerID, reqresellerName, reqstrPassword, IV, KEY, reqCardType, reqCardPrice;
                                    IV = ConfigurationManager.AppSettings["TopupIV"].ToString();
                                    KEY = ConfigurationManager.AppSettings["TopupKEY"].ToString();
                                    reqresellerID = ConfigurationManager.AppSettings["TopupResellerID"].ToString();
                                    reqresellerName = ConfigurationManager.AppSettings["TopupResellerName"].ToString();
                                    reqstrPassword = ConfigurationManager.AppSettings["TopupResellerPassword"].ToString();
                                    reqCardType = ref1;
                                    reqCardPrice = ref2;
                                    string tokenkey = "";
                                    StringBuilder sberror = new StringBuilder();
                                    bool authResult = false;
                                    // string mobileNo="";
                                    // mobileNo = ref3;
                                    string resResponseMessage, resErrorMessage, resResellerID, resExpiryDate = "", resSerialNumber = "", resPinNumber = "", resInvoiceID = "";
                                    ///AuthRequest & Response
                                    #endregion
                                    try
                                    {
                                        #region <-- Authenticate to myanpay -->
                                        authrequest.CredentialPassword = TopupEncrypt(reqstrPassword, KEY, IV);
                                        authrequest.CredentialUserName = TopupEncrypt(reqresellerName, KEY, IV);
                                        writeLog("Topup Auth Request : CredentialUserName = " + reqresellerName + ",CredentialPassword = " + reqstrPassword);
                                        authresponse = topupwcf.AuthenticationAPI(authrequest);

                                        if (authresponse.ResponseMessage != null)
                                        {
                                            if (authresponse.ResponseMessage == "Success")
                                            {
                                                authResult = true;
                                            }
                                            else
                                            {
                                                writeLog("Fail Auth Request");
                                            }
                                        }

                                        if (authresponse.ResellerAPIToken != null)
                                        {
                                            tokenkey = authresponse.ResellerAPIToken;

                                            authResult = true;
                                        }

                                        if (!String.IsNullOrEmpty(authresponse.ErrorMessage))
                                        {
                                            resdecs = authresponse.ErrorMessage;
                                            writeLog("Auth Error Message : " + authresponse.ErrorMessage);
                                        }

                                        if (!authResult)
                                        {
                                            //return GeterrorResponse("06", resdecs, txnID, resdecs);
                                            return GetErrorResponseWithAddBalance("06", resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                        }
                                        #endregion
                                    }
                                    catch (Exception ex)
                                    {
                                        #region <-- Exception hendler for myanpay authentication -->
                                        writeLog("Error in Topup Auth Request :" + ex.ToString());
                                        rescode = "05";
                                        resdecs = "Authentication Failed";

                                        //return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                                        return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                        #endregion
                                    }

                                    if (authResult && !String.IsNullOrEmpty(authresponse.ResellerAPIToken))
                                    {
                                        writeLog("Success Auth Request");
                                        writeLog("Topup Auth Response : ResponseMessage = " + authresponse.ResponseMessage + ",ResellerAPIToken = " + authresponse.ResellerAPIToken);
                                        bool topupresult = false;
                                        try
                                        {
                                            //Request

                                            #region <-- Requesting for topup -->
                                            topuprequest.ResellerID = TopupEncrypt(reqresellerID, KEY, IV);
                                            topuprequest.ResellerAPIToken = authresponse.ResellerAPIToken;
                                            topuprequest.CardType = TopupEncrypt(reqCardType, KEY, IV);
                                            topuprequest.CardPrice = TopupEncrypt(reqCardPrice, KEY, IV);

                                            if (!_agentWCF.InsertTransactionLog(txnID, "TopupReq", "ResellerID=" + topuprequest.ResellerID + ",ResellerAPIToken=" + topuprequest.ResellerAPIToken +
                                                ",CardType=" + topuprequest.CardType + ",CardPrice=" + topuprequest.CardPrice,out errMsg))
                                            {
                                                writeLog("Error in InsertTransactionLog Req : " + errMsg);
                                            }

                                            topupresponse = topupwcf.SoldOutPrepaidCard(topuprequest);

                                            writeLog("Topup Paid Request : ResellerID = " + reqresellerID + ",ResellerAPIToken = " + authresponse.ResellerAPIToken + ",CardType = " + reqCardType + ",CardPrice = " + reqCardPrice);

                                            #endregion

                                            ///Response

                                            #region <-- Topup response -->
                                            if (!String.IsNullOrEmpty(topupresponse.ResponseMessage))
                                            {
                                                if (topupresponse.ResponseMessage == "Success")
                                                {
                                                    topupresult = true;
                                                    resResponseMessage = topupresponse.ResponseMessage;
                                                }
                                            }
                                            if (!String.IsNullOrEmpty(topupresponse.ErrorMessage))
                                            {
                                                resErrorMessage = topupresponse.ErrorMessage;
                                                writeLog("Topup Response Error : " + topupresponse.ErrorMessage);
                                            }
                                            if (!String.IsNullOrEmpty(topupresponse.ResellerID))
                                            {
                                                resResellerID = TopupDecrypt(topupresponse.ResellerID, KEY, IV);
                                                topupresult = true;
                                            }
                                            if (!String.IsNullOrEmpty(topupresponse.SerialNumber))
                                            {
                                                ref3 = TopupDecrypt(topupresponse.SerialNumber, KEY, IV);
                                                topupresult = true;
                                            }
                                            if (!String.IsNullOrEmpty(topupresponse.PinNumber))
                                            {
                                                ref4 = TopupDecrypt(topupresponse.PinNumber, KEY, IV);
                                                topupresult = true;
                                            }
                                            if (!String.IsNullOrEmpty(topupresponse.InvoiceID))
                                            {
                                                ref5 = TopupDecrypt(topupresponse.InvoiceID, KEY, IV);
                                                topupresult = true;
                                            }
                                            if (!String.IsNullOrEmpty(topupresponse.ExpiredDate))
                                            {
                                                resExpiryDate = TopupDecrypt(topupresponse.ExpiredDate, KEY, IV);
                                                ref4 = ref4 + " " + resExpiryDate;
                                                topupresult = true;
                                            }

                                            if (!_agentWCF.InsertTransactionLog(txnID, "TopupRes", "ResellerID=" + topupresponse + ",SerialNo=" + resSerialNumber +
                                                ",PinNumber=" + resPinNumber + ",InvoiceID=" + resInvoiceID + ",Expiry=" + resExpiryDate,out errMsg))
                                            {
                                                writeLog("Error in InsertTransactionLog Res : " + errMsg);
                                            }
                                            #endregion

                                            if (topupresult)
                                            {
                                                #region <-- If topupresult is true -->
                                                writeLog("Topup Paid Response : ResponseMessage = " + topupresponse.ResponseMessage + ",resResellerID = " + topupresponse + ",resSerialNumber = " + resSerialNumber +
                                                    ",resPinNumber = " + resPinNumber + ",resInvoiceID = " + resInvoiceID + ",resExpiryDate = " + resExpiryDate);
                                                int batchid = 0;
                                                //double availablebalance = 0;
                                                //double ledgerbalance = 0;

                                                amt = double.Parse((double.Parse(reqCardPrice)).ToString("#,##0.00"));


                                                if (!_agentWCF.ConfirmUpdate(txnID,
                                                        ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                                        agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                                {
                                                    writeLog("Error in ConfirmUpdate : " + errMsg);

                                                }
                                                else
                                                {
                                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                                                }
                                                ref3 = Utils.maskString(ref3);
                                                if (appType == "CS" || appType == "MS")
                                                {
                                                    if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                                    {
                                                        SMSHelper smsH = new SMSHelper();
                                                        smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                                        string[] words = ref4.Split(' ');
                                                        string PIN = words[0].ToString();
                                                        string Expiry = words[1].ToString();
                                                        //taxID == "0000000000001" ||

                                                        smsMsg = smsH.getMessageTopup(agentName, MapTaxID, billerName, PIN, ref3, Expiry, double.Parse(amount).ToString("#,###.00"), branchCode);



                                                        try
                                                        {
                                                            writeLog("sendSMSWithTxnID starts.");
                                                            // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                                            writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                                            smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                                            writeLog("sendSMSWithTxnID ends.");
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //To Develop Airtime
                                                    }
                                                }



                                                rescode = "00";
                                                resdecs = "Success";
                                                ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                                confirmres.taxID = taxID;
                                                confirmres.email = email;
                                                confirmres.password = password;
                                                confirmres.messageid = messageid;
                                                confirmres.billername = billerName;
                                                confirmres.billerlogo = billerLogo;
                                                confirmres.rescode = rescode;
                                                confirmres.resdesc = resdecs;
                                                confirmres.ref1 = ref1;
                                                confirmres.ref2 = ref2;
                                                confirmres.ref3 = ref3;
                                                confirmres.ref4 = ref4;
                                                confirmres.ref5 = mobileNo;
                                                confirmres.ref1Name = ref1Name;
                                                confirmres.ref2Name = ref2Name;
                                                confirmres.ref3Name = ref3Name;
                                                confirmres.ref5Name = ref5Name;
                                                confirmres.batchID = batchid.ToString();
                                                confirmres.availablebalance = availablebalance.ToString();
                                                confirmres.txnID = txnID.ToString();
                                                confirmres.TodayTxnAmount = TodayTxnAmount;
                                                confirmres.TodayTxnCount = TodayTxnCount;
                                                confirmres.smsMsg = smsMsg;

                                                return Utils.getConfirmRes(confirmres);
                                                #endregion
                                            }
                                            else
                                            {
                                                #region <-- If topupresult is false -->
                                                writeLog("Error in Paid Response.");
                                                if (!String.IsNullOrEmpty(errmsg))
                                                {
                                                    string customMessage = errmsg.ToString();
                                                }
                                                //return GeterrorResponse("06", topupresponse.ErrorMessage, txnID, topupresponse.ErrorMessage);
                                                return GetErrorResponseWithAddBalance("06", topupresponse.ErrorMessage, txnID, topupresponse.ErrorMessage, agentID, agentAmount, isAgreement);
                                                #endregion
                                            }
                                        }
                                        catch (Exception Ex)
                                        {
                                            writeLog("Error in Topup Paid Request :" + Ex.ToString());
                                            //return GeterrorResponse("99", "System Error", txnID, "System Error");
                                            return GetErrorResponseWithAddBalance("99", "System Error", txnID, "System Error", agentID, agentAmount, isAgreement);
                                        }

                                    }
                                    #endregion

                                }

                                #endregion
                            }
                            else
                            {
                                #region <-- This is Easy Bill -->
                                #region <-- Initialize Variable -->
                                writeLog("$$$$$$$$$ This Is ESBA $$$$$$$$$$$$$");
                                pinReq pinreq = new pinReq();
                                GetTelcoPINResults pinres = new GetTelcoPINResults();
                                string aesKey = string.Empty;
                                aesKey = ConfigurationManager.AppSettings["EsbaAesKey"].ToString();
                                if (IsTokenNullOrExpire(Token))
                                {
                                    Token = GetOAuthToken();
                                }


                                pinreq.Token = Token.Token;
                                pinreq.BillerCode = "Ooredoo";
                                pinreq.NetworkType = ConfigurationManager.AppSettings["EsbGSMWCDMA"].ToString();
                                pinreq.PriceType = ref2;
                                pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                                pinreq.ChannelRefID = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                                amt = double.Parse((double.Parse(ref2)).ToString("###0.00"));
                                //  mobileNo = ref3;

                                var json_serializer1 = new JavaScriptSerializer();

                                string jsonReq = json_serializer1.Serialize(pinreq);
                                writeLog("ESBA JasonReq:" + jsonReq);
                                #endregion
                                //Request PIN To ESBA
                                string jsonres = Utils.pinRequest(jsonReq, esbGetPinMethod);
                                writeLog("ESBA JasonRes:" + jsonres);
                                if (string.IsNullOrEmpty(jsonres))
                                {
                                    resdecs = "No Response From ESBA";
                                    rescode = "06";
                                    //if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                                    //{
                                    //    writeLog("Error in updateError : " + errMsg);
                                    //}
                                    //return Utils.getErrorRes(rescode, resdecs);
                                    return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                }
                                var json_serializerpinres = new JavaScriptSerializer();
                                pinres = json_serializerpinres.Deserialize<GetTelcoPINResults>(jsonres);


                                if (pinres.GetTelcoPINResult.TransactionStatus == "0" && !string.IsNullOrEmpty(pinres.GetTelcoPINResult.PIN))
                                {

                                    pinres.GetTelcoPINResult.PIN = Utils.AESDecryptText(pinres.GetTelcoPINResult.PIN, aesKey);
                                    ref4 = pinres.GetTelcoPINResult.PIN + " " + pinres.GetTelcoPINResult.ExpiryDate;
                                    ref3 = pinres.GetTelcoPINResult.SerialNumber;

                                    //double availablebalance = 0;
                                    //double ledgerbalance = 0;
                                    //string errMsg = null;
                                    amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                    #region <-- Update Transaction -->
                                    if (!_agentWCF.ConfirmUpdate(txnID,ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                        agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                    {
                                        writeLog("Error in ConfirmUpdate : " + errMsg);
                                        resdecs = "Error in update database";
                                        rescode = "06";
                                        if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                                        {
                                            writeLog("Error in updateError : " + errMsg);
                                        }
                                        //return Utils.getErrorRes(rescode, "Transaction fail");
                                        return GetErrorResponseWithAddBalance(rescode, "Transaction fail", txnID, resdecs, agentID, agentAmount, isAgreement);
                                    }
                                    else
                                    {
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                    }
                                    #endregion
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                    ref3 = Utils.maskString(ref3);
                                    #region <-- Send SMS -->
                                    if (appType == "CS" || appType == "MS")
                                    {
                                        if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                        {
                                            SMSHelper smsH = new SMSHelper();
                                            smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                            string[] words = ref4.Split(' ');
                                            string PIN = words[0].ToString();
                                            string Expiry = words[1].ToString();

                                            smsMsg = smsH.getMessageTopup(agentName, MapTaxID, billerName, PIN, ref3, Expiry, double.Parse(amount).ToString("#,###.00"), branchCode);

                                            try
                                            {
                                                writeLog("sendSMSWithTxnID starts.");
                                                //  smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                                writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                                smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                                writeLog("sendSMSWithTxnID ends.");
                                            }
                                            catch (Exception ex)
                                            {
                                            }
                                        }
                                        else
                                        {
                                            //To Develop Airtime
                                        }
                                    }
                                    #endregion
                                    #region <-- Response Back To Client -->
                                    rescode = "00";
                                    resdecs = "Success";
                                    ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                    confirmres.taxID = taxID;
                                    confirmres.email = email;
                                    confirmres.password = password;
                                    confirmres.messageid = messageid;
                                    confirmres.billername = billerName;
                                    confirmres.billerlogo = billerLogo;
                                    confirmres.rescode = rescode;
                                    confirmres.resdesc = resdecs;
                                    confirmres.ref1 = ref1;
                                    confirmres.ref2 = ref2;
                                    confirmres.ref3 = ref3;
                                    confirmres.ref4 = ref4;
                                    confirmres.ref5 = mobileNo;
                                    confirmres.ref1Name = ref1Name;
                                    confirmres.ref2Name = ref2Name;
                                    confirmres.ref3Name = ref3Name;
                                    confirmres.ref4Name = ref4Name;
                                    confirmres.ref5Name = ref5Name;
                                    confirmres.availablebalance = availablebalance.ToString();
                                    confirmres.txnID = txnID.ToString();
                                    confirmres.TodayTxnAmount = TodayTxnAmount;
                                    confirmres.TodayTxnCount = TodayTxnCount;
                                    confirmres.smsMsg = smsMsg;

                                    return Utils.getConfirmRes(confirmres);
                                    #endregion



                                }
                                else
                                {
                                    resdecs = Utils.EsbResponseDescription(pinres.GetTelcoPINResult.ResponseCode);
                                    //if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                                    //{
                                    //    writeLog("Error in updateError : " + errMsg);
                                    //}
                                    //return Utils.getErrorRes(pinres.GetTelcoPINResult.ResponseCode, "Out of Stock");
                                    return GetErrorResponseWithAddBalance(pinres.GetTelcoPINResult.ResponseCode, "Out of Stock", txnID, resdecs, agentID, agentAmount, isAgreement);
                                }

                                #endregion
                            }


                        }
                    }

                    #endregion

                    #region <-- MyTelE_Load -->

                    else if (MapTaxID == "0000000000065")
                    {
                        double avalbal = 0;
                        double legbal = 0;


                        #region <-- Airtime Topup -->
                        writeLog("This is MyTel Airtime topup.");
                        rescode = "01";
                        resdecs = "Airtime Topup is NOT Available.";
                        mobileNo = ref3;
                        ref3 = "Airtime";

                        writeLog("$$$$$$$$ This Is EBA MyTel AirTime $$$$$$$$$");


                        #region <-- This is Easy Bill -->

                        string MyTelNumberlist = ConfigurationManager.AppSettings["MyTelNumber"].ToString();
                        if (!isValidPhoneNumber(mobileNo, MyTelNumberlist))
                        {
                            rescode = "06";
                            resdecs = "Invalid Mobile Number!";
                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                        #region <-- Initialize Variable -->


                        string oneStopRef = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                        EABAirTimeTopUpReq pinreq = new EABAirTimeTopUpReq();
                        AirTimeTopUpResults pinres = new AirTimeTopUpResults();
                        string aesKey = string.Empty;

                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }

                        pinreq.Token = Token.Token;
                        pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                        pinreq.BillerCode = "MyTel";
                        pinreq.Amount = ref2;
                        pinreq.NetworkType = "GSM";
                        pinreq.ChannelRefID = oneStopRef;
                        pinreq.MobileNumber = mobileNo;


                        var json_serializer1 = new JavaScriptSerializer();

                        string jsonReq = json_serializer1.Serialize(pinreq);
                        writeLog("ESBA JasonReq:" + jsonReq);
                        #endregion

                        string jsonres = string.Empty;

                        jsonres = Utils.pinRequest(jsonReq, esbAirTimeTopup);

                        writeLog("ESBA JasonRes:" + jsonres);
                        if (string.IsNullOrEmpty(jsonres))
                        {
                            resdecs = "No Response From ESBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                        var json_serializerpinres = new JavaScriptSerializer();
                        pinres = json_serializerpinres.Deserialize<AirTimeTopUpResults>(jsonres);



                        if (pinres.AirTimeTopUpResult.TransactionStatus == 0)
                        {
                            ref4 = pinres.AirTimeTopUpResult.ChannelRefID + ":" + pinres.AirTimeTopUpResult.AirTimeToupTransactionID + " " + DateTime.Now.ToShortDateString();
                            amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                            #region <-- Update Transaction -->
                            if (!_agentWCF.ConfirmUpdate(txnID,
                                ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);
                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                            }
                            #endregion
                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());


                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = mobileNo;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                        }
                        else
                        {

                            return GetErrorResponseWithAddBalance(pinres.AirTimeTopUpResult.ResponseCode.ToString(), pinres.AirTimeTopUpResult.ResponseDescription, txnID, pinres.AirTimeTopUpResult.ResponseDescription, agentID, agentAmount, isAgreement);
                        }

                        #endregion


                        #endregion
                        
                    }

                    #endregion

                    #region <-- MyTel -->
                    else if (MapTaxID == "0000000000054")
                    {
                        double avalbal = 0;
                        double legbal = 0;

                        writeLog("This is MyTel TOPUP.");
                        

                        if (topupType == "A")
                        {
                            #region <-- Airtime Topup -->
                            writeLog("This is MyTel Airtime topup.");
                            rescode = "01";
                            resdecs = "Airtime Topup is NOT Available.";
                            mobileNo = ref3;
                            ref3 = "Airtime";

                            writeLog("$$$$$$$$ This Is EBA MyTel AirTime $$$$$$$$$");


                            #region <-- This is Easy Bill -->

                            string MyTelNumberlist = ConfigurationManager.AppSettings["MyTelNumber"].ToString();
                            if (!isValidPhoneNumber(mobileNo, MyTelNumberlist))
                            {
                                rescode = "06";
                                resdecs = "Invalid Mobile Number!";
                                return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                            }
                            #region <-- Initialize Variable -->


                            string oneStopRef = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                            EABAirTimeTopUpReq pinreq = new EABAirTimeTopUpReq();
                            AirTimeTopUpResults pinres = new AirTimeTopUpResults();
                            string aesKey = string.Empty;

                            if (IsTokenNullOrExpire(Token))
                            {
                                Token = GetOAuthToken();
                            }

                            pinreq.Token = Token.Token;
                            pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                            pinreq.BillerCode = "MyTel";
                            pinreq.Amount = ref2;
                            pinreq.NetworkType = "GSM";
                            pinreq.ChannelRefID = oneStopRef;
                            pinreq.MobileNumber = mobileNo;


                            var json_serializer1 = new JavaScriptSerializer();

                            string jsonReq = json_serializer1.Serialize(pinreq);
                            writeLog("ESBA JasonReq:" + jsonReq);
                            #endregion

                            string jsonres = string.Empty;

                            jsonres = Utils.pinRequest(jsonReq, esbAirTimeTopup);

                            writeLog("ESBA JasonRes:" + jsonres);
                            if (string.IsNullOrEmpty(jsonres))
                            {
                                resdecs = "No Response From ESBA";
                                rescode = "06";

                                return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                            }
                            var json_serializerpinres = new JavaScriptSerializer();
                            pinres = json_serializerpinres.Deserialize<AirTimeTopUpResults>(jsonres);



                            if (pinres.AirTimeTopUpResult.TransactionStatus == 0)
                            {
                                ref4 = pinres.AirTimeTopUpResult.ChannelRefID + ":" + pinres.AirTimeTopUpResult.AirTimeToupTransactionID + " " + DateTime.Now.ToShortDateString();
                                amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                #region <-- Update Transaction -->
                                if (!_agentWCF.ConfirmUpdate(txnID,
                                    ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                    agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                                {
                                    writeLog("Error in ConfirmUpdate : " + errMsg);
                                }
                                else
                                {
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                }
                                #endregion
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());


                                rescode = "00";
                                resdecs = "Success";
                                ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                confirmres.taxID = taxID;
                                confirmres.email = email;
                                confirmres.password = password;
                                confirmres.messageid = messageid;
                                confirmres.billername = billerName;
                                confirmres.billerlogo = billerLogo;
                                confirmres.rescode = rescode;
                                confirmres.resdesc = resdecs;
                                confirmres.ref1 = ref1;
                                confirmres.ref2 = ref2;
                                confirmres.ref3 = ref3;
                                confirmres.ref4 = ref4;
                                confirmres.ref5 = mobileNo;
                                confirmres.ref1Name = ref1Name;
                                confirmres.ref2Name = ref2Name;
                                confirmres.ref3Name = ref3Name;
                                confirmres.ref5Name = ref5Name;
                                confirmres.availablebalance = availablebalance.ToString();
                                confirmres.txnID = txnID.ToString();
                                confirmres.TodayTxnAmount = TodayTxnAmount;
                                confirmres.TodayTxnCount = TodayTxnCount;
                                confirmres.smsMsg = smsMsg;

                                return Utils.getConfirmRes(confirmres);

                            }
                            else
                            {

                                return GetErrorResponseWithAddBalance(pinres.AirTimeTopUpResult.ResponseCode.ToString(), pinres.AirTimeTopUpResult.ResponseDescription, txnID, pinres.AirTimeTopUpResult.ResponseDescription, agentID, agentAmount, isAgreement);
                            }

                            #endregion




                            #endregion
                        }


                        else
                        {
                            #region <-- If TopUp Type is Not AirTime "A" -->
                            if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                            {
                                #region <-- Simulator On -->
                                writeLog("Simulator Y");
                                int batchid = 0;
                                mobileNo = ref3;
                                ref3 = new Random().Next(00000000, 99999999).ToString() + new Random().Next(00000000, 99999999).ToString();
                                ref4 = new Random().Next(00000000, 99999999).ToString() + new Random().Next(00000000, 99999999).ToString();
                                ref4 = ref4 + " 6/12/2016";
                                //amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));   

                                if (!_agentWCF.InsertTransactionLog(txnID, "TopupReq", "Test Req", out errMsg))
                                {
                                    writeLog("Error in InsertTransactionLog Req : " + errMsg);
                                }
                                if (!_agentWCF.InsertTransactionLog(txnID, "TopupRes", "Test Res", out errMsg))
                                {
                                    writeLog("Error in InsertTransactionLog Res : " + errMsg);
                                }


                                if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                         agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                                {
                                    writeLog("Error in ConfirmUpdate : " + errMsg);
                                }
                                else
                                {
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                }


                                if (appType == "CS" || appType == "MS")
                                {
                                    if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                    {
                                        SMSHelper smsH = new SMSHelper();
                                        smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                        string[] words = ref4.Split(' ');
                                        string PIN = words[0].ToString();
                                        string Expiry = words[1].ToString();


                                        smsMsg = smsH.getMessageTopup(agentName, MapTaxID, billerName, PIN, ref3, Expiry, double.Parse(amount).ToString("#,###.00"), branchCode);

                                        try
                                        {
                                            writeLog("sendSMSWithTxnID starts.");
                                            //  smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                            writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                            smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                            writeLog("sendSMSWithTxnID ends.");
                                        }
                                        catch (Exception ex)
                                        {
                                        }
                                    }

                                }

                                rescode = "00";
                                resdecs = "Success";
                                ConfirmResponseModel conRes = new ConfirmResponseModel();
                                conRes.taxID = taxID;
                                conRes.email = email;
                                conRes.password = password;
                                conRes.messageid = messageid;
                                conRes.billerlogo = billerLogo;
                                conRes.billername = billerName;
                                conRes.rescode = rescode;
                                conRes.resdesc = resdecs;
                                conRes.ref1 = ref1;
                                conRes.ref2 = ref2;
                                conRes.ref3 = ref3;
                                conRes.ref4 = ref4;
                                conRes.ref5 = mobileNo;
                                conRes.ref1Name = ref1Name;
                                conRes.ref2Name = ref2Name;
                                conRes.ref3Name = ref3Name;
                                conRes.ref4Name = ref4Name;
                                conRes.ref5Name = ref5Name;
                                conRes.batchID = string.Empty;
                                conRes.availablebalance = availablebalance.ToString();
                                conRes.txnID = txnID.ToString();
                                conRes.TodayTxnCount = TodayTxnCount;
                                conRes.TodayTxnAmount = TodayTxnAmount;
                                conRes.smsMsg = smsMsg;
                                return Utils.getConfirmRes(conRes);


                                #endregion
                            }
                            else
                            {
                                mobileNo = ref3;
                                amt = double.Parse((double.Parse(ref2)).ToString("###0.00"));

                                if (ConfigurationManager.AppSettings["EBAMyTelDirect"].ToString() == "Y")
                                {
                                    #region <-- This IS MyTel From EBA only -->
                                    #region <-- Initialize Variable -->
                                    writeLog("$$$$$$$$$ This Is ESBA $$$$$$$$$$$$$");
                                    pinReq pinreq = new pinReq();
                                    GetTelcoPINResults pinres = new GetTelcoPINResults();
                                    string aesKey = string.Empty;
                                    aesKey = ConfigurationManager.AppSettings["EsbaAesKey"].ToString();
                                    if (IsTokenNullOrExpire(Token))
                                    {
                                        Token = GetOAuthToken();
                                    }


                                    pinreq.Token = Token.Token;
                                    pinreq.BillerCode = "MyTel";
                                    pinreq.NetworkType = ConfigurationManager.AppSettings["EsbGSMWCDMA"].ToString();
                                    pinreq.PriceType = ref2;
                                    pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                                    pinreq.ChannelRefID = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                                    amt = double.Parse((double.Parse(ref2)).ToString("###0.00"));

                                    var json_serializer1 = new JavaScriptSerializer();

                                    string jsonReq = json_serializer1.Serialize(pinreq);
                                    writeLog("ESBA JasonReq:" + jsonReq);
                                    #endregion
                                    string jsonres = Utils.pinRequest(jsonReq, esbGetPinMethod);

                                    writeLog("ESBA JasonRes:" + jsonres);
                                    if (string.IsNullOrEmpty(jsonres))
                                    {
                                        resdecs = "No Response From ESBA";
                                        rescode = "06";
                                        //return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                                        return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                    }
                                    var json_serializerpinres = new JavaScriptSerializer();
                                    pinres = json_serializerpinres.Deserialize<GetTelcoPINResults>(jsonres);


                                    if (pinres.GetTelcoPINResult.TransactionStatus == "0" && !string.IsNullOrEmpty(pinres.GetTelcoPINResult.PIN))
                                    {
                                        writeLog("$$$$$$$$$$$$$$$$$ GET TELENORPIN FROM ESBA OK $$$$$$$$$$$$$$$$$$$$$$$");
                                        pinres.GetTelcoPINResult.PIN = Utils.AESDecryptText(pinres.GetTelcoPINResult.PIN, aesKey);
                                        ref4 = pinres.GetTelcoPINResult.PIN + " " + pinres.GetTelcoPINResult.ExpiryDate;
                                        ref3 = pinres.GetTelcoPINResult.SerialNumber;

                                        amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                        #region <-- Update Transaction -->

                                        if (!_agentWCF.ConfirmUpdate(txnID,
                                            ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                            agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                                        {
                                            writeLog("Error in ConfirmUpdate : " + errMsg);
                                            resdecs = "Error in update database";
                                            rescode = "06";
                                            if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                            {
                                                writeLog("Error in updateError : " + errMsg);
                                            }
                                            return Utils.getErrorRes(rescode, "Transaction fail");
                                        }
                                        else
                                        {
                                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                        }
                                        #endregion
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                        ref3 = Utils.maskString(ref3);
                                        #region <-- Send SMS -->
                                        if (appType == "CS" || appType == "MS")
                                        {
                                            if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                            {
                                                SMSHelper smsH = new SMSHelper();
                                                smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                                string[] words = ref4.Split(' ');
                                                string PIN = words[0].ToString();
                                                string Expiry = words[1].ToString();

                                                smsMsg = smsH.getMessageTopup(agentName, MapTaxID, billerName, PIN, ref3, Expiry, double.Parse(amount).ToString("#,###.00"), branchCode);

                                                try
                                                {
                                                    writeLog("sendSMSWithTxnID starts.");
                                                    //  smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                                    writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                                    smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                                    writeLog("sendSMSWithTxnID ends.");
                                                }
                                                catch (Exception ex)
                                                {
                                                }
                                            }
                                            else
                                            {
                                                //To Develop Airtime
                                            }
                                        }
                                        #endregion
                                        #region <-- Response Back To Client -->
                                        rescode = "00";
                                        resdecs = "Success";
                                        ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                        confirmres.taxID = taxID;
                                        confirmres.email = email;
                                        confirmres.password = password;
                                        confirmres.messageid = messageid;
                                        confirmres.billername = billerName;
                                        confirmres.billerlogo = billerLogo;
                                        confirmres.rescode = rescode;
                                        confirmres.resdesc = resdecs;
                                        confirmres.ref1 = ref1;
                                        confirmres.ref2 = ref2;
                                        confirmres.ref3 = ref3;
                                        confirmres.ref4 = ref4;
                                        confirmres.ref5 = mobileNo;
                                        confirmres.ref1Name = ref1Name;
                                        confirmres.ref2Name = ref2Name;
                                        confirmres.ref3Name = ref3Name;
                                        confirmres.ref4Name = ref4Name;
                                        confirmres.ref5Name = ref5Name;
                                        confirmres.availablebalance = availablebalance.ToString();
                                        confirmres.txnID = txnID.ToString();
                                        confirmres.TodayTxnAmount = TodayTxnAmount;
                                        confirmres.TodayTxnCount = TodayTxnCount;
                                        confirmres.smsMsg = smsMsg;

                                        return Utils.getConfirmRes(confirmres);
                                        #endregion

                                    }
                                    else
                                    {
                                        resdecs = Utils.EsbResponseDescription(pinres.GetTelcoPINResult.ResponseCode);
                                        return GetErrorResponseWithAddBalance(pinres.GetTelcoPINResult.ResponseCode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                    }

                                    #endregion
                                }


                            }
                        }
                            #endregion
                    }



                    #endregion

                    #region <-- Iflix Confirm -->
                    else if (MapTaxID == "0000000000055")
                    {
                        writeLog("This is Iflix from EBA.");
                        mobileNo = ref3;
                        double avalbal = 0;
                        double legbal = 0;

                        giftcardConfirmReq pinreq = new giftcardConfirmReq();
                        GetGiftCardPINResults pinres = new GetGiftCardPINResults();
                        string aesKey = string.Empty;
                        aesKey = ConfigurationManager.AppSettings["EsbaAesKey"].ToString();
                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }
                        string billercode = string.Empty;
                        billercode = getBillerCode(MapTaxID);
                        pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                        pinreq.ChannelRefID = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                        pinreq.PriceType = ref2;
                        pinreq.Token = Token.Token;
                        pinreq.BillerCode = billercode;
                        // string url = ConfigurationManager.AppSettings["IflixConfirmUrl"].ToString();
                        var json_serializer1 = new JavaScriptSerializer();
                        string jsonReq = json_serializer1.Serialize(pinreq);
                        writeLog("EBA Iflix  JasonReq:" + jsonReq);

                        SSLPost post = new SSLPost();

                        string jsonres = Utils.pinRequest(jsonReq, esbGetGiftCardMethod);
                        writeLog("EBA Iflix  JasonRes:" + jsonres);

                        if (string.IsNullOrEmpty(jsonres))
                        {
                            resdecs = "No Response From ESBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        var json_serializerpinres = new JavaScriptSerializer();
                        pinres = json_serializerpinres.Deserialize<GetGiftCardPINResults>(jsonres);

                        if (pinres.GetGiftCardPINResult.TransactionStatus == "0" && !string.IsNullOrEmpty(pinres.GetGiftCardPINResult.PIN))
                        {
                            pinres.GetGiftCardPINResult.PIN = Utils.AESDecryptText(pinres.GetGiftCardPINResult.PIN, aesKey);
                            ref4 = pinres.GetGiftCardPINResult.PIN + " " + pinres.GetGiftCardPINResult.ExpiryDate;
                            ref3 = ConfigurationManager.AppSettings["iflixURL"].ToString();
                            amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                            #region <-- Update Transaction -->
                            if (!_agentWCF.ConfirmUpdate(txnID,
                                ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog("Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                            }
                            #endregion

                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #region <-- Send SMS -->
                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();

                                    string[] words = ref4.Split(' ');
                                    string PIN = words[0].ToString();
                                    string Expiry = words[1].ToString();


                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Expiry", "", "Ref", PIN, Expiry, "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);


                                    try
                                    {

                                        writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                        writeLog("sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                    }
                                }
                                else
                                {
                                    //To Develop Airtime
                                }
                            }
                            #endregion
                            #region <-- Response Back To Client -->
                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = "";
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = mobileNo;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);
                            #endregion


                        }


                        else
                        {
                            resdecs = Utils.EsbResponseDescription(pinres.GetGiftCardPINResult.ResponseCode);
                            return GetErrorResponseWithAddBalance(pinres.GetGiftCardPINResult.ResponseCode, "Out of Stock", txnID, resdecs, agentID, agentAmount, isAgreement);
                        }







                    } //Whole Block



                    #endregion

                    #region <-- MPT_Load>

                    else if (MapTaxID == "0000000000066" || MapTaxID == "0000000000061" || MapTaxID == "0000000000064")
                    {
                        string cardtype = MapTaxID == "2222222222222" ? "C8" : MapTaxID == "3333333333333" ? "GS" : "C4";
                        string cardtypemyanpay = MapTaxID == "2222222222222" ? "102" : MapTaxID == "3333333333333" ? "101" : "000";
                        writeLog("This is MPT");
                        amt = double.Parse((double.Parse(ref2)).ToString("###0.00"));
                        mobileNo = ref3;
                        double avalbal = 0;
                        double legbal = 0;

                        writeLog("TaxID :" + taxID + "| MapTaxID :" + MapTaxID + "| CardTYPE :" + cardtype);

                        #region <-- Airtime Topup -->
                        writeLog("This is Airtime topup.");
                        rescode = "01";
                        resdecs = "Airtime Topup is NOT Available.";

                        if (MapTaxID == "0000000000061")
                        {

                            writeLog("$$$$$$$ This Is MPT AirTime $$$$$$$$$$$$$$$");
                            if (CheckIsMyanPayAirtime(MapTaxID))
                            {
                                #region <-- Myanpay MPT airtime -->
                                string mptNumberlist = ConfigurationManager.AppSettings["MptNumber"].ToString();
                                if (!isValidPhoneNumber(mobileNo, mptNumberlist))
                                {
                                    string errres = string.Empty;
                                    //errres = GeterrorResponse("06", "Invalid Mobile Number!", txnID, "Invalid Mobile");
                                    //writeLog("Err Response MyanpayAir Time:" + errres);
                                    //return errres;
                                    rescode = "06";
                                    resdecs = "Invalid Mobile Number!";
                                    return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                }
                                ref3 = "Airtime";
                                string myanpayRefCode = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;


                                MyanPay_ELoadRequest myanpayEloadReq = new MyanPay_ELoadRequest();
                                myanpayEloadReq.MobileNumber = mobileNo;
                                myanpayEloadReq.UserEmail = "noreply@2c2p.com";
                                myanpayEloadReq.OrderNumber = myanpayRefCode;
                                myanpayEloadReq.TopUpAmount = ref2;
                                
                                MyanPay_ELoadResponse mpteloadres = new MyanPay_ELoadResponse();
                                try
                                {
                                    mpteloadres = MyanpayAirtime(myanpayEloadReq);
                                }
                                catch (Exception ex)
                                {
                                    writeLog("Exception error occur when requesting to eload" + ex.Message.ToString());
                                }
                                if (!mpteloadres.result)
                                {

                                    string errres = string.Empty;
                                    
                                    rescode = "06";
                                    resdecs = "Transaction is not successful please tryagain!";
                                    return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, mpteloadres.ResponseMessage, agentID, agentAmount, isAgreement);
                                }
                                else
                                {
                                   
                                    ref4 = mpteloadres.InvoiceNumber + ":" + mpteloadres.OrderNumber + " " + mpteloadres.DateTime;
                                    resdecs = mpteloadres.ResponseMessage.ToString().Trim();
                                    writeLog("Response Description MyanPay:" + resdecs);
                                    writeLog("Response Result From MyanPay AirTime:" + mpteloadres.Status);

                                    ConfirmResponseModel confirmresmdl = new ConfirmResponseModel();
                                    if (!_agentWCF.ConfirmUpdate(txnID,
                                        ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                        agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                                    {
                                        writeLog("Error in ConfirmUpdate : " + errMsg);
                                    }
                                    else
                                    {
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                    }
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                    rescode = "00";
                                    resdecs = "Success";

                                    #region <-- Initiate confirmResponse Data to client -->
                                    confirmresmdl.taxID = taxID;
                                    confirmresmdl.email = email;
                                    confirmresmdl.password = password;
                                    confirmresmdl.messageid = messageid;
                                    confirmresmdl.billername = billerName;
                                    confirmresmdl.billerlogo = billerLogo;
                                    confirmresmdl.rescode = rescode;
                                    confirmresmdl.resdesc = resdecs;
                                    confirmresmdl.ref1 = ref1;
                                    confirmresmdl.ref2 = ref2;
                                    confirmresmdl.ref3 = ref3;
                                    confirmresmdl.ref4 = ref4;
                                    confirmresmdl.ref5 = mobileNo;
                                    confirmresmdl.ref1Name = ref1Name;
                                    confirmresmdl.ref2Name = ref2Name;
                                    confirmresmdl.ref3Name = ref3Name;
                                    confirmresmdl.ref4Name = ref4Name;
                                    confirmresmdl.ref5Name = ref5Name;
                                    confirmresmdl.availablebalance = availablebalance.ToString();
                                    confirmresmdl.txnID = txnID.ToString();
                                    confirmresmdl.TodayTxnCount = TodayTxnCount;
                                    confirmresmdl.TodayTxnAmount = TodayTxnAmount;
                                    confirmresmdl.smsMsg = smsMsg;
                                    #endregion

                                    string confirmRes = Utils.getConfirmRes(confirmresmdl);

                                    return confirmRes;


                                }
                                #endregion
                            }
                            else if (ConfigurationManager.AppSettings["EBAMPTAirtime"] == "Y")
                            {
                                writeLog("$$$$$$$$ This Is EBA Tenenor AirTime $$$$$$$$$");

                                #region <-- This is Easy Bill -->

                                #region <-- Initialize Variable -->

                                string oneStopRef = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                                EABAirTimeTopUpReq pinreq = new EABAirTimeTopUpReq();
                                AirTimeTopUpResults pinres = new AirTimeTopUpResults();
                                string aesKey = string.Empty;

                                if (IsTokenNullOrExpire(Token))
                                {
                                    Token = GetOAuthToken();
                                }

                                pinreq.Token = Token.Token;
                                pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                                pinreq.BillerCode = "MPT";
                                pinreq.Amount = ref2;
                                pinreq.NetworkType = "GSM";
                                pinreq.ChannelRefID = oneStopRef;
                                pinreq.MobileNumber = mobileNo;


                                var json_serializer1 = new JavaScriptSerializer();

                                string jsonReq = json_serializer1.Serialize(pinreq);
                                writeLog("ESBA JasonReq:" + jsonReq);
                                #endregion
                                //Request PIN To ESBA
                                string jsonres = string.Empty;

                                jsonres = Utils.pinRequest(jsonReq, esbAirTimeTopup);


                                writeLog("ESBA JasonRes:" + jsonres);
                                if (string.IsNullOrEmpty(jsonres))
                                {
                                    resdecs = "No Response From ESBA";
                                    rescode = "06";

                                    return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                }
                                var json_serializerpinres = new JavaScriptSerializer();
                                pinres = json_serializerpinres.Deserialize<AirTimeTopUpResults>(jsonres);



                                if (pinres.AirTimeTopUpResult.TransactionStatus == 0)//|| pinres.AirTimeTopUpResult.ResponseCode == 2
                                {

                                    ref4 = pinres.AirTimeTopUpResult.ChannelRefID + ":" + pinres.AirTimeTopUpResult.AirTimeToupTransactionID + " " + DateTime.Now.ToShortDateString();
                                    
                                    amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                    #region <-- Update Transaction -->
                                    if (!_agentWCF.ConfirmUpdate(txnID,
                                        ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                        agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                                    {
                                        writeLog("Error in ConfirmUpdate : " + errMsg);
                                    }
                                    else
                                    {
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                    }
                                    #endregion
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                                    #region <-- Response Back To Client -->
                                    rescode = "00";
                                    resdecs = "Success";
                                    ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                    confirmres.taxID = taxID;
                                    confirmres.email = email;
                                    confirmres.password = password;
                                    confirmres.messageid = messageid;
                                    confirmres.billername = billerName;
                                    confirmres.billerlogo = billerLogo;
                                    confirmres.rescode = rescode;
                                    confirmres.resdesc = resdecs;
                                    confirmres.ref1 = ref1;
                                    confirmres.ref2 = ref2;
                                    confirmres.ref3 = ref3;
                                    confirmres.ref4 = ref4;
                                    confirmres.ref5 = mobileNo;
                                    confirmres.ref1Name = ref1Name;
                                    confirmres.ref2Name = ref2Name;
                                    confirmres.ref3Name = ref3Name;
                                    confirmres.ref5Name = ref5Name;
                                    confirmres.availablebalance = availablebalance.ToString();
                                    confirmres.txnID = txnID.ToString();
                                    confirmres.TodayTxnAmount = TodayTxnAmount;
                                    confirmres.TodayTxnCount = TodayTxnCount;
                                    confirmres.smsMsg = smsMsg;

                                    return Utils.getConfirmRes(confirmres);
                                    #endregion

                                   

                                }
                                else
                                {
                                    return GetErrorResponseWithAddBalance(pinres.AirTimeTopUpResult.ResponseCode.ToString(), "Transaction Not Successful Please Tryagain!", txnID, pinres.AirTimeTopUpResult.ResponseDescription, agentID, agentAmount, isAgreement);
                                }

                                #endregion
                            }
                            else
                            {
                                return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                            }
                        }
                        else
                        {
                             return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        #endregion
                    }
                    #endregion

                    #region <-- MPT //12-Jan-1016 Tz -->

                    else if (MapTaxID == "2222222222222" || MapTaxID == "3333333333333" || MapTaxID == "0000000000024")
                    {
                        string cardtype = MapTaxID == "2222222222222" ? "C8" : MapTaxID == "3333333333333" ? "GS" : "C4";
                        string cardtypemyanpay = MapTaxID == "2222222222222" ? "102" : MapTaxID == "3333333333333" ? "101" : "000";
                        writeLog("This is MPT");
                        amt = double.Parse((double.Parse(ref2)).ToString("###0.00"));
                        mobileNo = ref3;
                        double avalbal = 0;
                        double legbal = 0;

                        writeLog("TaxID :" + taxID + "| MapTaxID :" + MapTaxID + "| CardTYPE :" + cardtype);

                        if (topupType == "A")
                        {
                            #region <-- Airtime Topup -->
                            writeLog("This is Airtime topup.");
                            rescode = "01";
                            resdecs = "Airtime Topup is NOT Available.";

                            if (MapTaxID == "3333333333333")
                            {

                                writeLog("$$$$$$$ This Is MPT AirTime $$$$$$$$$$$$$$$");
                                if (CheckIsMyanPayAirtime(MapTaxID))
                                {
                                    #region <-- Myanpay MPT airtime -->
                                    string mptNumberlist = ConfigurationManager.AppSettings["MptNumber"].ToString();
                                    if (!isValidPhoneNumber(mobileNo, mptNumberlist))
                                    {
                                        string errres = string.Empty;
                                        //errres = GeterrorResponse("06", "Invalid Mobile Number!", txnID, "Invalid Mobile");
                                        //writeLog("Err Response MyanpayAir Time:" + errres);
                                        //return errres;
                                        rescode = "06";
                                        resdecs = "Invalid Mobile Number!";
                                        return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                    }
                                    ref3 = "Airtime";
                                    string myanpayRefCode = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;


                                    MyanPay_ELoadRequest myanpayEloadReq = new MyanPay_ELoadRequest();
                                    myanpayEloadReq.MobileNumber = mobileNo;
                                    myanpayEloadReq.OrderNumber = myanpayRefCode;
                                    myanpayEloadReq.TopUpAmount = ref2;
                                    // myanpayEloadReq.UserEmail = ConfigurationManager.AppSettings["MyanPayEloadUserMail"].ToString();
                                    MyanPay_ELoadResponse mpteloadres = new MyanPay_ELoadResponse();
                                    try
                                    {
                                        mpteloadres = MyanpayAirtime(myanpayEloadReq);
                                    }
                                    catch (Exception ex)
                                    {
                                        writeLog("Exception error occur when requesting to eload" + ex.Message.ToString());
                                    }
                                    if (!mpteloadres.result)
                                    {

                                        string errres = string.Empty;
                                        //errres = GeterrorResponse("06", "Transaction is not successful please tryagain!", txnID, mpteloadres.ResponseMessage);
                                        //writeLog("Err Response MyanpayAir Time:" + errres);
                                        //return errres;
                                        rescode = "06";
                                        resdecs = "Transaction is not successful please tryagain!";
                                        return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, mpteloadres.ResponseMessage, agentID, agentAmount, isAgreement);
                                    }
                                    else
                                    {
                                        //double availablebalance = 0;
                                        //double ledgerbalance = 0;
                                        ref4 = mpteloadres.InvoiceNumber + ":" + mpteloadres.OrderNumber + " " + mpteloadres.DateTime;
                                        resdecs = mpteloadres.ResponseMessage.ToString().Trim();
                                        writeLog("Response Description MyanPay:" + resdecs);
                                        writeLog("Response Result From MyanPay AirTime:" + mpteloadres.Status);

                                        ConfirmResponseModel confirmresmdl = new ConfirmResponseModel();
                                        if (!_agentWCF.ConfirmUpdate(txnID,
                                            ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                            agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                                        {
                                            writeLog("Error in ConfirmUpdate : " + errMsg);
                                        }
                                        else
                                        {
                                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                        }
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                        rescode = "00";
                                        resdecs = "Success";

                                        #region <-- Initiate confirmResponse Data to client -->
                                        confirmresmdl.taxID = taxID;
                                        confirmresmdl.email = email;
                                        confirmresmdl.password = password;
                                        confirmresmdl.messageid = messageid;
                                        confirmresmdl.billername = billerName;
                                        confirmresmdl.billerlogo = billerLogo;
                                        confirmresmdl.rescode = rescode;
                                        confirmresmdl.resdesc = resdecs;
                                        confirmresmdl.ref1 = ref1;
                                        confirmresmdl.ref2 = ref2;
                                        confirmresmdl.ref3 = ref3;
                                        confirmresmdl.ref4 = ref4;
                                        confirmresmdl.ref5 = mobileNo;
                                        confirmresmdl.ref1Name = ref1Name;
                                        confirmresmdl.ref2Name = ref2Name;
                                        confirmresmdl.ref3Name = ref3Name;
                                        confirmresmdl.ref4Name = ref4Name;
                                        confirmresmdl.ref5Name = ref5Name;
                                        confirmresmdl.availablebalance = availablebalance.ToString();
                                        confirmresmdl.txnID = txnID.ToString();
                                        confirmresmdl.TodayTxnCount = TodayTxnCount;
                                        confirmresmdl.TodayTxnAmount = TodayTxnAmount;
                                        confirmresmdl.smsMsg = smsMsg;
                                        #endregion

                                        string confirmRes = Utils.getConfirmRes(confirmresmdl);

                                        return confirmRes;


                                    }
                                    #endregion
                                }
                                else if (ConfigurationManager.AppSettings["EBAMPTAirtime"] == "Y")
                                {
                                    writeLog("$$$$$$$$ This Is EBA Tenenor AirTime $$$$$$$$$");

                                    #region <-- This is Easy Bill -->

                                    #region <-- Initialize Variable -->

                                    string oneStopRef = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                                    EABAirTimeTopUpReq pinreq = new EABAirTimeTopUpReq();
                                    AirTimeTopUpResults pinres = new AirTimeTopUpResults();
                                    string aesKey = string.Empty;

                                    if (IsTokenNullOrExpire(Token))
                                    {
                                        Token = GetOAuthToken();
                                    }

                                    pinreq.Token = Token.Token;
                                    pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                                    pinreq.BillerCode = "MPT";
                                    pinreq.Amount = ref2;
                                    pinreq.NetworkType = "GSM";
                                    pinreq.ChannelRefID = oneStopRef;
                                    pinreq.MobileNumber = mobileNo;


                                    var json_serializer1 = new JavaScriptSerializer();

                                    string jsonReq = json_serializer1.Serialize(pinreq);
                                    writeLog("ESBA JasonReq:" + jsonReq);
                                    #endregion
                                    //Request PIN To ESBA
                                    string jsonres = string.Empty;

                                    jsonres = Utils.pinRequest(jsonReq, esbAirTimeTopup);


                                    writeLog("ESBA JasonRes:" + jsonres);
                                    if (string.IsNullOrEmpty(jsonres))
                                    {
                                        resdecs = "No Response From ESBA";
                                        rescode = "06";

                                        return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                    }
                                    var json_serializerpinres = new JavaScriptSerializer();
                                    pinres = json_serializerpinres.Deserialize<AirTimeTopUpResults>(jsonres);



                                    if (pinres.AirTimeTopUpResult.TransactionStatus == 0)//|| pinres.AirTimeTopUpResult.ResponseCode == 2
                                    {

                                        ref4 = pinres.AirTimeTopUpResult.ChannelRefID + ":" + pinres.AirTimeTopUpResult.AirTimeToupTransactionID + " " + DateTime.Now.ToShortDateString();
                                        //ref4 = airtimeinqRes.EnquiryAirtimeTopUpResult.ChannelRefID + ":" + airtimeinqRes.EnquiryAirtimeTopUpResult.AirtimeTransactionID + " " + DateTime.Now.ToShortDateString();
                                        //double availablebalance = 0;
                                        //double ledgerbalance = 0;
                                        //string errMsg = null;

                                        amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                        #region <-- Update Transaction -->
                                        if (!_agentWCF.ConfirmUpdate(txnID,
                                            ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                            agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                                        {
                                            writeLog("Error in ConfirmUpdate : " + errMsg);
                                        }
                                        else
                                        {
                                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                        }
                                        #endregion
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                                        #region <-- Response Back To Client -->
                                        rescode = "00";
                                        resdecs = "Success";
                                        ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                        confirmres.taxID = taxID;
                                        confirmres.email = email;
                                        confirmres.password = password;
                                        confirmres.messageid = messageid;
                                        confirmres.billername = billerName;
                                        confirmres.billerlogo = billerLogo;
                                        confirmres.rescode = rescode;
                                        confirmres.resdesc = resdecs;
                                        confirmres.ref1 = ref1;
                                        confirmres.ref2 = ref2;
                                        confirmres.ref3 = ref3;
                                        confirmres.ref4 = ref4;
                                        confirmres.ref5 = mobileNo;
                                        confirmres.ref1Name = ref1Name;
                                        confirmres.ref2Name = ref2Name;
                                        confirmres.ref3Name = ref3Name;
                                        confirmres.ref5Name = ref5Name;
                                        confirmres.availablebalance = availablebalance.ToString();
                                        confirmres.txnID = txnID.ToString();
                                        confirmres.TodayTxnAmount = TodayTxnAmount;
                                        confirmres.TodayTxnCount = TodayTxnCount;
                                        confirmres.smsMsg = smsMsg;

                                        return Utils.getConfirmRes(confirmres);
                                        #endregion

                                        #region old logic Inquiry status after topup request success.
                                        //EABAirTimeTopUpEnquiryReq airtimeReq = new EABAirTimeTopUpEnquiryReq();
                                        //ebaAirTimeTopUpEnquiryResults airtimeinqRes = new ebaAirTimeTopUpEnquiryResults();

                                        //airtimeReq.Token = Token.Token;
                                        //airtimeReq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                                        //airtimeReq.ChannelRefID = pinreq.ChannelRefID;

                                        //var json_serializer2 = new JavaScriptSerializer();
                                        //string jsonReqinq = json_serializer2.Serialize(pinreq);
                                        //writeLog("EbaTelenorAirtime inqReq:" + jsonReqinq);
                                        //string jsonresinq = Utils.pinRequest(jsonReqinq, esbAirTimeInq);
                                        //writeLog("ebaTelenorAirtime inqRes:" + jsonresinq);
                                        //var json_serializerpinres2 = new JavaScriptSerializer();

                                        //airtimeinqRes = json_serializerpinres2.Deserialize<ebaAirTimeTopUpEnquiryResults>(jsonresinq);
                                        //if (airtimeinqRes.EnquiryAirtimeTopUpResult.ResponseCode == "0" && !string.IsNullOrEmpty(airtimeinqRes.EnquiryAirtimeTopUpResult.ChannelRefID) && !string.IsNullOrEmpty(airtimeinqRes.EnquiryAirtimeTopUpResult.AirtimeTransactionID))
                                        //{

                                        //ref4 = airtimeinqRes.EnquiryAirtimeTopUpResult.ChannelRefID + ":" + airtimeinqRes.EnquiryAirtimeTopUpResult.AirtimeTransactionID + " " + DateTime.Now.ToShortDateString();
                                        ////double availablebalance = 0;
                                        ////double ledgerbalance = 0;
                                        ////string errMsg = null;
                                        //amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                        //#region <-- Update Transaction -->
                                        //if (!_agentWCF.ConfirmUpdate(out  errMsg, out  batchID, out  avalbal, out  legbal, txnID,
                                        //    ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                        //    agentAmount, agentFeeDbl, isAgreement, smsStatus))
                                        //{
                                        //    writeLog("Error in ConfirmUpdate : " + errMsg);
                                        //}
                                        //else
                                        //{
                                        //    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                        //}
                                        //#endregion
                                        //writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                                        //#region <-- Response Back To Client -->
                                        //rescode = "00";
                                        //resdecs = "Success";
                                        //ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                        //confirmres.taxID = taxID;
                                        //confirmres.email = email;
                                        //confirmres.password = password;
                                        //confirmres.messageid = messageid;
                                        //confirmres.billername = billerName;
                                        //confirmres.billerlogo = billerLogo;
                                        //confirmres.rescode = rescode;
                                        //confirmres.resdesc = resdecs;
                                        //confirmres.ref1 = ref1;
                                        //confirmres.ref2 = ref2;
                                        //confirmres.ref3 = ref3;
                                        //confirmres.ref4 = ref4;
                                        //confirmres.ref5 = mobileNo;
                                        //confirmres.ref1Name = ref1Name;
                                        //confirmres.ref2Name = ref2Name;
                                        //confirmres.ref3Name = ref3Name;
                                        //confirmres.ref5Name = ref5Name;
                                        //confirmres.availablebalance = availablebalance.ToString();
                                        //confirmres.txnID = txnID.ToString();
                                        //confirmres.TodayTxnAmount = TodayTxnAmount;
                                        //confirmres.TodayTxnCount = TodayTxnCount;
                                        //confirmres.smsMsg = smsMsg;

                                        //return Utils.getConfirmRes(confirmres);
                                        //#endregion
                                        //  }
                                        //  else
                                        //   {
                                        ////if (!_agentWCF.updateError(out errMsg, txnID, "ER", pinres.AirTimeTopUpResult.ResponseDescription))
                                        ////{
                                        ////    writeLog("Error in updateError : " + errMsg);
                                        ////}
                                        ////return Utils.getErrorRes(pinres.AirTimeTopUpResult.ResponseCode.ToString(), "Transaction Not Successful Please Tryagain!");
                                        //return GetErrorResponseWithAddBalance(pinres.AirTimeTopUpResult.ResponseCode.ToString(), "Transaction Not Successful Please Tryagain!", txnID, pinres.AirTimeTopUpResult.ResponseDescription, agentID, agentAmount, isAgreement);
                                        //  }
                                        #endregion

                                    }
                                    else
                                    {
                                        return GetErrorResponseWithAddBalance(pinres.AirTimeTopUpResult.ResponseCode.ToString(), "Transaction Not Successful Please Tryagain!", txnID, pinres.AirTimeTopUpResult.ResponseDescription, agentID, agentAmount, isAgreement);
                                    }

                                    #endregion
                                }
                                else
                                {
                                    return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                }
                            }
                            else
                            {

                                //string errres = string.Empty;
                                //errres = GeterrorResponse(rescode, resdecs, txnID, resdecs);
                                //writeLog("Err Response MyanpayAir Time:" + errres);
                                //return errres;
                                return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                            }

                            #endregion
                        }
                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            writeLog("Simulator Y");
                            #region <-- Simulator is On -->
                            int batchid = 0;
                            //double availablebalance = 0;
                            //double ledgerbalance = 0;
                            //string errMsg = null;
                            //reqCardType = ref1;
                            //reqCardPrice = ref2;
                            mobileNo = ref3;
                            ref3 = new Random().Next(00000000, 99999999).ToString() + new Random().Next(00000000, 99999999).ToString();
                            ref4 = new Random().Next(00000000, 99999999).ToString() + new Random().Next(00000000, 99999999).ToString();
                            ref4 = ref4 + " 6/12/2016";
                            //amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));
                            if (!_agentWCF.InsertTransactionLog(txnID, "TopupReq", "Test Req", out errMsg))
                            {
                                writeLog("Error in InsertTransactionLog Req : " + errMsg);
                            }
                            if (!_agentWCF.InsertTransactionLog(txnID, "TopupRes", "Test Res", out errMsg))
                            {
                                writeLog("Error in InsertTransactionLog Res : " + errMsg);
                            }

                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                    string[] words = ref4.Split(' ');
                                    string PIN = words[0].ToString();
                                    string Expiry = words[1].ToString();
                                    smsMsg = smsH.getMessageTopup(agentName, MapTaxID, billerName, PIN, ref3, Expiry, double.Parse(amount).ToString("#,###.00"), branchCode);

                                    try
                                    {
                                        writeLog("sendSMSWithTxnID starts.");
                                        smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID, sendername);
                                        writeLog("sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                    }
                                }

                            }

                            if (!_agentWCF.ConfirmUpdate(txnID,
                                    ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                    agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);
                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                            }

                            rescode = "00";
                            resdecs = "Success";

                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = mobileNo;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.batchID = batchid.ToString();
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);
                            #endregion
                        }
                        else
                        {
                            telenorWCF.PINServiceClient myanPayPin = new telenorWCF.PINServiceClient();


                            if (myanPayPin.getPINMYANPAY(out resdecs, out ref4, out expiry, out ref3, amt, cardtypemyanpay))
                            {
                                #region <-- Get Pin From MyanpayPin Table of 1Stop PIN DB First -->
                                ref4 = ref4 + " " + expiry;
                                int batchid = 0;
                                //double availablebalance = 0;
                                //double ledgerbalance = 0;




                                //if (resdecs != "Out of Stock" && resdecs !="Internal Telco Error")
                                //{
                                writeLog("$$$$$$$$$$$$$$This Is Get Pin From MyanpayPin Table of 1Stop TELCOPON DB OK $$$$$$$$$$$$$$$");
                                // writeLog("Pin :" + ref4 + "| Expiry :" + expiry + "| SerialNo :" + ref3);

                                if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                                {
                                    writeLog("Error in ConfirmUpdate : " + errMsg);

                                }
                                else
                                {
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                                }
                                ref3 = Utils.maskString(ref3);
                                //    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                if (appType == "CS" || appType == "MS")
                                {
                                    if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                    {
                                        SMSHelper smsH = new SMSHelper();
                                        smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                        //string PIN = ref4;
                                        //string Expiry = expiry;
                                        string[] words = ref4.Split(' ');
                                        string PIN = words[0].ToString();
                                        string Expiry = words[1].ToString();

                                        if (MapTaxID == "0000000000001" || MapTaxID == "0000000000002" || MapTaxID == "0000000000003" || MapTaxID == "0000000000004" || MapTaxID == "0000000000015" || MapTaxID == "0000000000016")
                                        {
                                            smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Expiry", "", "Ref", PIN, Expiry, "", txnID.ToString(),
                                            double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);
                                        }
                                        else
                                        {
                                            smsMsg = smsH.getMessageTopup(agentName, MapTaxID, billerName, PIN, ref3, Expiry, double.Parse(amount).ToString("#,###.00"), branchCode);
                                        }

                                        try
                                        {
                                            writeLog("sendSMSWithTxnIDLB starts.");
                                            //  smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                            writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                            smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                            writeLog("sendSMSWithTxnIDLB ends.");
                                        }
                                        catch (Exception ex)
                                        {
                                        }
                                    }
                                    else
                                    {
                                        //To Develop Airtime
                                    }
                                }


                                rescode = "00";
                                resdecs = "Success";

                                ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                confirmres.taxID = taxID;
                                confirmres.email = email;
                                confirmres.password = password;
                                confirmres.messageid = messageid;
                                confirmres.billername = billerName;
                                confirmres.billerlogo = billerLogo;
                                confirmres.rescode = rescode;
                                confirmres.resdesc = resdecs;
                                confirmres.ref1 = ref1;
                                confirmres.ref2 = ref2;
                                confirmres.ref3 = ref3;
                                confirmres.ref4 = ref4;
                                confirmres.ref5 = mobileNo;
                                confirmres.ref1Name = ref1Name;
                                confirmres.ref2Name = ref2Name;
                                confirmres.ref3Name = ref3Name;
                                confirmres.ref4Name = ref4Name;
                                confirmres.ref5Name = ref5Name;
                                confirmres.batchID = batchid.ToString();
                                confirmres.availablebalance = availablebalance.ToString();
                                confirmres.txnID = txnID.ToString();
                                confirmres.TodayTxnAmount = TodayTxnAmount;
                                confirmres.TodayTxnCount = TodayTxnCount;
                                confirmres.smsMsg = smsMsg;

                                return Utils.getConfirmRes(confirmres);


                                #endregion
                            }
                            else
                            {
                                #region <-- GET MPTPIN FROM PAYHEREDB -->

                                payhereMPTWCF.PINServiceClient mptWCF = new payhereMPTWCF.PINServiceClient();

                                // ref4 = ref4 + " " + resExpiryDate;
                                //mobileNo = ref3;
                                //amt = double.Parse((double.Parse(ref2)).ToString("###0.00"));
                                writeLog("$$$$$$$$$$$$$$  Get Pin From MyanpayPin Table of 1Stop TELCOPON DB NOTOK $$$$$$$$$$$$$$$");
                                if (mptWCF.getPINMPT(out resdecs, out ref4, out expiry, out ref3, amt, cardtype))
                                {
                                    writeLog("$$$$$$$$$$$$$$$$$ get PIN MPT FROM PAYHERE OK $$$$$$$$$$$$$$$$$$$$$");
                                    ref4 = ref4 + " " + expiry;
                                    //double availablebalance = 0;
                                    //double ledgerbalance = 0;
                                    //string errMsg = null;
                                    amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                                    if (!_agentWCF.ConfirmUpdate(txnID,
                                    ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                    agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                                    {
                                        writeLog("Error in ConfirmUpdate : " + errMsg);
                                        resdecs = "Error in update database";
                                        rescode = "06";
                                        if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                        {
                                            writeLog("Error in updateError : " + errMsg);
                                        }
                                        return Utils.getErrorRes(rescode, "Transaction fail");
                                    }
                                    else
                                    {
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                    }
                                    ref3 = Utils.maskString(ref3);
                                    if (appType == "CS" || appType == "MS")
                                    {
                                        if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                        {
                                            SMSHelper smsH = new SMSHelper();
                                            smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                            string[] words = ref4.Split(' ');
                                            string PIN = words[0].ToString();
                                            string Expiry = words[1].ToString();

                                            smsMsg = smsH.getMessageTopup(agentName, MapTaxID, billerName, PIN, ref3, Expiry, double.Parse(amount).ToString("#,###.00"), branchCode);


                                            try
                                            {
                                                writeLog("sendSMSWithTxnID starts.");

                                                writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);

                                                smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                                writeLog("sendSMSWithTxnID ends.");
                                            }
                                            catch (Exception ex)
                                            {
                                            }
                                        }
                                        else
                                        {
                                            //To Develop Airtime
                                        }
                                    }


                                    rescode = "00";
                                    resdecs = "Success";

                                    ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                    confirmres.taxID = taxID;
                                    confirmres.email = email;
                                    confirmres.password = password;
                                    confirmres.messageid = messageid;
                                    confirmres.billername = billerName;
                                    confirmres.billerlogo = billerLogo;
                                    confirmres.rescode = rescode;
                                    confirmres.resdesc = resdecs;
                                    confirmres.ref1 = ref1;
                                    confirmres.ref2 = ref2;
                                    confirmres.ref3 = ref3;
                                    confirmres.ref4 = ref4;
                                    confirmres.ref5 = mobileNo;
                                    confirmres.ref1Name = ref1Name;
                                    confirmres.ref2Name = ref2Name;
                                    confirmres.ref3Name = ref3Name;
                                    confirmres.ref4Name = ref4Name;
                                    confirmres.ref5Name = ref5Name;
                                    confirmres.availablebalance = availablebalance.ToString();
                                    confirmres.txnID = txnID.ToString();
                                    confirmres.TodayTxnAmount = TodayTxnAmount;
                                    confirmres.TodayTxnCount = TodayTxnCount;
                                    confirmres.smsMsg = smsMsg;

                                    return Utils.getConfirmRes(confirmres);
                                }
                                else if (ConfigurationManager.AppSettings["isESBAMPT"].ToString() == "Y")
                                {
                                    writeLog("$$$$$$$$$$$ Get PINS from PayHere DB Not OK This Is ESBA $$$$$$$$$$");
                                    #region <-- This is Easy Bill -->
                                    #region <-- Initialize Variable -->
                                    writeLog("$$$$$$$$$ This Is ESBA $$$$$$$$$$$$$");
                                    pinReq pinreq = new pinReq();
                                    GetTelcoPINResults pinres = new GetTelcoPINResults();
                                    string aesKey = string.Empty;
                                    aesKey = ConfigurationManager.AppSettings["EsbaAesKey"].ToString();
                                    if (IsTokenNullOrExpire(Token))
                                    {
                                        Token = GetOAuthToken();
                                    }

                                    //  string cardtype =
                                    pinreq.Token = Token.Token;
                                    pinreq.BillerCode = "MPT";
                                    pinreq.NetworkType = MapTaxID == "2222222222222" ? "CDMA800" : MapTaxID == "3333333333333" ? "GSM" : "CDMA450";
                                    pinreq.PriceType = ref2;
                                    pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                                    pinreq.ChannelRefID = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                                    amt = double.Parse((double.Parse(ref2)).ToString("###0.00"));
                                    //   mobileNo = ref3;

                                    var json_serializer1 = new JavaScriptSerializer();

                                    string jsonReq = json_serializer1.Serialize(pinreq);
                                    writeLog("ESBA JasonReq:" + jsonReq);
                                    #endregion
                                    //Request PIN To ESBA
                                    string jsonres = Utils.pinRequest(jsonReq, esbGetPinMethod);
                                    writeLog("ESBA JasonRes:" + jsonres);
                                    if (string.IsNullOrEmpty(jsonres))
                                    {
                                        resdecs = "No Response From ESBA";
                                        rescode = "06";
                                        //if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                                        //{
                                        //    writeLog("Error in updateError : " + errMsg);
                                        //}
                                        //return Utils.getErrorRes(rescode, resdecs);
                                        return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                    }
                                    var json_serializerpinres = new JavaScriptSerializer();
                                    pinres = json_serializerpinres.Deserialize<GetTelcoPINResults>(jsonres);


                                    if (pinres.GetTelcoPINResult.TransactionStatus == "0" && !string.IsNullOrEmpty(pinres.GetTelcoPINResult.PIN))
                                    {
                                        writeLog("$$$$$$$$ Get PINs from EASYBILLS OK $$$$$$$$$$$$$$$");
                                        pinres.GetTelcoPINResult.PIN = Utils.AESDecryptText(pinres.GetTelcoPINResult.PIN, aesKey);
                                        ref4 = pinres.GetTelcoPINResult.PIN + " " + pinres.GetTelcoPINResult.ExpiryDate;
                                        ref3 = pinres.GetTelcoPINResult.SerialNumber;

                                        //double availablebalance = 0;
                                        //double ledgerbalance = 0;
                                        //string errMsg = null;
                                        amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                        #region <-- Update Transaction -->
                                        if (!_agentWCF.ConfirmUpdate(txnID,
                                            ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                            agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                                        {
                                            writeLog("Error in ConfirmUpdate : " + errMsg);
                                            resdecs = "Error in update database";
                                            rescode = "06";
                                            if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                            {
                                                writeLog("Error in updateError : " + errMsg);
                                            }
                                            return Utils.getErrorRes(rescode, "Transaction fail");
                                        }
                                        else
                                        {
                                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                        }
                                        #endregion
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                        ref3 = Utils.maskString(ref3);
                                        #region <-- Send SMS -->
                                        if (appType == "CS" || appType == "MS")
                                        {
                                            if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                            {
                                                SMSHelper smsH = new SMSHelper();
                                                smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                                string[] words = ref4.Split(' ');
                                                string PIN = words[0].ToString();
                                                string Expiry = words[1].ToString();

                                                smsMsg = smsH.getMessageTopup(agentName, MapTaxID, billerName, PIN, ref3, Expiry, double.Parse(amount).ToString("#,###.00"), branchCode);

                                                try
                                                {
                                                    writeLog("sendSMSWithTxnID starts.");
                                                    //  smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                                    writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                                    smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                                    writeLog("sendSMSWithTxnID ends.");
                                                }
                                                catch (Exception ex)
                                                {
                                                }
                                            }
                                            else
                                            {
                                                //To Develop Airtime
                                            }
                                        }
                                        #endregion
                                        #region <-- Response Back To Client -->
                                        rescode = "00";
                                        resdecs = "Success";
                                        ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                        confirmres.taxID = taxID;
                                        confirmres.email = email;
                                        confirmres.password = password;
                                        confirmres.messageid = messageid;
                                        confirmres.billername = billerName;
                                        confirmres.billerlogo = billerLogo;
                                        confirmres.rescode = rescode;
                                        confirmres.resdesc = resdecs;
                                        confirmres.ref1 = ref1;
                                        confirmres.ref2 = ref2;
                                        confirmres.ref3 = ref3;
                                        confirmres.ref4 = ref4;
                                        confirmres.ref5 = mobileNo;
                                        confirmres.ref1Name = ref1Name;
                                        confirmres.ref2Name = ref2Name;
                                        confirmres.ref3Name = ref3Name;
                                        confirmres.ref4Name = ref4Name;
                                        confirmres.ref5Name = ref5Name;
                                        confirmres.availablebalance = availablebalance.ToString();
                                        confirmres.txnID = txnID.ToString();
                                        confirmres.TodayTxnAmount = TodayTxnAmount;
                                        confirmres.TodayTxnCount = TodayTxnCount;
                                        confirmres.smsMsg = smsMsg;

                                        return Utils.getConfirmRes(confirmres);
                                        #endregion



                                    }
                                    else
                                    {
                                        resdecs = Utils.EsbResponseDescription(pinres.GetTelcoPINResult.ResponseCode);
                                        //if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                                        //{
                                        //    writeLog("Error in updateError : " + errMsg);
                                        //}
                                        //return Utils.getErrorRes(pinres.GetTelcoPINResult.ResponseCode, resdecs);
                                        return GetErrorResponseWithAddBalance(pinres.GetTelcoPINResult.ResponseCode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                    }

                                    #endregion
                                }
                                else
                                {
                                    writeLog("Error in getPIN of MPT.");
                                    if (!String.IsNullOrEmpty(errmsg))
                                    {
                                        string customMessage = errmsg.ToString();
                                    }

                                    //return GeterrorResponse("06", resdecs, txnID, resdecs);
                                    return GetErrorResponseWithAddBalance("06", "Out of Stock", txnID, resdecs, agentID, agentAmount, isAgreement);
                                }
                                #endregion
                            }

                        }

                    }

                    #endregion

                    #region <-- MecTelE_Load -->
                    else if (MapTaxID == "0000000000063")
                    {
                        double avalbal = 0;
                        double legbal = 0;

                        #region <-- This is Airtime topup. -->
                        writeLog("This is Airtime topup.");
                        if (MapTaxID == "0000000000063")
                        {
                            if (ConfigurationManager.AppSettings["EBAMecAirtime"].ToString() == "Y")
                            {
                                writeLog("This Is EBAMEC");
                                #region <-- MEC AIRTIME EBA -->
                                #region <-- This is Easy Bill -->


                                #region <-- Initialize Variable -->

                                mobileNo = ref3;
                                ref3 = "Airtime";

                                string oneStopRef = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                                EABAirTimeTopUpReq pinreq = new EABAirTimeTopUpReq();
                                AirTimeTopUpResults pinres = new AirTimeTopUpResults();
                                string aesKey = string.Empty;

                                if (IsTokenNullOrExpire(Token))
                                {
                                    Token = GetOAuthToken();
                                }

                                pinreq.Token = Token.Token;
                                pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                                pinreq.BillerCode = "MecTel";
                                pinreq.Amount = ref2;
                                pinreq.NetworkType = ConfigurationManager.AppSettings["MECNetworkType"].ToString();
                                pinreq.ChannelRefID = oneStopRef;
                                pinreq.MobileNumber = mobileNo;


                                var json_serializer1 = new JavaScriptSerializer();

                                string jsonReq = json_serializer1.Serialize(pinreq);
                                writeLog("ESBA JasonReq:" + jsonReq);
                                #endregion
                                //Request PIN To ESBA
                                string jsonres = string.Empty;

                                jsonres = Utils.pinRequest(jsonReq, esbAirTimeTopup);

                                writeLog("ESBA JasonRes:" + jsonres);
                                if (string.IsNullOrEmpty(jsonres))
                                {
                                    resdecs = "No Response From ESBA";
                                    rescode = "06";

                                    return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                }
                                var json_serializerpinres = new JavaScriptSerializer();
                                pinres = json_serializerpinres.Deserialize<AirTimeTopUpResults>(jsonres);



                                if (pinres.AirTimeTopUpResult.TransactionStatus == 0 && !string.IsNullOrEmpty(pinres.AirTimeTopUpResult.ChannelRefID) && pinres.AirTimeTopUpResult.AirTimeToupTransactionID != 0)
                                {

                                    ref4 = pinres.AirTimeTopUpResult.ChannelRefID + ":" + pinres.AirTimeTopUpResult.AirTimeToupTransactionID + " " + DateTime.Now.ToShortDateString();

                                    amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                    #region <-- Update Transaction -->
                                    if (!_agentWCF.ConfirmUpdate(txnID,
                                        ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                        agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                                    {
                                        writeLog("Error in ConfirmUpdate : " + errMsg);
                                    }
                                    else
                                    {
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                    }
                                    #endregion
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                                    #region <-- Response Back To Client -->
                                    rescode = "00";
                                    resdecs = "Success";
                                    ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                    confirmres.taxID = taxID;
                                    confirmres.email = email;
                                    confirmres.password = password;
                                    confirmres.messageid = messageid;
                                    confirmres.billername = billerName;
                                    confirmres.billerlogo = billerLogo;
                                    confirmres.rescode = rescode;
                                    confirmres.resdesc = resdecs;
                                    confirmres.ref1 = ref1;
                                    confirmres.ref2 = ref2;
                                    confirmres.ref3 = ref3;
                                    confirmres.ref4 = ref4;
                                    confirmres.ref5 = mobileNo;
                                    confirmres.ref1Name = ref1Name;
                                    confirmres.ref2Name = ref2Name;
                                    confirmres.ref3Name = ref3Name;
                                    confirmres.ref5Name = ref5Name;
                                    confirmres.availablebalance = availablebalance.ToString();
                                    confirmres.txnID = txnID.ToString();
                                    confirmres.TodayTxnAmount = TodayTxnAmount;
                                    confirmres.TodayTxnCount = TodayTxnCount;
                                    confirmres.smsMsg = smsMsg;

                                    return Utils.getConfirmRes(confirmres);
                                    #endregion
                                }
                                else
                                {
                                    rescode = pinres.AirTimeTopUpResult.ResponseCode.ToString();
                                    resdecs = "Transaction Not Successful Please Tryagain!";
                                    return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, pinres.AirTimeTopUpResult.ResponseDescription, agentID, agentAmount, isAgreement);
                                }

                                #endregion
                                #endregion
                            }
                            else
                            {

                                #region <-- MEC AIRTIME Direct Not Use -->


                                rescode = "01";
                                resdecs = "Airtime Topup is NOT Available.";
                                string errMsg = string.Empty;

                                bool responseresult = false;

                                MecTelAirtimeWCF.MecTelAirtimeClient mectelairtime = new MecTelAirtimeWCF.MecTelAirtimeClient();
                                mobileNo = ref3;
                                ref3 = "Airtime";
                                string mecrefcode = "2C2P" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                                responseresult = mectelairtime.BalanceUpdatewithReferenceCode(out errMsg, mobileNo, decimal.Parse(ref2), mecrefcode);//tlnairtime.UploadWithAirTime(ref2, mobileNo);
                                ref4 = errMsg + " " + mecrefcode;
                                resdecs = errMsg;
                                writeLog("Response Description:" + resdecs);
                                writeLog("Response Result From MecTel AirTime:" + responseresult + "|result Message:" + errMsg);

                                if (responseresult)
                                {
                                    writeLog("Response OK");

                                    amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                    if (!_agentWCF.ConfirmUpdate(txnID,
                                        ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                        agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                                    {
                                        writeLog("Error in ConfirmUpdate : " + errMsg);
                                    }
                                    else
                                    {
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                    }
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                    rescode = "00";
                                    resdecs = "Success";

                                    StringBuilder sbresponse = new StringBuilder();
                                    sbresponse.Append("<ConfirmRes>");
                                    sbresponse.Append("<Version>1.0</Version>");
                                    sbresponse.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                                    sbresponse.Append("<TaxID>" + taxID + "</TaxID>");
                                    sbresponse.Append("<Email>" + email + "</Email>");
                                    sbresponse.Append("<Password>" + password + "</Password>");
                                    sbresponse.Append("<MessageID>" + messageid + "</MessageID>");
                                    sbresponse.Append("<BillerName>" + billerName + "</BillerName>");
                                    sbresponse.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                                    sbresponse.Append("<ResCode>" + rescode + "</ResCode>");
                                    sbresponse.Append("<ResDesc>" + resdecs + "</ResDesc>");
                                    sbresponse.Append("<Ref1>" + ref1 + "</Ref1>");
                                    sbresponse.Append("<Ref2>" + ref2 + "</Ref2>");
                                    sbresponse.Append("<Ref3>" + ref3 + "</Ref3>");
                                    sbresponse.Append("<Ref4>" + ref4 + "</Ref4>");
                                    sbresponse.Append("<Ref5>" + mobileNo + "</Ref5>");
                                    sbresponse.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                                    sbresponse.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                                    sbresponse.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                                    sbresponse.Append("<Ref4Name></Ref4Name>");
                                    sbresponse.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                                    sbresponse.Append("<BatchID></BatchID>");
                                    sbresponse.Append("<Balance>" + avalbal + "</Balance>");
                                    sbresponse.Append("<TxnID>" + txnID + "</TxnID>");
                                    sbresponse.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                                    sbresponse.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                                    sbresponse.Append("<SMS>" + smsMsg + "</SMS>");
                                    sbresponse.Append("</ConfirmRes>");
                                    writeLog("RES XML : " + sbresponse.ToString());
                                    return sbresponse.ToString();

                                }
                                else
                                {
                                    return GetErrorResponseWithAddBalance("06", resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                }


                                #endregion
                            }

                        }
                        else
                        {
                            writeLog("This is Airtime topup.");
                            rescode = "01";
                            resdecs = "Airtime Topup is NOT Available.";

                            //return Utils.getErrorRes(rescode, resdecs);
                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                        #endregion
                    }

                    #endregion

                    #region <-- MecTel -->
                    else if (MapTaxID == "4444444444444")
                    {
                        double avalbal = 0;
                        double legbal = 0;
                       
                        if (topupType == "A")
                        {
                            #region <-- This is Airtime topup. -->
                            writeLog("This is Airtime topup.");
                            if (MapTaxID == "4444444444444")
                            {
                                if (ConfigurationManager.AppSettings["EBAMecAirtime"].ToString() == "Y")
                                {
                                    writeLog("This Is EBAMEC");
                                    #region <-- MEC AIRTIME EBA -->
                                    #region <-- This is Easy Bill -->


                                    #region <-- Initialize Variable -->

                                    mobileNo = ref3;
                                    ref3 = "Airtime";

                                    string oneStopRef = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                                    EABAirTimeTopUpReq pinreq = new EABAirTimeTopUpReq();
                                    AirTimeTopUpResults pinres = new AirTimeTopUpResults();
                                    string aesKey = string.Empty;

                                    if (IsTokenNullOrExpire(Token))
                                    {
                                        Token = GetOAuthToken();
                                    }

                                    pinreq.Token = Token.Token;
                                    pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                                    pinreq.BillerCode = "MecTel";
                                    pinreq.Amount = ref2;
                                    pinreq.NetworkType = ConfigurationManager.AppSettings["MECNetworkType"].ToString();
                                    pinreq.ChannelRefID = oneStopRef;
                                    pinreq.MobileNumber = mobileNo;


                                    var json_serializer1 = new JavaScriptSerializer();

                                    string jsonReq = json_serializer1.Serialize(pinreq);
                                    writeLog("ESBA JasonReq:" + jsonReq);
                                    #endregion
                                    //Request PIN To ESBA
                                    string jsonres = string.Empty;

                                    jsonres = Utils.pinRequest(jsonReq, esbAirTimeTopup);

                                    writeLog("ESBA JasonRes:" + jsonres);
                                    if (string.IsNullOrEmpty(jsonres))
                                    {
                                        resdecs = "No Response From ESBA";
                                        rescode = "06";
                                        //if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                                        //{
                                        //    writeLog("Error in updateError : " + errMsg);
                                        //}
                                        //return Utils.getErrorRes(rescode, resdecs);
                                        return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                    }
                                    var json_serializerpinres = new JavaScriptSerializer();
                                    pinres = json_serializerpinres.Deserialize<AirTimeTopUpResults>(jsonres);



                                    if (pinres.AirTimeTopUpResult.TransactionStatus == 0 && !string.IsNullOrEmpty(pinres.AirTimeTopUpResult.ChannelRefID) && pinres.AirTimeTopUpResult.AirTimeToupTransactionID != 0)
                                    {

                                        ref4 = pinres.AirTimeTopUpResult.ChannelRefID + ":" + pinres.AirTimeTopUpResult.AirTimeToupTransactionID + " " + DateTime.Now.ToShortDateString();
                                        //double availablebalance = 0;
                                        //double ledgerbalance = 0;
                                        //string errMsg = null;
                                        amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                        #region <-- Update Transaction -->
                                        if (!_agentWCF.ConfirmUpdate(txnID,
                                            ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                            agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                                        {
                                            writeLog("Error in ConfirmUpdate : " + errMsg);
                                        }
                                        else
                                        {
                                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                        }
                                        #endregion
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                                        #region <-- Response Back To Client -->
                                        rescode = "00";
                                        resdecs = "Success";
                                        ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                        confirmres.taxID = taxID;
                                        confirmres.email = email;
                                        confirmres.password = password;
                                        confirmres.messageid = messageid;
                                        confirmres.billername = billerName;
                                        confirmres.billerlogo = billerLogo;
                                        confirmres.rescode = rescode;
                                        confirmres.resdesc = resdecs;
                                        confirmres.ref1 = ref1;
                                        confirmres.ref2 = ref2;
                                        confirmres.ref3 = ref3;
                                        confirmres.ref4 = ref4;
                                        confirmres.ref5 = mobileNo;
                                        confirmres.ref1Name = ref1Name;
                                        confirmres.ref2Name = ref2Name;
                                        confirmres.ref3Name = ref3Name;
                                        confirmres.ref5Name = ref5Name;
                                        confirmres.availablebalance = availablebalance.ToString();
                                        confirmres.txnID = txnID.ToString();
                                        confirmres.TodayTxnAmount = TodayTxnAmount;
                                        confirmres.TodayTxnCount = TodayTxnCount;
                                        confirmres.smsMsg = smsMsg;

                                        return Utils.getConfirmRes(confirmres);
                                        #endregion
                                    }
                                    else
                                    {
                                        //if (!_agentWCF.updateError(out errMsg, txnID, "ER", pinres.AirTimeTopUpResult.ResponseDescription))
                                        //{
                                        //    writeLog("Error in updateError : " + errMsg);
                                        //}
                                        //return Utils.getErrorRes(pinres.AirTimeTopUpResult.ResponseCode.ToString(), "Transaction Not Successful Please Tryagain!");
                                        rescode = pinres.AirTimeTopUpResult.ResponseCode.ToString();
                                        resdecs = "Transaction Not Successful Please Tryagain!";
                                        return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, pinres.AirTimeTopUpResult.ResponseDescription, agentID, agentAmount, isAgreement);
                                    }

                                    #endregion
                                    #endregion
                                }
                                else
                                {

                                    #region <-- MEC AIRTIME Direct Not Use -->


                                    rescode = "01";
                                    resdecs = "Airtime Topup is NOT Available.";
                                    string errMsg = string.Empty;

                                    bool responseresult = false;

                                    MecTelAirtimeWCF.MecTelAirtimeClient mectelairtime = new MecTelAirtimeWCF.MecTelAirtimeClient();
                                    //   tlnAirTimeWCF.ServiceClient tlnairtime = new tlnAirTimeWCF.ServiceClient();
                                    mobileNo = ref3;
                                    ref3 = "Airtime";
                                    string mecrefcode = "2C2P" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                                    responseresult = mectelairtime.BalanceUpdatewithReferenceCode(out errMsg, mobileNo, decimal.Parse(ref2), mecrefcode);//tlnairtime.UploadWithAirTime(ref2, mobileNo);
                                    ref4 = errMsg + " " + mecrefcode;
                                    resdecs = errMsg;
                                    writeLog("Response Description:" + resdecs);
                                    writeLog("Response Result From MecTel AirTime:" + responseresult + "|result Message:" + errMsg);

                                    if (responseresult)
                                    {
                                        writeLog("Response OK");
                                        // ref4 = ref4 + " " + expiry;
                                        //double availablebalance = 0;
                                        //double ledgerbalance = 0;
                                        //string errMsg = null;
                                        amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));


                                        //if (_agentWCF.ConfirmUpdate(out  errMsg, out  batchID, out  availablebalance, out  ledgerbalance, txnID,
                                        //                   ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                        //                   agentAmount, agentFeeDbl, isAgreement))

                                        //{
                                        if (!_agentWCF.ConfirmUpdate(txnID,
                                            ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                            agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                                        {
                                            writeLog("Error in ConfirmUpdate : " + errMsg);
                                        }
                                        else
                                        {
                                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                        }
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                        rescode = "00";
                                        resdecs = "Success";

                                        StringBuilder sbresponse = new StringBuilder();
                                        sbresponse.Append("<ConfirmRes>");
                                        sbresponse.Append("<Version>1.0</Version>");
                                        sbresponse.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                                        sbresponse.Append("<TaxID>" + taxID + "</TaxID>");
                                        sbresponse.Append("<Email>" + email + "</Email>");
                                        sbresponse.Append("<Password>" + password + "</Password>");
                                        sbresponse.Append("<MessageID>" + messageid + "</MessageID>");
                                        sbresponse.Append("<BillerName>" + billerName + "</BillerName>");
                                        sbresponse.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                                        sbresponse.Append("<ResCode>" + rescode + "</ResCode>");
                                        sbresponse.Append("<ResDesc>" + resdecs + "</ResDesc>");
                                        sbresponse.Append("<Ref1>" + ref1 + "</Ref1>");
                                        sbresponse.Append("<Ref2>" + ref2 + "</Ref2>");
                                        sbresponse.Append("<Ref3>" + ref3 + "</Ref3>");
                                        sbresponse.Append("<Ref4>" + ref4 + "</Ref4>");
                                        sbresponse.Append("<Ref5>" + mobileNo + "</Ref5>");
                                        sbresponse.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                                        sbresponse.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                                        sbresponse.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                                        sbresponse.Append("<Ref4Name></Ref4Name>");
                                        sbresponse.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                                        sbresponse.Append("<BatchID></BatchID>");
                                        sbresponse.Append("<Balance>" + avalbal + "</Balance>");
                                        sbresponse.Append("<TxnID>" + txnID + "</TxnID>");
                                        sbresponse.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                                        sbresponse.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                                        sbresponse.Append("<SMS>" + smsMsg + "</SMS>");
                                        sbresponse.Append("</ConfirmRes>");
                                        writeLog("RES XML : " + sbresponse.ToString());
                                        return sbresponse.ToString();

                                    }
                                    else
                                    {
                                        //StringBuilder sberror = new StringBuilder();
                                        //// resdecs = "Airtime Topup is NOT Available.";
                                        //sberror.Append("<Error>");
                                        //sberror.Append("<Version>1.0</Version>");
                                        //sberror.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                                        //sberror.Append("<ResCode>" + "06" + "</ResCode>");
                                        //sberror.Append("<ResDesc>" + resdecs + "</ResDesc>");
                                        //sberror.Append("</Error>");
                                        //writeLog("RES XML : " + sberror.ToString());

                                        //if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                                        //{
                                        //    writeLog("Error in updateError : " + errMsg);
                                        //}
                                        //return sberror.ToString();

                                        return GetErrorResponseWithAddBalance("06", resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                    }


                                    #endregion
                                }

                            }
                            else
                            {
                                writeLog("This is Airtime topup.");
                                rescode = "01";
                                resdecs = "Airtime Topup is NOT Available.";

                                //return Utils.getErrorRes(rescode, resdecs);
                                return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                            }
                            #endregion
                        }
                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            writeLog("Simulator Y");
                            #region <-- Simulator Mode -->
                            int batchid = 0;
                            //double availablebalance = 0;
                            //double ledgerbalance = 0;
                            //string errMsg = null;
                            //reqCardType = ref1;
                            //reqCardPrice = ref2;
                            mobileNo = ref3;
                            ref3 = new Random().Next(00000000, 99999999).ToString() + new Random().Next(00000000, 99999999).ToString();
                            ref4 = new Random().Next(00000000, 99999999).ToString() + new Random().Next(00000000, 99999999).ToString();
                            ref4 = ref4 + " 6/12/2016";
                            //amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));
                            if (!_agentWCF.InsertTransactionLog(txnID, "TopupReq", "Test Req", out errMsg))
                            {
                                writeLog("Error in InsertTransactionLog Req : " + errMsg);
                            }
                            if (!_agentWCF.InsertTransactionLog(txnID, "TopupRes", "Test Res", out errMsg))
                            {
                                writeLog("Error in InsertTransactionLog Res : " + errMsg);
                            }

                            if (!_agentWCF.ConfirmUpdate(txnID,
                                   ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                   agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);

                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }
                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                    string[] words = ref4.Split(' ');
                                    string PIN = words[0].ToString();
                                    string Expiry = words[1].ToString();


                                    smsMsg = smsH.getMessageTopup(agentName, MapTaxID, billerName, PIN, ref3, Expiry,
                                       double.Parse(amount).ToString("#,###.00"), branchCode);

                                    try
                                    {
                                        writeLog("sendSMSWithTxnID starts.");
                                        //smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                        writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                        writeLog("sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                    }
                                }

                            }



                            rescode = "00";
                            resdecs = "Success";
                            StringBuilder sbresponse = new StringBuilder();
                            sbresponse.Append("<ConfirmRes>");
                            sbresponse.Append("<Version>1.0</Version>");
                            sbresponse.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            sbresponse.Append("<TaxID>" + taxID + "</TaxID>");
                            sbresponse.Append("<Email>" + email + "</Email>");
                            sbresponse.Append("<Password>" + password + "</Password>");
                            sbresponse.Append("<MessageID>" + messageid + "</MessageID>");
                            sbresponse.Append("<BillerName>" + billerName + "</BillerName>");
                            sbresponse.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                            sbresponse.Append("<ResCode>" + rescode + "</ResCode>");
                            sbresponse.Append("<ResDesc>" + resdecs + "</ResDesc>");
                            sbresponse.Append("<Ref1>" + ref1 + "</Ref1>");
                            sbresponse.Append("<Ref2>" + ref2 + "</Ref2>");
                            sbresponse.Append("<Ref3>" + ref3 + "</Ref3>");
                            sbresponse.Append("<Ref4>" + ref4 + "</Ref4>");
                            sbresponse.Append("<Ref5>" + mobileNo + "</Ref5>");
                            sbresponse.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                            sbresponse.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                            sbresponse.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                            sbresponse.Append("<Ref4Name>" + ref4Name + "</Ref4Name>");
                            sbresponse.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                            sbresponse.Append("<BatchID>" + batchid + "</BatchID>");
                            sbresponse.Append("<Balance>" + avalbal + "</Balance>");
                            sbresponse.Append("<TxnID>" + txnID + "</TxnID>");
                            sbresponse.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                            sbresponse.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                            sbresponse.Append("<SMS>" + smsMsg + "</SMS>");
                            sbresponse.Append("</ConfirmRes>");
                            writeLog("RES XML : " + sbresponse.ToString());
                            // writeLog("TxnID:*****" + txnID);
                            return sbresponse.ToString();

                            #endregion
                        }
                        else
                        {
                            mobileNo = ref3;

                            #region <-- This is Easy Bill -->
                            #region <-- Initialize Variable -->
                            writeLog("$$$$$$$$$ This Is ESBA  MEC EPIN $$$$$$$$$$$$$");
                            pinReq pinreq = new pinReq();
                            GetTelcoPINResults pinres = new GetTelcoPINResults();
                            string aesKey = string.Empty;
                            aesKey = ConfigurationManager.AppSettings["EsbaAesKey"].ToString();
                            if (IsTokenNullOrExpire(Token))
                            {
                                Token = GetOAuthToken();
                            }

                            pinreq.Token = Token.Token;
                            pinreq.BillerCode = ConfigurationManager.AppSettings["MecBillerCode"].ToString();
                            pinreq.NetworkType = ConfigurationManager.AppSettings["MECNetworkType"].ToString();
                            pinreq.PriceType = ref2;
                            pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                            pinreq.ChannelRefID = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                            amt = double.Parse((double.Parse(ref2)).ToString("###0.00"));
                            //  mobileNo = ref3;

                            var json_serializer1 = new JavaScriptSerializer();

                            string jsonReq = json_serializer1.Serialize(pinreq);
                            writeLog("ESBA JasonReq:" + jsonReq);
                            #endregion
                            //Request PIN To ESBA
                            string jsonres = Utils.pinRequest(jsonReq, esbGetPinMethod);
                            writeLog("ESBA JasonRes:" + jsonres);
                            if (string.IsNullOrEmpty(jsonres))
                            {
                                resdecs = "No Response From ESBA";
                                rescode = "06";
                                //if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                                //{
                                //    writeLog("Error in updateError : " + errMsg);
                                //}
                                //return Utils.getErrorRes(rescode, resdecs);
                                return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                            }

                            var json_serializerpinres = new JavaScriptSerializer();
                            pinres = json_serializerpinres.Deserialize<GetTelcoPINResults>(jsonres);

                            if (pinres.GetTelcoPINResult.TransactionStatus == "0" && !string.IsNullOrEmpty(pinres.GetTelcoPINResult.PIN))
                            {

                                pinres.GetTelcoPINResult.PIN = Utils.AESDecryptText(pinres.GetTelcoPINResult.PIN, aesKey);
                                ref4 = pinres.GetTelcoPINResult.PIN + " " + pinres.GetTelcoPINResult.ExpiryDate;
                                ref3 = pinres.GetTelcoPINResult.SerialNumber;

                                //double availablebalance = 0;
                                //double ledgerbalance = 0;
                                //string errMsg = null;
                                amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                #region <-- Update Transaction -->
                                if (!_agentWCF.ConfirmUpdate(txnID,
                                    ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                    agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                                {
                                    writeLog("Error in ConfirmUpdate : " + errMsg);
                                    resdecs = "Error in update database";
                                    rescode = "06";
                                    if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                    {
                                        writeLog("Error in updateError : " + errMsg);
                                    }
                                    return Utils.getErrorRes(rescode, "Transaction fail");
                                }
                                else
                                {
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                }
                                #endregion
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                ref3 = Utils.maskString(ref3);
                                #region <-- Send SMS -->
                                if (appType == "CS" || appType == "MS")
                                {
                                    if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                    {
                                        SMSHelper smsH = new SMSHelper();
                                        smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                        string[] words = ref4.Split(' ');
                                        string PIN = words[0].ToString();
                                        string Expiry = words[1].ToString();

                                        smsMsg = smsH.getMessageTopup(agentName, MapTaxID, billerName, PIN, ref3, Expiry, double.Parse(amount).ToString("#,###.00"), branchCode);

                                        try
                                        {
                                            writeLog("sendSMSWithTxnID starts.");
                                            //  smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                            writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                            smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                            writeLog("sendSMSWithTxnID ends.");
                                        }
                                        catch (Exception ex)
                                        {
                                        }
                                    }
                                    else
                                    {
                                        //To Develop Airtime
                                    }
                                }
                                #endregion
                                #region <-- Response Back To Client -->
                                rescode = "00";
                                resdecs = "Success";
                                ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                confirmres.taxID = taxID;
                                confirmres.email = email;
                                confirmres.password = password;
                                confirmres.messageid = messageid;
                                confirmres.billername = billerName;
                                confirmres.billerlogo = billerLogo;
                                confirmres.rescode = rescode;
                                confirmres.resdesc = resdecs;
                                confirmres.ref1 = ref1;
                                confirmres.ref2 = ref2;
                                confirmres.ref3 = ref3;
                                confirmres.ref4 = ref4;
                                confirmres.ref5 = mobileNo;
                                confirmres.ref1Name = ref1Name;
                                confirmres.ref2Name = ref2Name;
                                confirmres.ref3Name = ref3Name;
                                confirmres.ref4Name = ref4Name;
                                confirmres.ref5Name = ref5Name;
                                confirmres.availablebalance = availablebalance.ToString();
                                confirmres.txnID = txnID.ToString();
                                confirmres.TodayTxnAmount = TodayTxnAmount;
                                confirmres.TodayTxnCount = TodayTxnCount;
                                confirmres.smsMsg = smsMsg;

                                return Utils.getConfirmRes(confirmres);
                                #endregion



                            }
                            else
                            {
                                resdecs = Utils.EsbResponseDescription(pinres.GetTelcoPINResult.ResponseCode);
                                //if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                                //{
                                //    writeLog("Error in updateError : " + errMsg);
                                //}
                                //return Utils.getErrorRes(pinres.GetTelcoPINResult.ResponseCode, "Out of Stock");
                                rescode = pinres.GetTelcoPINResult.ResponseCode;
                                return GetErrorResponseWithAddBalance(rescode, "Out of Stock", txnID, resdecs, agentID, agentAmount, isAgreement);
                            }

                            #endregion
                        }
                    }
                    #endregion

                    #region <-- Telcos & GiftCard -->
                    // ||taxID == "0000000000001" ||taxID == "2222222222222" || taxID == "3333333333333"  "  || taxID == "6666666666666"
                    else if (MapTaxID == "0000000000002" || MapTaxID == "0000000000003" || MapTaxID == "0000000000004" || MapTaxID == "0000000000015" || MapTaxID == "0000000000016") ////Topup & GiftCard
                    {
                        double avalbal = 0;
                        double legbal = 0;

                        writeLog("This is GIFTCARD & TOPUP.");
                        if (topupType == "A")
                        {
                            #region <-- MecAirtime Not Use Start From 2017-Oct-10 -->
                            //writeLog("This is Airtime topup.");
                            //if (MapTaxID == "4444444444444")
                            //{
                            //    if (ConfigurationManager.AppSettings["EBAMecAirtime"].ToString() == "Y")
                            //    {
                            //        writeLog("This Is EBAMEC");
                            //        #region MEC AIRTIME EBA
                            //        #region This is Easy Bill


                            //        #region Initialize Variable

                            //        mobileNo = ref3;
                            //        ref3 = "Airtime";

                            //        string oneStopRef = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                            //        EABAirTimeTopUpReq pinreq = new EABAirTimeTopUpReq();
                            //        AirTimeTopUpResults pinres = new AirTimeTopUpResults();
                            //        string aesKey = string.Empty;

                            //        if (IsTokenNullOrExpire(Token))
                            //        {
                            //            Token = GetOAuthToken();
                            //        }

                            //        pinreq.Token = Token.Token;
                            //        pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                            //        pinreq.BillerCode = "MecTel";
                            //        pinreq.Amount = ref2;
                            //        pinreq.NetworkType = ConfigurationManager.AppSettings["MECNetworkType"].ToString();
                            //        pinreq.ChannelRefID = oneStopRef;
                            //        pinreq.MobileNumber = mobileNo;


                            //        var json_serializer1 = new JavaScriptSerializer();

                            //        string jsonReq = json_serializer1.Serialize(pinreq);
                            //        writeLog("ESBA JasonReq:" + jsonReq);
                            //        #endregion
                            //        //Request PIN To ESBA
                            //        string jsonres = string.Empty;

                            //        jsonres = Utils.pinRequest(jsonReq, esbAirTimeTopup);

                            //        writeLog("ESBA JasonRes:" + jsonres);
                            //        var json_serializerpinres = new JavaScriptSerializer();
                            //        pinres = json_serializerpinres.Deserialize<AirTimeTopUpResults>(jsonres);

                            //        if (string.IsNullOrEmpty(jsonres))
                            //        {
                            //            resdecs = "No Response From ESBA";
                            //            rescode = "06";
                            //            if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                            //            {
                            //                writeLog("Error in updateError : " + errMsg);
                            //            }
                            //            return Utils.getErrorRes(rescode, resdecs);
                            //        }

                            //        if (pinres.AirTimeTopUpResult.ResponseCode == 0 && !string.IsNullOrEmpty(pinres.AirTimeTopUpResult.ChannelRefID) && pinres.AirTimeTopUpResult.AirTimeToupTransactionID != 0)
                            //        {

                            //            ref4 = pinres.AirTimeTopUpResult.ChannelRefID + ":" + pinres.AirTimeTopUpResult.AirTimeToupTransactionID + " " + DateTime.Now.ToShortDateString();
                            //            double availablebalance = 0;
                            //            double ledgerbalance = 0;
                            //            //string errMsg = null;
                            //            amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                            //            #region update Transaction
                            //            if (!_agentWCF.ConfirmUpdate(out  errMsg, out  batchID, out  availablebalance, out  ledgerbalance, txnID,
                            //                ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                            //                agentAmount, agentFeeDbl, isAgreement, smsStatus))
                            //            {
                            //                writeLog("Error in ConfirmUpdate : " + errMsg);
                            //            }
                            //            else
                            //            {
                            //                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                            //            }
                            //            #endregion
                            //            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            //            #region Response Back To Client
                            //            rescode = "00";
                            //            resdecs = "Success";
                            //            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            //            confirmres.taxID = taxID;
                            //            confirmres.email = email;
                            //            confirmres.password = password;
                            //            confirmres.messageid = messageid;
                            //            confirmres.billername = billerName;
                            //            confirmres.billerlogo = billerLogo;
                            //            confirmres.rescode = rescode;
                            //            confirmres.resdesc = resdecs;
                            //            confirmres.ref1 = ref1;
                            //            confirmres.ref2 = ref2;
                            //            confirmres.ref3 = ref3;
                            //            confirmres.ref4 = ref4;
                            //            confirmres.ref5 = mobileNo;
                            //            confirmres.ref1Name = ref1Name;
                            //            confirmres.ref2Name = ref2Name;
                            //            confirmres.ref3Name = ref3Name;
                            //            confirmres.ref5Name = ref5Name;
                            //            confirmres.availablebalance = availablebalance.ToString();
                            //            confirmres.txnID = txnID.ToString();
                            //            confirmres.TodayTxnAmount = TodayTxnAmount;
                            //            confirmres.TodayTxnCount = TodayTxnCount;
                            //            confirmres.smsMsg = smsMsg;

                            //            return Utils.getConfirmRes(confirmres);
                            //            #endregion
                            //        }
                            //        else
                            //        {
                            //            if (!_agentWCF.updateError(out errMsg, txnID, "ER", pinres.AirTimeTopUpResult.ResponseDescription))
                            //            {
                            //                writeLog("Error in updateError : " + errMsg);
                            //            }
                            //            return Utils.getErrorRes(pinres.AirTimeTopUpResult.ResponseCode.ToString(), "Transaction Not Successful Please Tryagain!");
                            //        }




                            //        #endregion
                            //        #endregion
                            //    }
                            //    else
                            //    {

                            //        #region MEC AIRTIME Direct Not Use


                            //        rescode = "01";
                            //        resdecs = "Airtime Topup is NOT Available.";
                            //        string errMsg = string.Empty;

                            //        bool responseresult = false;

                            //        MecTelAirtimeWCF.MecTelAirtimeClient mectelairtime = new MecTelAirtimeWCF.MecTelAirtimeClient();
                            //        //   tlnAirTimeWCF.ServiceClient tlnairtime = new tlnAirTimeWCF.ServiceClient();
                            //        mobileNo = ref3;
                            //        ref3 = "Airtime";
                            //        string mecrefcode = "2C2P" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                            //        responseresult = mectelairtime.BalanceUpdatewithReferenceCode(out errMsg, mobileNo, decimal.Parse(ref2), mecrefcode);//tlnairtime.UploadWithAirTime(ref2, mobileNo);
                            //        ref4 = errMsg + " " + mecrefcode;
                            //        resdecs = errMsg;
                            //        writeLog("Response Description:" + resdecs);
                            //        writeLog("Response Result From MecTel AirTime:" + responseresult + "|result Message:" + errMsg);

                            //        if (responseresult)
                            //        {
                            //            writeLog("Response OK");
                            //            // ref4 = ref4 + " " + expiry;
                            //            double availablebalance = 0;
                            //            double ledgerbalance = 0;
                            //            //string errMsg = null;
                            //            amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));


                            //            //if (_agentWCF.ConfirmUpdate(out  errMsg, out  batchID, out  availablebalance, out  ledgerbalance, txnID,
                            //            //                   ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                            //            //                   agentAmount, agentFeeDbl, isAgreement))

                            //            //{
                            //            if (!_agentWCF.ConfirmUpdate(out  errMsg, out  batchID, out  availablebalance, out  ledgerbalance, txnID,
                            //                ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                            //                agentAmount, agentFeeDbl, isAgreement, smsStatus))
                            //            {
                            //                writeLog("Error in ConfirmUpdate : " + errMsg);
                            //            }
                            //            else
                            //            {
                            //                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                            //            }
                            //            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                            //            rescode = "00";
                            //            resdecs = "Success";

                            //            StringBuilder sbresponse = new StringBuilder();
                            //            sbresponse.Append("<ConfirmRes>");
                            //            sbresponse.Append("<Version>1.0</Version>");
                            //            sbresponse.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            //            sbresponse.Append("<TaxID>" + taxID + "</TaxID>");
                            //            sbresponse.Append("<Email>" + email + "</Email>");
                            //            sbresponse.Append("<Password>" + password + "</Password>");
                            //            sbresponse.Append("<MessageID>" + messageid + "</MessageID>");
                            //            sbresponse.Append("<BillerName>" + billerName + "</BillerName>");
                            //            sbresponse.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                            //            sbresponse.Append("<ResCode>" + rescode + "</ResCode>");
                            //            sbresponse.Append("<ResDesc>" + resdecs + "</ResDesc>");
                            //            sbresponse.Append("<Ref1>" + ref1 + "</Ref1>");
                            //            sbresponse.Append("<Ref2>" + ref2 + "</Ref2>");
                            //            sbresponse.Append("<Ref3>" + ref3 + "</Ref3>");
                            //            sbresponse.Append("<Ref4>" + ref4 + "</Ref4>");
                            //            sbresponse.Append("<Ref5>" + mobileNo + "</Ref5>");
                            //            sbresponse.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                            //            sbresponse.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                            //            sbresponse.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                            //            sbresponse.Append("<Ref4Name></Ref4Name>");
                            //            sbresponse.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                            //            sbresponse.Append("<BatchID></BatchID>");
                            //            sbresponse.Append("<Balance>" + availablebalance + "</Balance>");
                            //            sbresponse.Append("<TxnID>" + txnID + "</TxnID>");
                            //            sbresponse.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                            //            sbresponse.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                            //            sbresponse.Append("<SMS>" + smsMsg + "</SMS>");
                            //            sbresponse.Append("</ConfirmRes>");
                            //            writeLog("RES XML : " + sbresponse.ToString());
                            //            return sbresponse.ToString();

                            //        }
                            //        else
                            //        {
                            //            StringBuilder sberror = new StringBuilder();
                            //            // resdecs = "Airtime Topup is NOT Available.";
                            //            sberror.Append("<Error>");
                            //            sberror.Append("<Version>1.0</Version>");
                            //            sberror.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            //            sberror.Append("<ResCode>" + "06" + "</ResCode>");
                            //            sberror.Append("<ResDesc>" + resdecs + "</ResDesc>");
                            //            sberror.Append("</Error>");
                            //            writeLog("RES XML : " + sberror.ToString());

                            //            if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                            //            {
                            //                writeLog("Error in updateError : " + errMsg);
                            //            }
                            //            return sberror.ToString();
                            //        }


                            //        #endregion
                            //    }

                            //}
                            //else
                            //{
                            //    writeLog("This is Airtime topup.");
                            //    rescode = "01";
                            //    resdecs = "Airtime Topup is NOT Available.";

                            //    return Utils.getErrorRes(rescode, resdecs);
                            //}


                            #endregion
                            writeLog("This is Airtime topup.");
                            rescode = "01";
                            resdecs = "Airtime Topup is NOT Available.";

                            //return Utils.getErrorRes(rescode, resdecs);
                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            writeLog("Simulator Y");
                            #region <-- Simulator Mode -->
                            int batchid = 0;
                            //double availablebalance = 0;
                            //double ledgerbalance = 0;
                            //string errMsg = null;
                            //reqCardType = ref1;
                            //reqCardPrice = ref2;
                            mobileNo = ref3;
                            ref3 = new Random().Next(00000000, 99999999).ToString() + new Random().Next(00000000, 99999999).ToString();
                            ref4 = new Random().Next(00000000, 99999999).ToString() + new Random().Next(00000000, 99999999).ToString();
                            ref4 = ref4 + " 6/12/2016";
                            //amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));
                            if (!_agentWCF.InsertTransactionLog(txnID, "TopupReq", "Test Req", out errMsg))
                            {
                                writeLog("Error in InsertTransactionLog Req : " + errMsg);
                            }
                            if (!_agentWCF.InsertTransactionLog(txnID, "TopupRes", "Test Res", out errMsg))
                            {
                                writeLog("Error in InsertTransactionLog Res : " + errMsg);
                            }

                            if (!_agentWCF.ConfirmUpdate(txnID,
                                   ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                   agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);

                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }
                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                    string[] words = ref4.Split(' ');
                                    string PIN = words[0].ToString();
                                    string Expiry = words[1].ToString();

                                    if (MapTaxID == "0000000000001" || MapTaxID == "0000000000002" || MapTaxID == "0000000000003" || MapTaxID == "0000000000004" || MapTaxID == "0000000000015" || MapTaxID == "0000000000016")
                                    {
                                        smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Expiry", "", "Ref", PIN, Expiry, "", txnID.ToString(),
                                        double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                        writeLog("---Messssage Text-----" + smsMsg);

                                    }
                                    else
                                    {
                                        smsMsg = smsH.getMessageTopup(agentName, MapTaxID, billerName, PIN, ref3, Expiry,
                                           double.Parse(amount).ToString("#,###.00"), branchCode);

                                    }

                                    try
                                    {
                                        writeLog("sendSMSWithTxnID starts.");
                                        //smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                        writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                        writeLog("sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                    }
                                }

                            }



                            rescode = "00";
                            resdecs = "Success";
                            StringBuilder sbresponse = new StringBuilder();
                            sbresponse.Append("<ConfirmRes>");
                            sbresponse.Append("<Version>1.0</Version>");
                            sbresponse.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            sbresponse.Append("<TaxID>" + taxID + "</TaxID>");
                            sbresponse.Append("<Email>" + email + "</Email>");
                            sbresponse.Append("<Password>" + password + "</Password>");
                            sbresponse.Append("<MessageID>" + messageid + "</MessageID>");
                            sbresponse.Append("<BillerName>" + billerName + "</BillerName>");
                            sbresponse.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                            sbresponse.Append("<ResCode>" + rescode + "</ResCode>");
                            sbresponse.Append("<ResDesc>" + resdecs + "</ResDesc>");
                            sbresponse.Append("<Ref1>" + ref1 + "</Ref1>");
                            sbresponse.Append("<Ref2>" + ref2 + "</Ref2>");
                            sbresponse.Append("<Ref3>" + ref3 + "</Ref3>");
                            sbresponse.Append("<Ref4>" + ref4 + "</Ref4>");
                            sbresponse.Append("<Ref5>" + mobileNo + "</Ref5>");
                            sbresponse.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                            sbresponse.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                            sbresponse.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                            sbresponse.Append("<Ref4Name>" + ref4Name + "</Ref4Name>");
                            sbresponse.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                            sbresponse.Append("<BatchID>" + batchid + "</BatchID>");
                            sbresponse.Append("<Balance>" + avalbal + "</Balance>");
                            sbresponse.Append("<TxnID>" + txnID + "</TxnID>");
                            sbresponse.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                            sbresponse.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                            sbresponse.Append("<SMS>" + smsMsg + "</SMS>");
                            sbresponse.Append("</ConfirmRes>");
                            writeLog("RES XML : " + sbresponse.ToString());
                            // writeLog("TxnID:*****" + txnID);
                            return sbresponse.ToString();

                            #endregion
                        }
                        else
                        {

                            // taxID == "2222222222222" ? "102" : taxID == "3333333333333" ? "101" :
                            string cardtype = MapTaxID == "4444444444444" ? "103" : MapTaxID == "6666666666666" ? "121" : "000";

                            telenorWCF.PINServiceClient tlnWS = new telenorWCF.PINServiceClient();
                            amt = double.Parse((double.Parse(ref2)).ToString("###0.00"));
                            mobileNo = ref3;


                            string msg = string.Empty;
                            if (CheckIsESBAGiftCard(MapTaxID))
                            {
                                #region <-- This is Easy Bill -->
                                #region <-- Initialize Variable -->
                                writeLog("$$$$$$$$$ This Is ESBA $$$$$$$$$$$$$");
                                string billercode = string.Empty;
                                billercode = getBillerCode(MapTaxID);
                                giftcardConfirmReq pinreq = new giftcardConfirmReq();
                                GetGiftCardPINResults pinres = new GetGiftCardPINResults();
                                string aesKey = string.Empty;
                                aesKey = ConfigurationManager.AppSettings["EsbaAesKey"].ToString();
                                if (IsTokenNullOrExpire(Token))
                                {
                                    Token = GetOAuthToken();
                                }

                                //  string cardtype =
                                pinreq.Token = Token.Token;
                                pinreq.BillerCode = billercode;
                                pinreq.PriceType = ref2;
                                pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                                pinreq.ChannelRefID = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                                amt = double.Parse((double.Parse(ref2)).ToString("###0.00"));
                                //   mobileNo = ref3;

                                var json_serializer1 = new JavaScriptSerializer();

                                string jsonReq = json_serializer1.Serialize(pinreq);
                                writeLog("ESBA JasonReq:" + jsonReq);
                                #endregion
                                //Request PIN To ESBA
                                string jsonres = Utils.pinRequest(jsonReq, esbGetGiftCardMethod);
                                writeLog("ESBA JasonRes:" + jsonres);
                                if (string.IsNullOrEmpty(jsonres))
                                {
                                    resdecs = "No Response From ESBA";
                                    rescode = "06";
                                    //if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                                    //{
                                    //    writeLog("Error in updateError : " + errMsg);
                                    //}
                                    //return Utils.getErrorRes(rescode, resdecs);
                                    return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                }
                                var json_serializerpinres = new JavaScriptSerializer();
                                pinres = json_serializerpinres.Deserialize<GetGiftCardPINResults>(jsonres);


                                if (pinres.GetGiftCardPINResult.TransactionStatus == "0" && !string.IsNullOrEmpty(pinres.GetGiftCardPINResult.PIN))
                                {

                                    pinres.GetGiftCardPINResult.PIN = Utils.AESDecryptText(pinres.GetGiftCardPINResult.PIN, aesKey);
                                    ref4 = pinres.GetGiftCardPINResult.PIN + " " + pinres.GetGiftCardPINResult.ExpiryDate;
                                    ref3 = pinres.GetGiftCardPINResult.SerialNumber;

                                    //double availablebalance = 0;
                                    //double ledgerbalance = 0;
                                    //string errMsg = null;
                                    amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                    #region <-- Update Transaction -->
                                    if (!_agentWCF.ConfirmUpdate(txnID,
                                        ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                        agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                                    {
                                        writeLog("Error in ConfirmUpdate : " + errMsg);
                                        resdecs = "Error in update database";
                                        rescode = "06";
                                        if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                        {
                                            writeLog("Error in updateError : " + errMsg);
                                        }
                                        return Utils.getErrorRes(rescode, "Transaction fail");
                                    }
                                    else
                                    {
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                    }
                                    #endregion
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                    #region <-- Send SMS -->
                                    if (appType == "CS" || appType == "MS")
                                    {
                                        if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                        {
                                            SMSHelper smsH = new SMSHelper();
                                            smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                            string[] words = ref4.Split(' ');
                                            string PIN = words[0].ToString();
                                            string Expiry = words[1].ToString();

                                            if (MapTaxID == "0000000000002" || MapTaxID == "0000000000003" || MapTaxID == "0000000000004" || MapTaxID == "0000000000015" || MapTaxID == "0000000000016")
                                            {
                                                smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Expiry", "", "Ref", PIN, Expiry, "", txnID.ToString(),
                                                double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);
                                            }
                                            else
                                            {
                                                smsMsg = smsH.getMessageTopup(agentName, MapTaxID, billerName, PIN, ref3, Expiry, double.Parse(amount).ToString("#,###.00"), branchCode);
                                            }
                                            try
                                            {
                                                writeLog("sendSMSWithTxnID starts.");
                                                //  smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                                writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                                smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                                writeLog("sendSMSWithTxnID ends.");
                                            }
                                            catch (Exception ex)
                                            {
                                            }
                                        }
                                        else
                                        {
                                            //To Develop Airtime
                                        }
                                    }
                                    #endregion
                                    #region <-- Response Back To Client -->
                                    rescode = "00";
                                    resdecs = "Success";
                                    ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                    confirmres.taxID = taxID;
                                    confirmres.email = email;
                                    confirmres.password = password;
                                    confirmres.messageid = messageid;
                                    confirmres.billername = billerName;
                                    confirmres.billerlogo = billerLogo;
                                    confirmres.rescode = rescode;
                                    confirmres.resdesc = resdecs;
                                    confirmres.ref1 = ref1;
                                    confirmres.ref2 = ref2;
                                    confirmres.ref3 = ref3;
                                    confirmres.ref4 = ref4;
                                    confirmres.ref5 = mobileNo;
                                    confirmres.ref1Name = ref1Name;
                                    confirmres.ref2Name = ref2Name;
                                    confirmres.ref3Name = ref3Name;
                                    confirmres.ref4Name = ref4Name;
                                    confirmres.ref5Name = ref5Name;
                                    confirmres.availablebalance = availablebalance.ToString();
                                    confirmres.txnID = txnID.ToString();
                                    confirmres.TodayTxnAmount = TodayTxnAmount;
                                    confirmres.TodayTxnCount = TodayTxnCount;
                                    confirmres.smsMsg = smsMsg;

                                    return Utils.getConfirmRes(confirmres);
                                    #endregion



                                }
                                else
                                {
                                    resdecs = Utils.EsbResponseDescription(pinres.GetGiftCardPINResult.ResponseCode);
                                    //if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                                    //{
                                    //    writeLog("Error in updateError : " + errMsg);
                                    //}
                                    //return Utils.getErrorRes(pinres.GetGiftCardPINResult.ResponseCode, "Out of Stock");
                                    return GetErrorResponseWithAddBalance(pinres.GetGiftCardPINResult.ResponseCode, "Out of Stock", txnID, resdecs, agentID, agentAmount, isAgreement);
                                }

                                #endregion
                            }
                            else
                            {
                                writeLog("$$$$$$$$$$$$$$$$ This Is Myan Pay Request $$$$$$$$$$$$$$$");
                                #region <-- When Error Occur in retrieving from DB do this job -->

                                #region <-- Variable Declaraction and assigning for myanpay request -->
                                TopupService.ResellerServiceClient topupwcf = new TopupService.ResellerServiceClient();
                                TopupService.PrepaidCardResellerRequest topuprequest = new TopupService.PrepaidCardResellerRequest();
                                TopupService.PrepaidCardResellerResponse topupresponse = new TopupService.PrepaidCardResellerResponse();
                                TopupService.AuthenticationRequest authrequest = new TopupService.AuthenticationRequest();
                                TopupService.AuthenticationResponse authresponse = new TopupService.AuthenticationResponse();
                                string reqresellerID, reqresellerName, reqstrPassword, IV, KEY, reqCardType, reqCardPrice;
                                IV = ConfigurationManager.AppSettings["TopupIV"].ToString();
                                KEY = ConfigurationManager.AppSettings["TopupKEY"].ToString();
                                reqresellerID = ConfigurationManager.AppSettings["TopupResellerID"].ToString();
                                reqresellerName = ConfigurationManager.AppSettings["TopupResellerName"].ToString();
                                reqstrPassword = ConfigurationManager.AppSettings["TopupResellerPassword"].ToString();
                                reqCardType = ref1;
                                reqCardPrice = ref2;
                                string tokenkey = "";
                                StringBuilder sberror = new StringBuilder();
                                bool authResult = false;
                                // string mobileNo="";
                                // mobileNo = ref3;
                                string resResponseMessage, resErrorMessage, resResellerID, resExpiryDate = "", resSerialNumber = "", resPinNumber = "", resInvoiceID = "";
                                ///AuthRequest & Response
                                #endregion
                                try
                                {
                                    #region <-- Authenticate to myanpay -->
                                    authrequest.CredentialPassword = TopupEncrypt(reqstrPassword, KEY, IV);
                                    authrequest.CredentialUserName = TopupEncrypt(reqresellerName, KEY, IV);
                                    writeLog("Topup Auth Request : CredentialUserName = " + reqresellerName + ",CredentialPassword = " + reqstrPassword);
                                    authresponse = topupwcf.AuthenticationAPI(authrequest);

                                    if (authresponse.ResponseMessage != null)
                                    {
                                        if (authresponse.ResponseMessage == "Success")
                                        {
                                            authResult = true;
                                        }
                                        else
                                        {
                                            writeLog("Fail Auth Request");
                                        }
                                    }

                                    if (authresponse.ResellerAPIToken != null)
                                    {
                                        tokenkey = authresponse.ResellerAPIToken;

                                        authResult = true;
                                    }

                                    if (!String.IsNullOrEmpty(authresponse.ErrorMessage))
                                    {
                                        resdecs = authresponse.ErrorMessage;
                                        writeLog("Auth Error Message : " + authresponse.ErrorMessage);
                                    }

                                    if (!authResult)
                                    {

                                        //return GeterrorResponse("06", resdecs, txnID, resdecs);
                                        return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                    }
                                    #endregion
                                }
                                catch (Exception ex)
                                {
                                    #region <-- Exception hendler for myanpay authentication -->
                                    writeLog("Error in Topup Auth Request :" + ex.ToString());


                                    rescode = "05";
                                    resdecs = "Authentication Failed";
                                    //return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                                    return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                    #endregion
                                }

                                if (authResult && !String.IsNullOrEmpty(authresponse.ResellerAPIToken))
                                {
                                    writeLog("Success Auth Request");
                                    writeLog("Topup Auth Response : ResponseMessage = " + authresponse.ResponseMessage + ",ResellerAPIToken = " + authresponse.ResellerAPIToken);
                                    bool topupresult = false;
                                    try
                                    {
                                        //Request

                                        #region <-- Requesting for topup -->
                                        topuprequest.ResellerID = TopupEncrypt(reqresellerID, KEY, IV);
                                        topuprequest.ResellerAPIToken = authresponse.ResellerAPIToken;
                                        topuprequest.CardType = TopupEncrypt(reqCardType, KEY, IV);
                                        topuprequest.CardPrice = TopupEncrypt(reqCardPrice, KEY, IV);

                                        if (!_agentWCF.InsertTransactionLog(txnID, "TopupReq", "ResellerID=" + topuprequest.ResellerID + ",ResellerAPIToken=" + topuprequest.ResellerAPIToken +
                                            ",CardType=" + topuprequest.CardType + ",CardPrice=" + topuprequest.CardPrice, out errMsg))
                                        {
                                            writeLog("Error in InsertTransactionLog Req : " + errMsg);
                                        }

                                        topupresponse = topupwcf.SoldOutPrepaidCard(topuprequest);

                                        writeLog("Topup Paid Request : ResellerID = " + reqresellerID + ",ResellerAPIToken = " + authresponse.ResellerAPIToken + ",CardType = " + reqCardType + ",CardPrice = " + reqCardPrice);

                                        #endregion

                                        ///Response

                                        #region <-- Topup response -->
                                        if (!String.IsNullOrEmpty(topupresponse.ResponseMessage))
                                        {
                                            if (topupresponse.ResponseMessage == "Success")
                                            {
                                                topupresult = true;
                                                resResponseMessage = topupresponse.ResponseMessage;
                                            }

                                        }
                                        if (!String.IsNullOrEmpty(topupresponse.ErrorMessage))
                                        {
                                            resErrorMessage = topupresponse.ErrorMessage;
                                            writeLog("Topup Response Error : " + topupresponse.ErrorMessage);
                                        }
                                        if (!String.IsNullOrEmpty(topupresponse.ResellerID))
                                        {
                                            resResellerID = TopupDecrypt(topupresponse.ResellerID, KEY, IV);
                                            topupresult = true;
                                        }
                                        if (!String.IsNullOrEmpty(topupresponse.SerialNumber))
                                        {
                                            ref3 = TopupDecrypt(topupresponse.SerialNumber, KEY, IV);
                                            topupresult = true;
                                        }
                                        if (!String.IsNullOrEmpty(topupresponse.PinNumber))
                                        {
                                            ref4 = TopupDecrypt(topupresponse.PinNumber, KEY, IV);
                                            topupresult = true;
                                        }
                                        if (!String.IsNullOrEmpty(topupresponse.InvoiceID))
                                        {
                                            ref5 = TopupDecrypt(topupresponse.InvoiceID, KEY, IV);
                                            topupresult = true;
                                        }
                                        if (!String.IsNullOrEmpty(topupresponse.ExpiredDate))
                                        {
                                            resExpiryDate = TopupDecrypt(topupresponse.ExpiredDate, KEY, IV);
                                            ref4 = ref4 + " " + resExpiryDate;
                                            topupresult = true;
                                        }

                                        if (!_agentWCF.InsertTransactionLog(txnID, "TopupRes", "ResellerID=" + topupresponse + ",SerialNo=" + resSerialNumber +
                                            ",PinNumber=" + resPinNumber + ",InvoiceID=" + resInvoiceID + ",Expiry=" + resExpiryDate, out errMsg))
                                        {
                                            writeLog("Error in InsertTransactionLog Res : " + errMsg);
                                        }
                                        #endregion

                                        if (topupresult)
                                        {
                                            #region <-- If topupresult is true -->
                                            writeLog("Topup Paid Response : ResponseMessage = " + topupresponse.ResponseMessage + ",resResellerID = " + topupresponse + ",resSerialNumber = " + resSerialNumber +
                                                ",resPinNumber = " + resPinNumber + ",resInvoiceID = " + resInvoiceID + ",resExpiryDate = " + resExpiryDate);
                                            int batchid = 0;
                                            //double availablebalance = 0;
                                            //double ledgerbalance = 0;
                                            //string errMsg = null;
                                            amt = double.Parse((double.Parse(reqCardPrice)).ToString("#,##0.00"));

                                            if (!_agentWCF.ConfirmUpdate(txnID,
                                                    ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                                    agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                                            {
                                                writeLog("Error in ConfirmUpdate : " + errMsg);
                                                resdecs = "Error in update database";
                                                rescode = "06";
                                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                                {
                                                    writeLog("Error in updateError : " + errMsg);
                                                }
                                                return Utils.getErrorRes(rescode, "Transaction fail");

                                            }
                                            else
                                            {
                                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                                            }

                                            if (appType == "CS" || appType == "MS")
                                            {
                                                if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                                {
                                                    SMSHelper smsH = new SMSHelper();
                                                    smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                                    string[] words = ref4.Split(' ');
                                                    string PIN = words[0].ToString();
                                                    string Expiry = words[1].ToString();
                                                    //taxID == "0000000000001" ||
                                                    if (MapTaxID == "0000000000002" || MapTaxID == "0000000000003" || MapTaxID == "0000000000004" || MapTaxID == "0000000000015" || MapTaxID == "0000000000016")
                                                    {
                                                        smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Expiry", "", "Ref", PIN, Expiry, "", txnID.ToString(),
                                                        double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);
                                                    }
                                                    else
                                                    {
                                                        smsMsg = smsH.getMessageTopup(agentName, MapTaxID, billerName, PIN, ref3, Expiry, double.Parse(amount).ToString("#,###.00"), branchCode);
                                                    }


                                                    try
                                                    {
                                                        writeLog("sendSMSWithTxnID starts.");
                                                        // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                                        writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                                        smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                                        writeLog("sendSMSWithTxnID ends.");
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                    }
                                                }
                                                else
                                                {
                                                    //To Develop Airtime
                                                }
                                            }



                                            rescode = "00";
                                            resdecs = "Success";

                                            StringBuilder sbresponse = new StringBuilder();
                                            sbresponse.Append("<ConfirmRes>");
                                            sbresponse.Append("<Version>1.0</Version>");
                                            sbresponse.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                                            sbresponse.Append("<TaxID>" + taxID + "</TaxID>");
                                            sbresponse.Append("<Email>" + email + "</Email>");
                                            sbresponse.Append("<Password>" + password + "</Password>");
                                            sbresponse.Append("<MessageID>" + messageid + "</MessageID>");
                                            sbresponse.Append("<BillerName>" + billerName + "</BillerName>");
                                            sbresponse.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                                            sbresponse.Append("<ResCode>" + rescode + "</ResCode>");
                                            sbresponse.Append("<ResDesc>" + resdecs + "</ResDesc>");
                                            sbresponse.Append("<Ref1>" + ref1 + "</Ref1>");
                                            sbresponse.Append("<Ref2>" + ref2 + "</Ref2>");
                                            sbresponse.Append("<Ref3>" + ref3 + "</Ref3>");
                                            sbresponse.Append("<Ref4>" + ref4 + "</Ref4>");
                                            sbresponse.Append("<Ref5>" + mobileNo + "</Ref5>");
                                            sbresponse.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                                            sbresponse.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                                            sbresponse.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                                            sbresponse.Append("<Ref4Name>" + ref4Name + "</Ref4Name>");
                                            sbresponse.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                                            sbresponse.Append("<BatchID>" + batchid + "</BatchID>");
                                            sbresponse.Append("<Balance>" + avalbal + "</Balance>");
                                            sbresponse.Append("<TxnID>" + txnID + "</TxnID>");
                                            sbresponse.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                                            sbresponse.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                                            sbresponse.Append("<SMS>" + smsMsg + "</SMS>");
                                            sbresponse.Append("</ConfirmRes>");
                                            writeLog("RES XML : " + sbresponse.ToString());
                                            return sbresponse.ToString();
                                            #endregion
                                        }
                                        else
                                        {
                                            #region <-- If topupresult is false -->
                                            writeLog("Error in Paid Response.");
                                            if (!String.IsNullOrEmpty(errmsg))
                                            {
                                                string customMessage = errmsg.ToString();
                                            }
                                            rescode = "06";
                                            resdecs = topupresponse.ErrorMessage;

                                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                            //return GeterrorResponse("06", topupresponse.ErrorMessage, txnID, topupresponse.ErrorMessage);
                                            #endregion
                                        }




                                    }
                                    catch (Exception Ex)
                                    {
                                        writeLog("Error in Topup Paid Request :" + Ex.ToString());
                                        rescode = "99";
                                        resdecs = "System Error";
                                        //return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                                        return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                    }
                                }
                                #endregion
                            }


                            //   #endregion

                        }
                    }
                    #endregion

                    #region <-- //Itune Tz 31/jun/2016 -->

                    else if (MapTaxID == "0000000000001")
                    {
                        // string cardtype = taxID == "2222222222222" ? "C8" : taxID == "3333333333333" ? "GS" : "C4";
                        //string cardtypemyanpay = taxID == "2222222222222" ? "102" : taxID == "3333333333333" ? "101" : "000";
                        writeLog("This is iTune");
                        amt = double.Parse((double.Parse(ref2)).ToString("###0.00"));
                        mobileNo = ref3;
                        double avalbal = 0;
                        double legbal = 0;
                        writeLog("TaxID :" + taxID + "| CardTYPE :" + ref1);

                        if (topupType == "A")
                        {
                            #region <-- Airtime Topup -->
                            writeLog("This is Airtime topup.");
                            rescode = "01";
                            resdecs = "Airtime Topup is NOT Available.";
                            //return Utils.getErrorRes(rescode, resdecs);

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                            #endregion
                        }
                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            writeLog("Simulator Y");
                            #region <-- Simulator is On -->
                            int batchid = 0;
                            //double availablebalance = 0;
                            //double ledgerbalance = 0;
                            //string errMsg = null;
                            //reqCardType = ref1;
                            //reqCardPrice = ref2;
                            mobileNo = ref3;
                            ref3 = new Random().Next(00000000, 99999999).ToString() + new Random().Next(00000000, 99999999).ToString();
                            ref4 = new Random().Next(00000000, 99999999).ToString() + new Random().Next(00000000, 99999999).ToString();
                            ref4 = ref4 + " 6/12/2016";
                            //amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));
                            if (!_agentWCF.InsertTransactionLog(txnID, "TopupReq", "Test Req", out errMsg))
                            {
                                writeLog("Error in InsertTransactionLog Req : " + errMsg);
                            }
                            if (!_agentWCF.InsertTransactionLog(txnID, "TopupRes", "Test Res", out errMsg))
                            {
                                writeLog("Error in InsertTransactionLog Res : " + errMsg);
                            }

                            //if (_agentWCF.ConfirmUpdate(out  errMsg, out  batchID, out  availablebalance, out  ledgerbalance, txnID,
                            //        ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                            //        agentAmount, agentFeeDbl, isAgreement))
                            //{
                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                    string[] words = ref4.Split(' ');
                                    string PIN = words[0].ToString();
                                    string Expiry = words[1].ToString();
                                    //|| taxID == "0000000000002" || taxID == "0000000000003" || taxID == "0000000000004" || taxID == "0000000000015" || taxID == "0000000000016"
                                    if (MapTaxID == "0000000000001")
                                    {
                                        smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Expiry", "", "Ref", PIN, Expiry, "", txnID.ToString(),
                                        double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                        writeLog("---Messssage Text-----" + smsMsg);

                                    }

                                    try
                                    {
                                        writeLog("sendSMSWithTxnID starts.");
                                        //smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                        writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                        writeLog("sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                    }
                                }

                            }

                            if (!_agentWCF.ConfirmUpdate(txnID,
                                    ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                    agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);
                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                            }

                            rescode = "00";
                            resdecs = "Success";
                            StringBuilder sbresponse = new StringBuilder();
                            sbresponse.Append("<ConfirmRes>");
                            sbresponse.Append("<Version>1.0</Version>");
                            sbresponse.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            sbresponse.Append("<TaxID>" + taxID + "</TaxID>");
                            sbresponse.Append("<Email>" + email + "</Email>");
                            sbresponse.Append("<Password>" + password + "</Password>");
                            sbresponse.Append("<MessageID>" + messageid + "</MessageID>");
                            sbresponse.Append("<BillerName>" + billerName + "</BillerName>");
                            sbresponse.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                            sbresponse.Append("<ResCode>" + rescode + "</ResCode>");
                            sbresponse.Append("<ResDesc>" + resdecs + "</ResDesc>");
                            sbresponse.Append("<Ref1>" + ref1 + "</Ref1>");
                            sbresponse.Append("<Ref2>" + ref2 + "</Ref2>");
                            sbresponse.Append("<Ref3>" + ref3 + "</Ref3>");
                            sbresponse.Append("<Ref4>" + ref4 + "</Ref4>");
                            sbresponse.Append("<Ref5>" + mobileNo + "</Ref5>");
                            sbresponse.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                            sbresponse.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                            sbresponse.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                            sbresponse.Append("<Ref4Name>" + ref4Name + "</Ref4Name>");
                            sbresponse.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                            sbresponse.Append("<BatchID>" + batchid + "</BatchID>");
                            sbresponse.Append("<Balance>" + avalbal + "</Balance>");
                            sbresponse.Append("<TxnID>" + txnID + "</TxnID>");
                            sbresponse.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                            sbresponse.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                            sbresponse.Append("<SMS>" + smsMsg + "</SMS>");
                            sbresponse.Append("</ConfirmRes>");
                            writeLog("RES XML : " + sbresponse.ToString());
                            // writeLog("TxnID:*****" + txnID);
                            return sbresponse.ToString();
                            #endregion
                        }
                        else
                        {
                            #region iTunes from PayHere DB not use
                            //payhereMPTWCF.PINServiceClient payherePINWCF = new payhereMPTWCF.PINServiceClient();

                            //if (payherePINWCF.getiTunesPIN(out resdecs, out ref4, out expiry, out ref3, amt, ref1))
                            //{
                            //    #region <-- Get Pin From TELCOPIN  DB of payhere -->
                            //    ref4 = ref4 + " " + expiry;
                            //    int batchid = 0;
                            //    //double availablebalance = 0;
                            //    //double ledgerbalance = 0;



                            //    //if (resdecs != "Out of Stock" && resdecs !="Internal Telco Error")
                            //    //{
                            //    writeLog("$$$$$$$$$$$$$$This Is iTune Pin From TELCOPON DB of payhere OK $$$$$$$$$$$$$$$");
                            //    writeLog("Pin :" + ref4 + "| Expiry :" + expiry + "| SerialNo :" + ref3);

                            //    if (!_agentWCF.ConfirmUpdate(out  errMsg, out  batchID, out  avalbal, out  legbal, txnID, ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus))
                            //    {
                            //        writeLog("Error in ConfirmUpdate : " + errMsg);

                            //    }
                            //    else
                            //    {
                            //        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            //    }

                            //    //    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                            //    if (appType == "CS" || appType == "MS")
                            //    {
                            //        if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                            //        {
                            //            SMSHelper smsH = new SMSHelper();
                            //            smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                            //            //string PIN = ref4;
                            //            //string Expiry = expiry;
                            //            string[] words = ref4.Split(' ');
                            //            string PIN = words[0].ToString();
                            //            string Expiry = words[1].ToString();

                            //            if (MapTaxID == "0000000000001")
                            //            {
                            //                smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Expiry", "", "Ref", PIN, Expiry, "", txnID.ToString(),
                            //                double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);
                            //            }

                            //            try
                            //            {
                            //                writeLog("sendSMSWithTxnIDLB starts.");
                            //                //  smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                            //                writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                            //                smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                            //                writeLog("sendSMSWithTxnIDLB ends.");
                            //            }
                            //            catch (Exception ex)
                            //            {
                            //                writeLog("Error Occur when Sending SMS:" + ex.Message.ToString());
                            //            }
                            //        }
                            //        else
                            //        {
                            //            //To Develop Airtime
                            //        }
                            //    }


                            //    rescode = "00";
                            //    resdecs = "Success";

                            //    StringBuilder sbresponse = new StringBuilder();
                            //    sbresponse.Append("<ConfirmRes>");
                            //    sbresponse.Append("<Version>1.0</Version>");
                            //    sbresponse.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            //    sbresponse.Append("<TaxID>" + taxID + "</TaxID>");
                            //    sbresponse.Append("<Email>" + email + "</Email>");
                            //    sbresponse.Append("<Password>" + password + "</Password>");
                            //    sbresponse.Append("<MessageID>" + messageid + "</MessageID>");
                            //    sbresponse.Append("<BillerName>" + billerName + "</BillerName>");
                            //    sbresponse.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                            //    sbresponse.Append("<ResCode>" + rescode + "</ResCode>");
                            //    sbresponse.Append("<ResDesc>" + resdecs + "</ResDesc>");
                            //    sbresponse.Append("<Ref1>" + ref1 + "</Ref1>");
                            //    sbresponse.Append("<Ref2>" + ref2 + "</Ref2>");
                            //    sbresponse.Append("<Ref3>" + ref3 + "</Ref3>");
                            //    sbresponse.Append("<Ref4>" + ref4 + "</Ref4>");
                            //    sbresponse.Append("<Ref5>" + mobileNo + "</Ref5>");
                            //    sbresponse.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                            //    sbresponse.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                            //    sbresponse.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                            //    sbresponse.Append("<Ref4Name>" + ref4Name + "</Ref4Name>");
                            //    sbresponse.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                            //    sbresponse.Append("<BatchID>" + batchid + "</BatchID>");
                            //    sbresponse.Append("<Balance>" + avalbal + "</Balance>");
                            //    sbresponse.Append("<TxnID>" + txnID + "</TxnID>");
                            //    sbresponse.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                            //    sbresponse.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                            //    sbresponse.Append("<SMS>" + smsMsg + "</SMS>");
                            //    sbresponse.Append("</ConfirmRes>");
                            //    writeLog("RES XML : " + sbresponse.ToString());
                            //    return sbresponse.ToString();


                            //    #endregion
                            //}
                            //else
                            #endregion
                            //if (CheckIsESBAGiftCard(MapTaxID))
                            //{
                            #region <-- This is Easy Bill -->
                            #region <-- Initialize Variable -->
                            writeLog("$$$$$$$$$ This Is ESBA $$$$$$$$$$$$$");
                            string billercode = string.Empty;
                            billercode = getBillerCode(MapTaxID);
                            giftcardConfirmReq pinreq = new giftcardConfirmReq();
                            GetGiftCardPINResults pinres = new GetGiftCardPINResults();
                            string aesKey = string.Empty;
                            aesKey = ConfigurationManager.AppSettings["EsbaAesKey"].ToString();
                            if (IsTokenNullOrExpire(Token))
                            {
                                Token = GetOAuthToken();
                            }

                            //  string cardtype =
                            pinreq.Token = Token.Token;
                            pinreq.BillerCode = billercode;
                            pinreq.PriceType = ref2;
                            pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                            pinreq.ChannelRefID = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                            amt = double.Parse((double.Parse(ref2)).ToString("###0.00"));
                            //  mobileNo = ref3;

                            var json_serializer1 = new JavaScriptSerializer();

                            string jsonReq = json_serializer1.Serialize(pinreq);
                            writeLog("ESBA JasonReq:" + jsonReq);
                            #endregion
                            //Request PIN To ESBA
                            string jsonres = Utils.pinRequest(jsonReq, esbGetGiftCardMethod);
                            writeLog("ESBA JasonRes:" + jsonres);
                            if (string.IsNullOrEmpty(jsonres))
                            {
                                resdecs = "No Response From ESBA";
                                rescode = "06";
                                //if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                                //{
                                //    writeLog("Error in updateError : " + errMsg);
                                //}
                                //return Utils.getErrorRes(rescode, resdecs);
                                return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                            }
                            var json_serializerpinres = new JavaScriptSerializer();
                            pinres = json_serializerpinres.Deserialize<GetGiftCardPINResults>(jsonres);


                            if (pinres.GetGiftCardPINResult.TransactionStatus == "0" && !string.IsNullOrEmpty(pinres.GetGiftCardPINResult.PIN))
                            {

                                pinres.GetGiftCardPINResult.PIN = Utils.AESDecryptText(pinres.GetGiftCardPINResult.PIN, aesKey);
                                ref4 = pinres.GetGiftCardPINResult.PIN + " " + pinres.GetGiftCardPINResult.ExpiryDate;
                                ref3 = pinres.GetGiftCardPINResult.SerialNumber;

                                //double availablebalance = 0;
                                //double ledgerbalance = 0;
                                //string errMsg = null;
                                amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                #region <-- Update Transaction -->
                                if (!_agentWCF.ConfirmUpdate(txnID,
                                    ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                    agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                                {
                                    writeLog("Error in ConfirmUpdate : " + errMsg);
                                    resdecs = "Error in update database";
                                    rescode = "06";
                                    if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                    {
                                        writeLog("Error in updateError : " + errMsg);
                                    }
                                    return Utils.getErrorRes(rescode, "Transaction fail");
                                }
                                else
                                {
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                }
                                #endregion
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                #region <-- Send SMS -->
                                if (appType == "CS" || appType == "MS")
                                {
                                    if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                    {
                                        SMSHelper smsH = new SMSHelper();
                                        smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                        string[] words = ref4.Split(' ');
                                        string PIN = words[0].ToString();
                                        string Expiry = words[1].ToString();

                                        if (MapTaxID == "0000000000001")
                                        {
                                            smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Expiry", "", "Ref", PIN, Expiry, "", txnID.ToString(),
                                            double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);
                                        }

                                        try
                                        {
                                            writeLog("sendSMSWithTxnID starts.");
                                            //  smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                            writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                            smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                            writeLog("sendSMSWithTxnID ends.");
                                        }
                                        catch (Exception ex)
                                        {
                                        }
                                    }
                                    else
                                    {
                                        //To Develop Airtime
                                    }
                                }
                                #endregion
                                #region <-- Response Back To Client -->
                                rescode = "00";
                                resdecs = "Success";
                                ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                confirmres.taxID = taxID;
                                confirmres.email = email;
                                confirmres.password = password;
                                confirmres.messageid = messageid;
                                confirmres.billername = billerName;
                                confirmres.billerlogo = billerLogo;
                                confirmres.rescode = rescode;
                                confirmres.resdesc = resdecs;
                                confirmres.ref1 = ref1;
                                confirmres.ref2 = ref2;
                                confirmres.ref3 = ref3;
                                confirmres.ref4 = ref4;
                                confirmres.ref5 = mobileNo;
                                confirmres.ref1Name = ref1Name;
                                confirmres.ref2Name = ref2Name;
                                confirmres.ref3Name = ref3Name;
                                confirmres.ref4Name = ref4Name;
                                confirmres.ref5Name = ref5Name;
                                confirmres.availablebalance = availablebalance.ToString();
                                confirmres.txnID = txnID.ToString();
                                confirmres.TodayTxnAmount = TodayTxnAmount;
                                confirmres.TodayTxnCount = TodayTxnCount;
                                confirmres.smsMsg = smsMsg;

                                return Utils.getConfirmRes(confirmres);
                                #endregion



                            }
                            else
                            {
                                resdecs = Utils.EsbResponseDescription(pinres.GetGiftCardPINResult.ResponseCode);
                                //if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                                //{
                                //    writeLog("Error in updateError : " + errMsg);
                                //}
                                //return Utils.getErrorRes(pinres.GetGiftCardPINResult.ResponseCode, "Out of Stock");
                                return GetErrorResponseWithAddBalance(pinres.GetGiftCardPINResult.ResponseCode, "Out of Stock", txnID, resdecs, agentID, agentAmount, isAgreement);
                            }

                            #endregion
                            //}
                            //else
                            //{
                            //    return GetErrorResponseWithAddBalance("06", resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                            //    //return GeterrorResponse("06", resdecs, txnID, resdecs);
                            //}
                        }

                    }

                    #endregion

                    #region <-- //Grand Guardian Insurance -->


                    else if (MapTaxID == "0000000000019")
                    {
                        writeLog("This is GRAND GUARDIAN INSURENCE.");
                        string imgpath = ConfigurationManager.AppSettings["GngImgPath"].ToString();
                        string imgpathweb = ConfigurationManager.AppSettings["GngImgPathweb"].ToString();

                        string cerpath = string.Empty;
                        string nrcpath = string.Empty;
                        string cerpathweb = string.Empty;
                        string nrcpathweb = string.Empty;
                        string shotcerpath = string.Empty;
                        string shortnrcpath = string.Empty;

                        string imgcertname = string.Empty;
                        string imgnrcname = string.Empty;

                        string nrcexpiry = string.Empty;

                        double avalbal = 0;
                        double legbal = 0;

                        // DateTime expirydt;
                        try
                        {
                            #region <-- When simulator is turn off do this job -->
                            //byte[] test;
                            int batchid = 0;
                            //double availablebalance = 0;
                            //double ledgerbalance = 0;
                            mobileNo = ref3;
                            imgcertname = ref1 + "cer.jpg";
                            imgnrcname = ref1 + "nrc.jpg";

                            cerpath = imgpath + imgcertname;
                            nrcpath = imgpath + imgnrcname;
                            cerpathweb = imgpathweb + imgcertname;
                            nrcpathweb = imgpathweb + imgnrcname;
                            DateTime expirya = DateTime.Now.AddDays(365);

                            if (Utils.Base64Decode(imgcert, cerpath))
                            {
                                writeLog("Saving Cretificate Image OK");
                                writeLog("certificate path:" + cerpathweb);
                                shotcerpath = Utils.getQUrl(cerpathweb);
                                writeLog("Short Certificate Path:" + shotcerpath);
                                ref3 = shotcerpath + " ";

                            }
                            else
                            {

                                writeLog("Saving Cretificate Image Not OK");
                                //return Utils.getErrorRes("99", "Duplicated Policy No");
                                rescode = "99";
                                resdecs = "Duplicated Policy No";
                                return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                            }

                            if (Utils.Base64Decode(imgnrc, nrcpath))
                            {
                                writeLog("NRC Path:" + nrcpathweb);
                                shortnrcpath = Utils.getQUrl(nrcpathweb);
                                writeLog("Short NRC path:" + shortnrcpath);
                                ref3 += shortnrcpath;
                                writeLog("Saving NRC Image OK");
                            }
                            else
                            {
                                writeLog("Saving NRC Image Not OK");
                                //return Utils.getErrorRes("99", "Duplicated Policy No");
                                rescode = "99";
                                resdecs = "Duplicated Policy No";
                                return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                            }

                            writeLog("***************Enter Confirm Update *******************");

                            nrcexpiry = ref4 + " " + expirya.ToShortDateString();
                            if (!_agentWCF.ConfirmUpdate(txnID,
                                     ref1, ref2, ref3, nrcexpiry, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                     agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog("Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }
                            if (appType == "CS" || appType == "MS")
                            {
                                SMSHelper smsH = new SMSHelper();
                                smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                smsMsg = smsH.getMessageBillerGGI(agentName, MapTaxID, billerName, "Policy No", "", "", "", ref1, txnID.ToString(), expirya.ToString(), "",
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);
                                try
                                {
                                    writeLog("sendSMSWithTxnID starts.");
                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                    writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    //  smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                    writeLog("sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {
                                }
                            }


                            StringBuilder sb = new StringBuilder();
                            sb.Append("<ConfirmRes>");
                            sb.Append("<Version>1.0</Version>");
                            sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            sb.Append("<MessageID>" + messageid + "</MessageID>");
                            sb.Append("<ResCode>" + rescode + "</ResCode>");
                            sb.Append("<ResDesc>" + resdecs + "</ResDesc>");
                            sb.Append("<Ref1>" + ref1 + "</Ref1>");
                            sb.Append("<Ref2>" + ref2 + "</Ref2>");
                            sb.Append("<Ref3>" + ref4 + "</Ref3>");
                            sb.Append("<Ref4>" + ref4 + " " + expirya.ToShortDateString() + "</Ref4>");
                            sb.Append("<Ref5>" + mobileNo + "</Ref5>");
                            sb.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                            sb.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                            sb.Append("<Ref3Name>" + "NRC" + "</Ref3Name>");
                            sb.Append("<Ref4Name>" + "NRC/Expiry" + "</Ref4Name>");
                            sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                            sb.Append("<BatchID>" + batchid + "</BatchID>");
                            sb.Append("<Balance>" + avalbal + "</Balance>");
                            sb.Append("<TxnID>" + txnID + "</TxnID>");
                            sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                            sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");

                            sb.Append("<SMS>" + smsMsg + "</SMS>");
                            sb.Append("</ConfirmRes>");
                            writeLog("RES XML : " + sb.ToString());
                            return sb.ToString();


                            #endregion
                        }
                        catch (Exception ex)
                        {
                            writeLog("Error in GGI Response Request :" + ex.ToString());
                            rescode = "99";
                            resdecs = "BIS API Error";
                            //return Utils.getErrorRes(rescode, resdecs);
                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }


                    }


                    #endregion

                    #region <-- YCDC/MPTLANDLINE/YES 0000000000020,0000000000021,0000000000022 || taxID == "0000000000022" 4-Jan-2016 tz -->
                    if (MapTaxID == "0000000000020")
                    {
                        #region <-- Initialize stage to request to payyee -->
                        ReqPaymentByCash reqPayCash = new ReqPaymentByCash();
                        ResPaymentByCash resPayCash = new ResPaymentByCash();
                        //ReqBillAmount reqBillAmt = new ReqBillAmount();
                        //ResBillAmount resBilAmt = new ResBillAmount();
                        ResError err = new ResError();
                        string success = ConfigurationManager.AppSettings["payeesuccess"].ToString().Trim();
                        string fail = ConfigurationManager.AppSettings["payeefailed"].ToString().Trim();
                        string merchantcode = MapTaxID == "0000000000020" ? ConfigurationManager.AppSettings["YCDCMerchantCode"].ToString().Trim() : MapTaxID == "0000000000021" ? ConfigurationManager.AppSettings["MPTLandLineMearchantCode"].ToString().Trim() : ConfigurationManager.AppSettings["YESCMerchantCode"].ToString().Trim();
                        reqPayCash.apiKey = ConfigurationManager.AppSettings["payeeApiKey"].ToString().Trim();
                        //reqPayCash.billRefNo = taxID == "0000000000020" ? ref1 : "";
                        reqPayCash.billRefNo = ref1;
                        reqPayCash.custRefNo = (MapTaxID == "0000000000021" || MapTaxID == "0000000000022") ? ref1 : "";
                        reqPayCash.billingMerchantCode = merchantcode.Trim();
                        reqPayCash.currencyCode = ConfigurationManager.AppSettings["payeeCurrencyCode"].ToString().Trim();
                        reqPayCash.billAmount = amount;
                        reqPayCash.chargesAmount = totalpayeecharge;

                        reqPayCash.transferRefNo1 = string.Empty;
                        reqPayCash.transferRefNo2 = string.Empty;
                        reqPayCash.extRefNo1 = string.Empty;

                        double avalbal = 0;
                        double legbal = 0;

                        mobileNo = ref3;
                        ref3 = ref2;
                        #endregion
                        #region <-- Request To Payee -->
                        BillPayment payment = new BillPayment();
                        payment.PaymentByCash(reqPayCash, out resPayCash, out err, out errMsg);//Payment Request To Payee
                        try
                        {
                            int batchid = 0;
                            //double availablebalance = 0;
                            //double ledgerbalance = 0;

                            if (!string.IsNullOrEmpty(resPayCash.status))
                            {
                                #region <-- If Response Status is not Empty Do This Job -->
                                if (resPayCash.status == success)
                                {
                                    rescode = "00";
                                    resdecs = "Success";
                                    ref2 = resPayCash.txnId;

                                    #region <-- If response status is Success Do this Job -->
                                    if (!_agentWCF.ConfirmUpdate(txnID,
                                         ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                         agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                    {
                                        writeLog("Error in ConfirmUpdate : " + errMsg);
                                    }
                                    else
                                    {
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                                    }
                                    if (appType == "CS" || appType == "MS")
                                    {
                                        SMSHelper smsH = new SMSHelper();
                                        smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                        smsMsg = smsH.getMessageBillerGGI(agentName, MapTaxID, billerName, ref1Name, ref3Name, "Receipt No", "Ref", ref1, ref3, ref2, txnID.ToString(),
                                            double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);



                                        try
                                        {
                                            writeLog("sendSMSWithTxnID starts.");
                                            // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                            writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                            smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                            writeLog("sendSMSWithTxnID ends.");
                                        }
                                        catch (Exception ex)
                                        {
                                        }
                                    }


                                    StringBuilder sb = new StringBuilder();
                                    sb.Append("<ConfirmRes>");
                                    sb.Append("<Version>1.0</Version>");
                                    sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                                    sb.Append("<MessageID>" + messageid + "</MessageID>");
                                    sb.Append("<ResCode>" + rescode + "</ResCode>");
                                    sb.Append("<ResDesc>" + resdecs + "</ResDesc>");
                                    sb.Append("<Ref1>" + ref1 + "</Ref1>");
                                    sb.Append("<Ref2>" + ref2 + "</Ref2>");
                                    sb.Append("<Ref3>" + ref3 + "</Ref3>");
                                    sb.Append("<Ref4></Ref4>");
                                    sb.Append("<Ref5>" + mobileNo + "</Ref5>");
                                    sb.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                                    sb.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                                    sb.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                                    sb.Append("<Ref4Name> </Ref4Name>");
                                    sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                                    sb.Append("<BatchID>" + batchid + "</BatchID>");
                                    sb.Append("<Balance>" + avalbal + "</Balance>");
                                    sb.Append("<TxnID>" + txnID + "</TxnID>");
                                    sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                                    sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");

                                    sb.Append("<SMS>" + smsMsg + "</SMS>");
                                    sb.Append("</ConfirmRes>");
                                    writeLog("RES XML : " + sb.ToString());
                                    return sb.ToString();
                                    #endregion
                                }
                                else if (resPayCash.status == fail)
                                {
                                    writeLog("CNP Fail Response:" + resPayCash.status);
                                    writeLog("Error Code:" + err.errorCode);
                                    writeLog("Error Message:" + err.errorMessage);
                                    //return Utils.getErrorRes("97", getCNPErrMsg(err.errorCode));
                                    return GetErrorResponseWithAddBalance("97", getCNPErrMsg(err.errorCode), txnID, getCNPErrMsg(err.errorCode), agentID, agentAmount, isAgreement);
                                }
                                #endregion
                            }
                            else
                            {
                                writeLog("CNP Response with empty status:");
                                writeLog("Error Code:" + err.errorCode);
                                writeLog("Error Message:" + err.errorMessage);
                                //return Utils.getErrorRes("97", getCNPErrMsg(err.errorCode));
                                return GetErrorResponseWithAddBalance("97", getCNPErrMsg(err.errorCode), txnID, getCNPErrMsg(err.errorCode), agentID, agentAmount, isAgreement);
                            }
                        }
                        catch (Exception ex)
                        {
                            writeLog("Exception Error In Confirm Insert" + ex.Message);
                            return GetErrorResponseWithAddBalance("97", "System Error", txnID, "System Error", agentID, agentAmount, isAgreement);
                        }
                        #endregion
                    }
                    #endregion

                    #region <-- OfflinePayment MPT landLine -->
                    if (MapTaxID == "0000000000021")
                    {
                        double avalbal = 0;
                        double legbal = 0;

                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            int batchid = 0;
                            //double availablebalance = 0;
                            //double ledgerbalance = 0;
                            writeLog("Simulator Y");

                            writeLog("***************Enter Confirm Update *******************");

                            ref4 = DateTime.Now.ToShortDateString() + " " + DateTime.Now.AddDays(30).ToShortDateString();
                            if (!_agentWCF.ConfirmUpdate(txnID,
                                     ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                     agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);
                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }
                            if (appType == "CS" || appType == "MS")
                            {
                                SMSHelper smsH = new SMSHelper();
                                smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                // ref2 = (ref2 == "3M" ? "3-Month" : ref2 == "6M" ? "6-Month" : "12-Month");

                                smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "BillRefNo", "ContactName", "ContactPhone", "Ref", ref1, ref2, ref3, txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), ref4);



                                try
                                {
                                    writeLog("sendSMSWithTxnID starts.");
                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);

                                    writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                    writeLog("sendSMSWithTxnID ends.");

                                }
                                catch (Exception ex)
                                {
                                }
                            }
                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                            #region <-- Response Back To Client -->
                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = mobileNo;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = string.Empty;
                            confirmres.availablebalance = availablebalance.ToString();

                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);
                            #endregion

                        }
                        else
                        {

                            int batchid = 0;
                            //double availablebalance = 0;
                            //double ledgerbalance = 0;
                            string method = "OfflinePaymentInquiry";
                            string fromdate = string.Empty;
                            string todate = string.Empty;
                            OfflinePaymentInquiryRequest inqReq = new OfflinePaymentInquiryRequest();
                            OfflinePaymentInquiryResp responsedata = new OfflinePaymentInquiryResp();
                            string reqJson = "";
                            string[] fromandToDate;
                            if (!string.IsNullOrEmpty(ref4))
                            {
                                fromandToDate = ref4.Split(' ');
                                fromdate = fromandToDate[0];
                                todate = fromandToDate[1];
                            }
                            //root.offlinePaymentAPIRequest = new OfflinePaymentAPIRequest();            
                            inqReq.ChannelCode = ConfigurationManager.AppSettings["offlineChannelCode"].ToString();
                            inqReq.BillerCode = ConfigurationManager.AppSettings["offlineBillerCode"].ToString();
                            inqReq.BillRefNo = ref1;
                            inqReq.Amount = Convert.ToDecimal(amount);


                            if (!string.IsNullOrEmpty(fromdate))
                            {
                                inqReq.BillFromDate = DateTime.ParseExact(fromdate, "dd/MM/yyyy", null); //Convert.ToDateTime(txtBillFromDate.Text);
                            }
                            else
                            {
                                inqReq.BillFromDate = null;
                            }

                            if (!string.IsNullOrEmpty(todate))
                            {
                                inqReq.BillEndDate = DateTime.ParseExact(todate, "dd/MM/yyyy", null);  //Convert.ToDateTime(txtBillEndDate.Text);
                            }
                            else
                            {
                                inqReq.BillEndDate = null;
                            }

                            inqReq.ChannelRefNo = txnID.ToString();
                            inqReq.ContactName = ref2;
                            inqReq.ContactPhone = ref3;
                            mobileNo = ref3;
                            reqJson = JsonConvert.SerializeObject(inqReq);
                            string jasonresponse = string.Empty;
                            writeLog("OfflinePayment Request:" + reqJson);
                            jasonresponse = Utils.offlinePayRequest(reqJson, method);
                            writeLog("OfflinePayment Response:" + jasonresponse);



                            if (String.IsNullOrEmpty(jasonresponse))
                            {
                                //return GeterrorResponse("06", "Payment Unsuccessful", txnID, "JasonResponseisEmpty");
                                return GetErrorResponseWithAddBalance("06", "Payment Unsuccessful", txnID, "JasonResponseisEmpty", agentID, agentAmount, isAgreement);
                            }
                            try
                            {
                                RootObject rootobj = new RootObject();
                                //Main note of jason response
                                rootobj = JsonConvert.DeserializeObject<RootObject>(jasonresponse);
                                //Get OfflinePaymentInquiryResult Jason Note
                                var pasreRoot = rootobj.OfflinePaymentInquiryResult.ToString();
                                //parse OfflinePaymentInquiryResult Jason note to ObjectClass
                                responsedata = JsonConvert.DeserializeObject<OfflinePaymentInquiryResp>(pasreRoot);
                            }
                            catch (Exception ex)
                            {
                                writeLog("exception Error wher converting Jasonresult:" + ex.Message);
                            }

                            if (responsedata.IsEncrypt.ToUpper() == "TRUE")
                            {
                                writeLog("Is encrypt is true before encrypted:" + responsedata.resCode + ":" + responsedata.resDesc);
                                responsedata = Utils.DecryptOfflinePaymentResponse(responsedata);
                                writeLog("Is encrypt is true After encrypted:" + responsedata.resCode + ":" + responsedata.resDesc);

                            }
                            if (responsedata.resCode == "0")
                            {
                                #region <-- Update Transaction -->
                                if (!_agentWCF.ConfirmUpdate(txnID,
                                    ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                    agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                {
                                    writeLog("Error in ConfirmUpdate : " + errMsg);
                                }
                                else
                                {
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                }
                                #endregion
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                #region <-- Send SMS -->
                                if (appType == "CS" || appType == "MS")
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                    // ref2 = (ref2 == "3M" ? "3-Month" : ref2 == "6M" ? "6-Month" : "12-Month");

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "BillRefNo", "ContactName", "ContactPhone", "Ref", ref1, ref2, ref3, txnID.ToString(),
                                        double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), ref4);



                                    try
                                    {
                                        writeLog("sendSMSWithTxnID starts.");
                                        // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);

                                        writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);

                                        writeLog("sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                    }
                                }
                                #endregion
                                Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                                #region <-- Response Back To Client -->
                                rescode = "00";
                                resdecs = "Success";
                                ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                confirmres.taxID = taxID;
                                confirmres.email = email;
                                confirmres.password = password;
                                confirmres.messageid = messageid;
                                confirmres.billername = billerName;
                                confirmres.billerlogo = billerLogo;
                                confirmres.rescode = rescode;
                                confirmres.resdesc = resdecs;
                                confirmres.ref1 = ref1;
                                confirmres.ref2 = ref2;
                                confirmres.ref3 = ref3;
                                confirmres.ref4 = ref4;
                                confirmres.ref5 = mobileNo;
                                confirmres.ref1Name = ref1Name;
                                confirmres.ref2Name = ref2Name;
                                confirmres.ref3Name = ref3Name;
                                confirmres.ref5Name = string.Empty;
                                confirmres.availablebalance = availablebalance.ToString();
                                confirmres.txnID = txnID.ToString();
                                confirmres.TodayTxnAmount = TodayTxnAmount;
                                confirmres.TodayTxnCount = TodayTxnCount;
                                confirmres.smsMsg = smsMsg;

                                return Utils.getConfirmRes(confirmres);
                                #endregion
                            }
                            else
                            {
                                //return GeterrorResponse("06", "Payment Fail Please Try Again!", txnID, responsedata.resDesc);
                                return GetErrorResponseWithAddBalance("06", "Payment Fail Please Try Again!", txnID, responsedata.resDesc, agentID, agentAmount, isAgreement);
                            }
                        }

                    }

                    #endregion

                    #region <-- TITAN SOURCE -->
                    if (MapTaxID == "0000000000022")
                    {
                        double avalbal = 0;
                        double legbal = 0;

                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            #region <-- Simulator Mode -->
                            int batchid = 0;
                            //double availablebalance = 0;
                            //double ledgerbalance = 0;
                            mobileNo = ref3;

                            rescode = "00";
                            resdecs = "Success";
                            ref2 = DateTime.Now.ToString("ddMMyyyHHmmss");
                            ref1 = ref1 + "CNP";
                            ref3 = "";
                            ref4 = "TestTxn" + " " + "CNP";
                            #region <-- If response status is Success Do this Job -->
                            if (!_agentWCF.ConfirmUpdate(txnID,
                                 ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                 agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);
                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }
                            if (appType == "CS" || appType == "MS")
                            {
                                SMSHelper smsH = new SMSHelper();
                                smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                smsMsg = smsH.getMessageBillerGGI(agentName, MapTaxID, billerName, ref1Name, ref3Name, "Receipt No", "Ref", ref1, ref3, ref2, txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);



                                try
                                {
                                    writeLog("sendSMSWithTxnID starts.");
                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);

                                    writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);

                                    writeLog("sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {
                                }
                            }

                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                            StringBuilder sb = new StringBuilder();
                            sb.Append("<ConfirmRes>");
                            sb.Append("<Version>1.0</Version>");
                            sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            sb.Append("<MessageID>" + messageid + "</MessageID>");
                            sb.Append("<TaxID>" + taxID + "</TaxID>");
                            sb.Append("<ResCode>" + rescode + "</ResCode>");
                            sb.Append("<ResDesc>" + resdecs + "</ResDesc>");
                            sb.Append("<Ref1>" + ref1 + "</Ref1>");
                            sb.Append("<Ref2>" + ref2 + "</Ref2>");
                            sb.Append("<Ref3>" + ref3 + "</Ref3>");
                            sb.Append("<Ref4></Ref4>");
                            sb.Append("<Ref5>" + mobileNo + "</Ref5>");
                            sb.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                            sb.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                            sb.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                            sb.Append("<Ref4Name> </Ref4Name>");
                            sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                            sb.Append("<BatchID>" + batchid + "</BatchID>");
                            sb.Append("<Balance>" + avalbal + "</Balance>");
                            sb.Append("<TxnID>" + txnID + "</TxnID>");
                            sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                            sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");

                            sb.Append("<SMS>" + smsMsg + "</SMS>");
                            sb.Append("</ConfirmRes>");
                            writeLog("RES XML : " + sb.ToString());
                            return sb.ToString();
                            #endregion
                            #endregion
                        }
                        else
                        {
                            #region <-- Simulator Mode Off -->
                            if (meterBiller == isTitan)
                            {
                                writeLog("$$$$$$$$$$$$ This Is Titan Confirm $$$$$$$$$$$");
                                string biller = string.Empty;
                                string UserName = ConfigurationManager.AppSettings["titalUserName"].ToString();
                                string ApiKey = ConfigurationManager.AppSettings["titanApiKey"].ToString();
                                string passPhrase = ConfigurationManager.AppSettings["titanpassPhrase"].ToString();
                                string confirmUrl = ConfigurationManager.AppSettings["titanConfirmUrl"].ToString();
                                string inqResString = string.Empty;
                                int batchid = 0;
                                //double availablebalance = 0;
                                //double ledgerbalance = 0;
                                mobileNo = ref3;
                                /*--to update status--*/
                                if (titanResult == "OK")
                                {
                                    /*to update into database after payment is successful*/
                                    string temp = ApiKey + "," + townshipcode + "," + titanCustRefNumber + "," + "Successful" + "," + txnID + "," + DateTime.Now.ToString() + "," + "false";
                                    //  string temp = APiKey + "," + this.VSResultSet.TownshipCode + ","  + "Successful" + "," + txtTransactionNo.Text + "," + DateTime.Now.ToString() + "," + "false";

                                    string encodedKey = Utils.EncryptString(temp, passPhrase);

                                    string completeUrl = confirmUrl + UserName + "/" + encodedKey;

                                    writeLog("Titan Confirm Req URL:" + completeUrl);

                                    HttpWebResponse titanConfirmRes = null;

                                    // Get the stream containing content returned by the server.
                                    Stream dataStream = Utils.CallTitanSourceApi(completeUrl, ref titanConfirmRes);

                                    //Fatch Confirm Response Date from response DataStream

                                    TitanConfirmResultSet confirmResult = Utils.MapTitanConfirmResponse(dataStream);

                                    dataStream.Close();
                                    dataStream.Dispose();
                                    writeLog("Confirm Resopnse:" + confirmResult.ResponseInfo);
                                    if (!string.IsNullOrEmpty(confirmResult.ResponseInfo))
                                    {
                                        string[] confirmres = confirmResult.ResponseInfo.Split(',');
                                        if (confirmres.Count() >= 3)
                                        {
                                            if (confirmres[0].ToLower() == "paid")
                                            {
                                                string errRes = GetErrorResponseWithAddBalance("01", "Already Paid", txnID, confirmResult.ResponseInfo, agentID, agentAmount, isAgreement);
                                                return errRes;
                                            }
                                            rescode = "00";
                                            resdecs = "Success";
                                            //ref2 = confirmres[0];
                                            ref1 = ref1 + meterBiller;
                                            ref3 = titanCustomerName;
                                            ref4 = confirmResult.ResponseInfo + " " + meterBiller;
                                            #region <-- If response status is Success Do this Job -->
                                            if (!_agentWCF.ConfirmUpdate(txnID,
                                                 ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                                 agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                            {
                                                writeLog("Error in ConfirmUpdate : " + errMsg);
                                                resdecs = "Error in update database";
                                                rescode = "06";
                                                if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                                                {
                                                    writeLog("Error in updateError : " + errMsg);
                                                }
                                                return Utils.getErrorRes(rescode, "Transaction fail");
                                            }
                                            else
                                            {
                                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                                            }
                                            if (appType == "CS" || appType == "MS")
                                            {
                                                SMSHelper smsH = new SMSHelper();
                                                smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                                smsMsg = smsH.getMessageBillerGGI(agentName, MapTaxID, billerName, ref1Name, ref3Name, "Receipt No", "Ref", ref1, ref3, ref2, txnID.ToString(),
                                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);



                                                try
                                                {
                                                    writeLog("sendSMSWithTxnID starts.");
                                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);

                                                    writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                                    smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);

                                                    writeLog("sendSMSWithTxnID ends.");
                                                }
                                                catch (Exception ex)
                                                {
                                                }
                                            }
                                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));


                                            StringBuilder sb = new StringBuilder();
                                            sb.Append("<ConfirmRes>");
                                            sb.Append("<Version>1.0</Version>");
                                            sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                                            sb.Append("<MessageID>" + messageid + "</MessageID>");
                                            sb.Append("<TaxID>" + taxID + "</TaxID>");
                                            sb.Append("<ResCode>" + rescode + "</ResCode>");
                                            sb.Append("<ResDesc>" + resdecs + "</ResDesc>");
                                            sb.Append("<Ref1>" + ref1 + "</Ref1>");
                                            sb.Append("<Ref2>" + ref2 + "</Ref2>");
                                            sb.Append("<Ref3>" + ref3 + "</Ref3>");
                                            sb.Append("<Ref4></Ref4>");
                                            sb.Append("<Ref5>" + mobileNo + "</Ref5>");
                                            sb.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                                            sb.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                                            sb.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                                            sb.Append("<Ref4Name> </Ref4Name>");
                                            sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                                            sb.Append("<BatchID>" + batchid + "</BatchID>");
                                            sb.Append("<Balance>" + avalbal + "</Balance>");
                                            sb.Append("<TxnID>" + txnID + "</TxnID>");
                                            sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                                            sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");

                                            sb.Append("<SMS>" + smsMsg + "</SMS>");
                                            sb.Append("</ConfirmRes>");
                                            writeLog("RES XML : " + sb.ToString());
                                            return sb.ToString();
                                            #endregion
                                        }
                                        else
                                        {

                                            //string errRes = GeterrorResponse("01", confirmResult.ResponseInfo, txnID, confirmResult.ResponseInfo);
                                            //writeLog(errRes);
                                            string errRes = GetErrorResponseWithAddBalance("01", confirmResult.ResponseInfo, txnID, confirmResult.ResponseInfo, agentID, agentAmount, isAgreement);
                                            return errRes;
                                        }
                                    }
                                    else
                                    {
                                        writeLog("Titan Confirm response is Empty");
                                        //string errRes = GeterrorResponse("01", "Unsuccessful", txnID, "Empty Response");
                                        //writeLog(errRes);
                                        string errRes = GetErrorResponseWithAddBalance("01", "Unsuccessful", txnID, titanResult, agentID, agentAmount, isAgreement);
                                        return errRes;
                                    }

                                }
                                else
                                {
                                    writeLog("Status isn't OK");
                                    string errRes = GetErrorResponseWithAddBalance("01", "Unsuccessful", txnID, titanResult, agentID, agentAmount, isAgreement);
                                    //    GeterrorResponse("01", "Unsuccessful", txnID, titanResult);

                                    //writeLog(errRes);
                                    return errRes;
                                    ///lblStatus.Text = "Status isn't Ok.";
                                }
                            }
                            else
                            {
                                writeLog("$$$$$$$$$$$$$ This is CNP Confirm $$$$$$$$$$$$$$$$$$$$");
                                meterBiller = "CNP";
                                #region <-- Initialize stage to request to payyee -->
                                ReqPaymentByCash reqPayCash = new ReqPaymentByCash();
                                ResPaymentByCash resPayCash = new ResPaymentByCash();
                                //ReqBillAmount reqBillAmt = new ReqBillAmount();
                                //ResBillAmount resBilAmt = new ResBillAmount();
                                ResError err = new ResError();
                                string success = ConfigurationManager.AppSettings["payeesuccess"].ToString().Trim();
                                string fail = ConfigurationManager.AppSettings["payeefailed"].ToString().Trim();
                                string merchantcode = ConfigurationManager.AppSettings["YESCMerchantCode"].ToString().Trim();
                                reqPayCash.apiKey = ConfigurationManager.AppSettings["payeeApiKey"].ToString().Trim();
                                //reqPayCash.billRefNo = taxID == "0000000000020" ? ref1 : "";
                                reqPayCash.billRefNo = ref1;
                                reqPayCash.custRefNo = ref1;
                                reqPayCash.billingMerchantCode = merchantcode.Trim();
                                reqPayCash.currencyCode = ConfigurationManager.AppSettings["payeeCurrencyCode"].ToString().Trim();
                                reqPayCash.billAmount = amount;
                                reqPayCash.chargesAmount = totalpayeecharge;

                                reqPayCash.transferRefNo1 = string.Empty;
                                reqPayCash.transferRefNo2 = string.Empty;
                                reqPayCash.extRefNo1 = string.Empty;



                                mobileNo = ref3;
                                ref3 = ref2;
                                #endregion

                                #region <-- Request To Payee -->
                                BillPayment payment = new BillPayment();
                                payment.PaymentByCash(reqPayCash, out resPayCash, out err, out errMsg);//Payment Request To Payee
                                try
                                {
                                    int batchid = 0;
                                    //double availablebalance = 0;
                                    //double ledgerbalance = 0;

                                    if (!string.IsNullOrEmpty(resPayCash.status))
                                    {
                                        #region <-- If Response Status is not Empty Do This Job -->
                                        if (resPayCash.status == success)
                                        {
                                            rescode = "00";
                                            resdecs = "Success";
                                            ref2 = resPayCash.txnId;
                                            ref1 = ref1 + meterBiller;
                                            // ref4 = resPayCash.txnId + " " + meterBiller;
                                            #region <-- If response status is Success Do this Job -->
                                            if (!_agentWCF.ConfirmUpdate(txnID,
                                                 ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                                 agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                            {
                                                writeLog("Error in ConfirmUpdate : " + errMsg);
                                                resdecs = "Error in update database";
                                                rescode = "06";
                                                if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                                                {
                                                    writeLog("Error in updateError : " + errMsg);
                                                }
                                                return Utils.getErrorRes(rescode, "Transaction fail");
                                            }
                                            else
                                            {
                                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                                            }
                                            if (appType == "CS" || appType == "MS")
                                            {
                                                SMSHelper smsH = new SMSHelper();
                                                smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                                smsMsg = smsH.getMessageBillerGGI(agentName, MapTaxID, billerName, ref1Name, ref3Name, "Receipt No", "Ref", ref1, ref3, ref2, txnID.ToString(),
                                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);



                                                try
                                                {
                                                    writeLog("sendSMSWithTxnID starts.");
                                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);

                                                    writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                                    smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);

                                                    writeLog("sendSMSWithTxnID ends.");
                                                }
                                                catch (Exception ex)
                                                {
                                                }
                                            }

                                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                                            StringBuilder sb = new StringBuilder();
                                            sb.Append("<ConfirmRes>");
                                            sb.Append("<Version>1.0</Version>");
                                            sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                                            sb.Append("<MessageID>" + messageid + "</MessageID>");
                                            sb.Append("<TaxID>" + taxID + "</TaxID>");
                                            sb.Append("<ResCode>" + rescode + "</ResCode>");
                                            sb.Append("<ResDesc>" + resdecs + "</ResDesc>");
                                            sb.Append("<Ref1>" + ref1 + "</Ref1>");
                                            sb.Append("<Ref2>" + ref2 + "</Ref2>");
                                            sb.Append("<Ref3>" + ref3 + "</Ref3>");
                                            sb.Append("<Ref4></Ref4>");
                                            sb.Append("<Ref5>" + mobileNo + "</Ref5>");
                                            sb.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                                            sb.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                                            sb.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                                            sb.Append("<Ref4Name> </Ref4Name>");
                                            sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                                            sb.Append("<BatchID>" + batchid + "</BatchID>");
                                            sb.Append("<Balance>" + avalbal + "</Balance>");
                                            sb.Append("<TxnID>" + txnID + "</TxnID>");
                                            sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                                            sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");

                                            sb.Append("<SMS>" + smsMsg + "</SMS>");
                                            sb.Append("</ConfirmRes>");
                                            writeLog("RES XML : " + sb.ToString());
                                            return sb.ToString();
                                            #endregion
                                        }
                                        else if (resPayCash.status == fail)
                                        {
                                            writeLog("CNP Fail Response:" + resPayCash.status);
                                            writeLog("Error Code:" + err.errorCode);
                                            writeLog("Error Message:" + err.errorMessage);
                                            //return Utils.getErrorRes("97", getCNPErrMsg(err.errorCode));
                                            return GetErrorResponseWithAddBalance("97", getCNPErrMsg(err.errorCode), txnID, getCNPErrMsg(err.errorCode), agentID, agentAmount, isAgreement);
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        writeLog("CNP Response with empty status:");
                                        writeLog("Error Code:" + err.errorCode);
                                        writeLog("Error Message:" + err.errorMessage);
                                        //return Utils.getErrorRes("97", getCNPErrMsg(err.errorCode));
                                        return GetErrorResponseWithAddBalance("97", getCNPErrMsg(err.errorCode), txnID, getCNPErrMsg(err.errorCode), agentID, agentAmount, isAgreement);
                                    }
                                }
                                catch (Exception ex)
                                {
                                    writeLog("Exception Error In Confirm Insert" + ex.Message);
                                    return GetErrorResponseWithAddBalance("97", "System Error", txnID, "System Error", agentID, agentAmount, isAgreement);
                                }
                                #endregion

                            }

                            #endregion
                        }
                    }
                    #endregion

                    #region <-- Rent2Own -->
                    if (MapTaxID == "0000000000029")
                    {
                        writeLog("$$$$$$$$$$$$This Is Rent2Own$$$$$$$$$$$$$$$");
                        mobileNo = ref3;

                        int batchid = 0;
                        //double availablebalance = 0;
                        //double ledgerbalance = 0;
                        double avalbal = 0;
                        double legbal = 0;

                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            #region <-- Simulator mode -->
                            string confirmResString = string.Empty;
                            ref3 = DateTime.Now.ToString("ddMMyyyHHmmss");
                            ref4 = ref5;

                            if (!_agentWCF.ConfirmUpdate(txnID,
                                ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);
                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }
                            if (appType == "CS" || appType == "MS")
                            {
                                SMSHelper smsH = new SMSHelper();
                                smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                smsMsg = smsH.getMessageBillerGGI(agentName, MapTaxID, billerName, "Contract No", "", "", "", ref1, ref2, ref3, txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);



                                try
                                {
                                    writeLog("sendSMSWithTxnID starts.");
                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);

                                    writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);

                                    writeLog("sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {
                                }
                            }
                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                            rescode = "00";
                            resdecs = "Success";

                            #region <-- Response Back To Client -->
                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = string.Empty;
                            confirmres.ref5 = mobileNo;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);
                            #endregion

                            #endregion
                        }
                        else
                        {
                            #region <-- Simulator mode off -->

                            // Check Minimum Amount for Rent2Own
                            writeLog("Check Minimum Amount for Rent2Own");
                            decimal minimumAmount = Convert.ToDecimal(ConfigurationManager.AppSettings["Rent2OwnMinimumAmount"].ToString());
                            if (Convert.ToDecimal(amount) < minimumAmount)
                            {
                                writeLog("Fail !!! Less than Minimum Amount");
                                return GetErrorResponseWithAddBalance("96", "Transaction amount is less than minimum amount", txnID, "Transaction amount is less than minimum amount.", agentID, agentAmount, isAgreement);
                            }
                            
                            string confirmmethod = ConfigurationManager.AppSettings["Rent2OwnConfirm"].ToString();
                            string agncode = ConfigurationManager.AppSettings["Rent2OwnAgnCode"].ToString();
                            string rent2OwnKey = ConfigurationManager.AppSettings["Rent2OwnKey"].ToString();
                            string rent2Ownuri = ConfigurationManager.AppSettings["Rent2OwnUri"].ToString();
                            Rent2OwnConfirmRequest confirmreq = new Rent2OwnConfirmRequest();
                            Rent2OwnConfirmResponse confirmRes = new Rent2OwnConfirmResponse();
                            confirmreq.ContractNumber = ref1;
                            confirmreq.AgentCode = agncode;
                            confirmreq.Amount = amount;
                            confirmreq.MobileNumber = mobileNo;
                            confirmreq.TransactionRefNumber = txnID.ToString();
                            string[] fourTVProuct = ref5.Split(':');
                            string pt = fourTVProuct[fourTVProuct.Length - 1].ToString();
                            string[] PaymentType = pt.Split(' ');
                            confirmreq.PaymentType = PaymentType[0].ToString();

                            if (confirmreq.PaymentType != "RFP" && confirmreq.PaymentType != "OTP")
                            {
                                confirmreq.PaymentType = string.Empty;
                            }
                            //TransactionRefNumber+ContractNumber+Amount+MobileNumber+AgentCode
                            confirmreq.HashValue = Utils.generateHashValue((confirmreq.TransactionRefNumber + confirmreq.ContractNumber + confirmreq.Amount + confirmreq.MobileNumber + confirmreq.AgentCode), rent2OwnKey).ToLower();
                            //TransactionRefNumber + ResponseCode+ResponseDescription+InvoiceNumber

                            //var json_serializer1 = new JavaScriptSerializer();
                            //string jsonReq = json_serializer1.Serialize(confirmreq);
                            string jsonReq = JsonConvert.SerializeObject(confirmreq, Newtonsoft.Json.Formatting.Indented, new JsonSerializerSettings { DefaultValueHandling = DefaultValueHandling.Ignore });

                            writeLog("Rent2Own Request String:" + jsonReq);
                            string uri = string.Empty;
                            uri = rent2Ownuri + confirmmethod;
                            writeLog("Request URL:" + uri);
                            string jsonres = Utils.Rent2OwnRequest(jsonReq, uri);
                            writeLog("Rent2Own Response String:" + jsonres);

                            var json_serializerres = new JavaScriptSerializer();
                            confirmRes = json_serializerres.Deserialize<Rent2OwnConfirmResponse>(jsonres);

                            string temphash = confirmRes.HashValue;
                            //TransactionRefNumber + ResponseCode+ResponseDescription+InvoiceNumber
                            string HashCompare = Utils.generateHashValue((confirmRes.TransactionRefNumber + confirmRes.ResponseCode + confirmRes.ResponseDescription + confirmRes.InvoiceNumber), "B3aut1ful").ToLower();
                            writeLog("Response Hash:" + temphash + "|1StopGenerated Hash:" + HashCompare);
                            if (temphash == HashCompare)
                            {
                                if (confirmRes.ResponseCode == "00")
                                {
                                    string confirmResString = string.Empty;
                                    ref3 = confirmRes.InvoiceNumber;
                                    ref4 = ref5;

                                    if (!_agentWCF.ConfirmUpdate(txnID,
                                        ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                        agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                    {
                                        writeLog("Error in ConfirmUpdate : " + errMsg);
                                        resdecs = "Error in update database";
                                        rescode = "06";
                                        if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                                        {
                                            writeLog("Error in updateError : " + errMsg);
                                        }
                                        return Utils.getErrorRes(rescode, "Transaction fail");
                                    }
                                    else
                                    {
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                                    }
                                    if (appType == "CS" || appType == "MS")
                                    {
                                        SMSHelper smsH = new SMSHelper();
                                        smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                        smsMsg = smsH.getMessageBillerGGI(agentName, MapTaxID, billerName, "Contract No", "", "", "", ref1, ref2, ref3, txnID.ToString(),
                                            double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);



                                        try
                                        {
                                            writeLog("sendSMSWithTxnID starts.");
                                            // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);

                                            writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                            smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);

                                            writeLog("sendSMSWithTxnID ends.");
                                        }
                                        catch (Exception ex)
                                        {
                                        }
                                    }
                                    Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                                    rescode = "00";
                                    resdecs = "Success";

                                    #region <-- Response Back To Client -->
                                    rescode = "00";
                                    resdecs = "Success";
                                    ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                    confirmres.taxID = taxID;
                                    confirmres.email = email;
                                    confirmres.password = password;
                                    confirmres.messageid = messageid;
                                    confirmres.billername = billerName;
                                    confirmres.billerlogo = billerLogo;
                                    confirmres.rescode = rescode;
                                    confirmres.resdesc = resdecs;
                                    confirmres.ref1 = ref1;
                                    confirmres.ref2 = ref2;
                                    confirmres.ref3 = ref3;
                                    confirmres.ref4 = string.Empty;
                                    confirmres.ref5 = mobileNo;
                                    confirmres.ref1Name = ref1Name;
                                    confirmres.ref2Name = ref2Name;
                                    confirmres.ref3Name = ref3Name;
                                    confirmres.ref5Name = ref5Name;
                                    confirmres.availablebalance = availablebalance.ToString();
                                    confirmres.txnID = txnID.ToString();
                                    confirmres.TodayTxnAmount = TodayTxnAmount;
                                    confirmres.TodayTxnCount = TodayTxnCount;
                                    confirmres.smsMsg = smsMsg;

                                    return Utils.getConfirmRes(confirmres);
                                    #endregion
                                }
                                else
                                {
                                    // return Utils.getErrorRes(confirmRes.ResponseCode, confirmRes.ResponseDescription);
                                    //return GeterrorResponse(confirmRes.ResponseCode, confirmRes.ResponseDescription, txnID, confirmRes.ResponseDescription);
                                    return GetErrorResponseWithAddBalance(confirmRes.ResponseCode, confirmRes.ResponseDescription, txnID, confirmRes.ResponseDescription, agentID, agentAmount, isAgreement);

                                }
                            }
                            else
                            {
                                //return GeterrorResponse(confirmRes.ResponseCode, confirmRes.ResponseDescription, txnID, confirmRes.ResponseDescription);
                                return GetErrorResponseWithAddBalance(confirmRes.ResponseCode, confirmRes.ResponseDescription, txnID, confirmRes.ResponseDescription, agentID, agentAmount, isAgreement);
                            }


                            #endregion
                        }

                    }
                    #endregion

                    #region <-- Awba-->>
                    if (MapTaxID == "0000000000023")
                    {
                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            #region <-- Simulator is On -->
                            int batchid = 0;
                            //double availablebalance = 0;
                            //double ledgerbalance = 0;
                            mobileNo = ref3;
                            ref3 = "1234543";
                            //string errMsg = null;
                            double avalbal = 0;
                            double legbal = 0;


                            //if (_agentWCF.ConfirmUpdate(out  errMsg, out  batchID, out  availablebalance, out  ledgerbalance, txnID,
                            //                   ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                            //                   agentAmount, agentFeeDbl, isAgreement))

                            //{
                            if (!_agentWCF.ConfirmUpdate(txnID,
                                ref1, ref2, ref3, productdesc, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);
                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                            }
                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                            if (appType == "CS" || appType == "MS")
                            {
                                SMSHelper smsH = new SMSHelper();
                                smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                smsMsg = smsH.getMessageBillerGGI(agentName, MapTaxID, billerName, "Slip No", "Customer ID", "Receipt No", "Ref", ref1, ref2, ref3, txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);



                                try
                                {
                                    writeLog("sendSMSWithTxnID starts.");
                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                    writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);

                                    // smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                    writeLog("sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {
                                }
                            }

                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));


                            StringBuilder sb = new StringBuilder();
                            sb.Append("<ConfirmRes>");
                            sb.Append("<Version>1.0</Version>");
                            sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            sb.Append("<MessageID>" + messageid + "</MessageID>");
                            sb.Append("<ResCode>" + rescode + "</ResCode>");
                            sb.Append("<ResDesc>" + resdecs + "</ResDesc>");
                            sb.Append("<Ref1>" + ref1 + "</Ref1>");
                            sb.Append("<Ref2>" + ref2 + "</Ref2>");
                            sb.Append("<Ref3>" + ref3 + "</Ref3>");
                            sb.Append("<Ref4></Ref4>");
                            sb.Append("<Ref5>" + mobileNo + "</Ref5>");
                            sb.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                            sb.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                            sb.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                            sb.Append("<Ref4Name> </Ref4Name>");
                            sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                            sb.Append("<BatchID>" + batchid + "</BatchID>");
                            sb.Append("<Balance>" + avalbal + "</Balance>");
                            sb.Append("<TxnID>" + txnID + "</TxnID>");
                            sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                            sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");

                            sb.Append("<SMS>" + smsMsg + "</SMS>");
                            sb.Append("</ConfirmRes>");
                            writeLog("RES XML : " + sb.ToString());
                            return sb.ToString();
                            #endregion
                        }
                        else
                        {

                            if (ConfigurationManager.AppSettings["IsAwbaMIT"].ToString() == "Y")
                            {
                                #region <-- Awba Mit Mfi -->
                                writeLog("This is Awba Mit");
                                //MahaAwbaWCF.RouteWebServiceSoapClient awbaWcf = new MahaAwbaWCF.RouteWebServiceSoapClient();
                                //    awbaRepayWCF.RouteWebServiceSoapClient awbaWcf = new awbaRepayWCF.RouteWebServiceSoapClient();


                                double avalbal = 0;
                                double legbal = 0;
                                SSLPost Post = new SSLPost();
                                StringBuilder hb = new StringBuilder();
                                string mitConfirmUrl = string.Empty;
                                string mitAwbaConfirmMethod = "RepayTransaction";
                                mitConfirmUrl = ConfigurationManager.AppSettings["MitAwbaUrl"].ToString() + mitAwbaConfirmMethod;
                                string hashkeystr = Utils.GethashKeyawbaConfirmReq("1.0", ts, messageid, ref2, ref1, Utils.getFromOrginalTo12Digit(amount));
                                #region <-- Request xml to awba -->
                                hb.Append("<ConfirmReq>");
                                hb.Append("<Version>1.0</Version>");
                                hb.Append("<TimeStamp>" + ts + "</TimeStamp>");
                                hb.Append("<MessageID>" + messageid + "</MessageID>");
                                hb.Append("<CustomerID>" + ref2 + "</CustomerID>");
                                hb.Append("<SlipNo>" + ref1 + "</SlipNo>");
                                hb.Append("<Amount>" + Utils.getFromOrginalTo12Digit(amount) + "</Amount>");
                                //hb.Append("<InterestAmount></InterestAmount>");
                                //hb.Append("<PanelFeesAmount></PanelFeesAmount>"); 
                                hb.Append("<HashValue>" + hashkeystr + "</HashValue>");
                                hb.Append("</ConfirmReq>");
                                #endregion
                                writeLog("Confirm XML Req to awba:" + hb.ToString());
                                SinaptIQPKCS7.PKCS7 pkcs7 = new SinaptIQPKCS7.PKCS7();
                                string encryptedMsg = pkcs7.encryptMessage(hb.ToString(), pkcs7.getPublicCert(ConfigurationManager.AppSettings["publicKeyPathawba"].ToString()));//Convert.ToBase64String(encodedEncryptedCms);
                                string responsestr = string.Empty;
                                string decryptedresdata = string.Empty;
                                string reciptNo = string.Empty;
                                #region <-- Request to awba -->
                                try
                                {
                                    if (!Post.postToMitAwba(mitConfirmUrl, encryptedMsg, out responsestr, out errMsg))
                                    {
                                        writeLog("Encrypted response data from MFI:" + responsestr);
                                        writeLog("MIT Awba Posting Error Message:" + errMsg);


                                        rescode = "99";
                                        resdecs = "Cannot Connect To MFI";
                                        //return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                                        return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                    }
                                }
                                catch (Exception ex)
                                {
                                    writeLog("Exception error Response From MFI" + ex.Message);

                                    rescode = "99";
                                    resdecs = "Cannot Connect To MFI";
                                    //return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                                    return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);

                                }
                                #endregion
                                //string privatecer = ConfigurationManager.AppSettings["privateKeyPathawba"].ToString();
                                //string pass = ConfigurationManager.AppSettings["privateKeyPWDawba"].ToString();
                                decryptedresdata = pkcs7.decryptMessage(responsestr, pkcs7.getPrivateCert(ConfigurationManager.AppSettings["privateKeyPathawba"].ToString(), ConfigurationManager.AppSettings["privateKeyPWDawba"].ToString()));
                                writeLog("XML RESPONSE FROM MFI After Decrypt:" + decryptedresdata);
                                Hashtable htt = Utils.getHTableFromXML(decryptedresdata);
                                mobileNo = ref3;
                                if (!IsValidateConfirmResAwba(htt, out rescode, out resdecs, out version, out messageid, out ref1, out ref2, out ref3, out ref4, out ts, out reciptNo))
                                {
                                    #region <-- Awba valadation response not ok -->

                                    //return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                                    return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                    #endregion
                                }
                                else
                                {
                                    if (rescode == "00")
                                    {
                                        resdecs = "Success";
                                        #region <-- If valadation of awba response ok -->
                                        int batchid = 0;
                                        //double availablebalance = 0;
                                        //double ledgerbalance = 0;

                                        #region <-- Confirm Update -->
                                        if (!_agentWCF.ConfirmUpdate(txnID,
                                            ref1, ref2, ref3, productdesc, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                            agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                        {
                                            writeLog("Error in ConfirmUpdate : " + errMsg);
                                            resdecs = "Error in update database";
                                            rescode = "06";
                                            if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                                            {
                                                writeLog("Error in updateError : " + errMsg);
                                            }
                                            return Utils.getErrorRes(rescode, "Transaction fail");
                                        }
                                        else
                                        {
                                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                        }
                                        #endregion
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                        if (appType == "CS" || appType == "MS")
                                        {
                                            #region <-- Send SMS -->
                                            SMSHelper smsH = new SMSHelper();
                                            smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                            smsMsg = smsH.getMessageBillerGGI(agentName, MapTaxID, billerName, "Slip No", "Customer ID", "Receipt No", "Ref", ref1, ref2, ref3, txnID.ToString(),
                                                double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);



                                            try
                                            {
                                                writeLog("sendSMSWithTxnID starts.");
                                                // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);

                                                writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                                smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);

                                                writeLog("sendSMSWithTxnID ends.");
                                            }
                                            catch (Exception ex)
                                            {
                                            }
                                            #endregion
                                        }

                                        Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                                        #region <-- Response to mobile -->
                                        StringBuilder sb = new StringBuilder();
                                        sb.Append("<ConfirmRes>");
                                        sb.Append("<Version>1.0</Version>");
                                        sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                                        sb.Append("<MessageID>" + messageid + "</MessageID>");
                                        sb.Append("<ResCode>" + rescode + "</ResCode>");
                                        sb.Append("<ResDesc>" + resdecs + "</ResDesc>");
                                        sb.Append("<Ref1>" + ref1 + "</Ref1>");
                                        sb.Append("<Ref2>" + ref2 + "</Ref2>");
                                        sb.Append("<Ref3>" + ref3 + "</Ref3>");
                                        sb.Append("<Ref4></Ref4>");
                                        sb.Append("<Ref5>" + mobileNo + "</Ref5>");
                                        sb.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                                        sb.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                                        sb.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                                        sb.Append("<Ref4Name> </Ref4Name>");
                                        sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                                        sb.Append("<BatchID>" + batchid + "</BatchID>");
                                        sb.Append("<Balance>" + avalbal + "</Balance>");
                                        sb.Append("<TxnID>" + txnID + "</TxnID>");
                                        sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                                        sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");

                                        sb.Append("<SMS>" + smsMsg + "</SMS>");
                                        sb.Append("</ConfirmRes>");
                                        writeLog("RES XML : " + sb.ToString());
                                        return sb.ToString();
                                        #endregion
                                        #endregion
                                    }
                                    else
                                    {
                                        #region <-- Response code not equal success -->
                                        resdecs = string.IsNullOrEmpty(resdecs) ? Utils.GetAwbaResDesc(rescode) : resdecs;
                                        //return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                                        return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                        #endregion
                                    }
                                }
                                #endregion
                            }
                            else
                            {
                                #region <-- Awba ACE MIF -->
                                MahaAwbaWCF.RouteWebServiceSoapClient awbaWcf = new MahaAwbaWCF.RouteWebServiceSoapClient();
                                //    awbaRepayWCF.RouteWebServiceSoapClient awbaWcf = new awbaRepayWCF.RouteWebServiceSoapClient();

                                double avalbal = 0;
                                double legbal = 0;
                                SSLPost Post = new SSLPost();
                                StringBuilder hb = new StringBuilder();
                                string hashkeystr = Utils.GethashKeyawbaConfirmReq("1.0", ts, messageid, ref2, ref1, Utils.getFromOrginalTo12Digit(amount));
                                #region <-- Request xml to awba -->
                                hb.Append("<ConfirmReq>");
                                hb.Append("<Version>1.0</Version>");
                                hb.Append("<TimeStamp>" + ts + "</TimeStamp>");
                                hb.Append("<MessageID>" + messageid + "</MessageID>");
                                hb.Append("<CustomerID>" + ref2 + "</CustomerID>");
                                hb.Append("<SlipNo>" + ref1 + "</SlipNo>");
                                hb.Append("<Amount>" + Utils.getFromOrginalTo12Digit(amount) + "</Amount>");
                                //hb.Append("<InterestAmount></InterestAmount>");
                                //hb.Append("<PanelFeesAmount></PanelFeesAmount>"); 
                                hb.Append("<HashValue>" + hashkeystr + "</HashValue>");
                                hb.Append("</ConfirmReq>");
                                #endregion
                                writeLog("Confirm XML Req to awba:" + hb.ToString());
                                SinaptIQPKCS7.PKCS7 pkcs7 = new SinaptIQPKCS7.PKCS7();
                                string encryptedMsg = pkcs7.encryptMessage(hb.ToString(), pkcs7.getPublicCert(ConfigurationManager.AppSettings["publicKeyPathawba"].ToString()));//Convert.ToBase64String(encodedEncryptedCms);
                                string responsestr = string.Empty;
                                string decryptedresdata = string.Empty;
                                string reciptNo = string.Empty;
                                #region <-- Request to awba -->
                                try
                                {
                                    responsestr = awbaWcf.GetRepaymentComfirmation(encryptedMsg);
                                    writeLog("Encrypted response data from MFI:" + responsestr);
                                }
                                catch (Exception ex)
                                {
                                    writeLog("Exception error Response From MFI" + ex.Message);
                                    StringBuilder sb = new StringBuilder();
                                    rescode = "99";
                                    resdecs = "Connect Connect To MFI";
                                    //return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                                    return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);

                                }
                                #endregion
                                //string privatecer = ConfigurationManager.AppSettings["privateKeyPathawba"].ToString();
                                //string pass = ConfigurationManager.AppSettings["privateKeyPWDawba"].ToString();
                                decryptedresdata = pkcs7.decryptMessage(responsestr, pkcs7.getPrivateCert(ConfigurationManager.AppSettings["privateKeyPathawba"].ToString(), ConfigurationManager.AppSettings["privateKeyPWDawba"].ToString()));
                                writeLog("XML RESPONSE FROM MFI After Decrypt:" + decryptedresdata);
                                Hashtable htt = Utils.getHTableFromXML(decryptedresdata);
                                mobileNo = ref3;
                                if (!IsValidateConfirmResAwba(htt, out rescode, out resdecs, out version, out messageid, out ref1, out ref2, out ref3, out ref4, out ts, out reciptNo))
                                {
                                    #region <-- Awba valadation response not ok -->

                                    //return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                                    return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                    #endregion
                                }
                                else
                                {
                                    if (rescode == "00")
                                    {
                                        resdecs = "Success";
                                        #region <-- If valadation of awba response ok -->
                                        int batchid = 0;
                                        //double availablebalance = 0;
                                        //double ledgerbalance = 0;


                                        //string errMsg = null;



                                        #region <-- Confirm Update -->
                                        if (!_agentWCF.ConfirmUpdate(txnID,
                                            ref1, ref2, ref3, productdesc, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                            agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                        {
                                            writeLog("Error in ConfirmUpdate : " + errMsg);
                                        }
                                        else
                                        {
                                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                        }
                                        #endregion
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                        if (appType == "CS" || appType == "MS")
                                        {
                                            #region <-- Send SMS -->
                                            SMSHelper smsH = new SMSHelper();
                                            smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                            smsMsg = smsH.getMessageBillerGGI(agentName, MapTaxID, billerName, "Slip No", "Customer ID", "Receipt No", "Ref", ref1, ref2, ref3, txnID.ToString(),
                                                double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);



                                            try
                                            {
                                                writeLog("sendSMSWithTxnID starts.");
                                                // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);

                                                writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                                smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);

                                                writeLog("sendSMSWithTxnID ends.");
                                            }
                                            catch (Exception ex)
                                            {
                                            }
                                            #endregion
                                        }

                                        Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                                        #region <-- Response to mobile -->
                                        StringBuilder sb = new StringBuilder();
                                        sb.Append("<ConfirmRes>");
                                        sb.Append("<Version>1.0</Version>");
                                        sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                                        sb.Append("<MessageID>" + messageid + "</MessageID>");
                                        sb.Append("<ResCode>" + rescode + "</ResCode>");
                                        sb.Append("<ResDesc>" + resdecs + "</ResDesc>");
                                        sb.Append("<Ref1>" + ref1 + "</Ref1>");
                                        sb.Append("<Ref2>" + ref2 + "</Ref2>");
                                        sb.Append("<Ref3>" + ref3 + "</Ref3>");
                                        sb.Append("<Ref4></Ref4>");
                                        sb.Append("<Ref5>" + mobileNo + "</Ref5>");
                                        sb.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                                        sb.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                                        sb.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                                        sb.Append("<Ref4Name> </Ref4Name>");
                                        sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                                        sb.Append("<BatchID>" + batchid + "</BatchID>");
                                        sb.Append("<Balance>" + avalbal + "</Balance>");
                                        sb.Append("<TxnID>" + txnID + "</TxnID>");
                                        sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                                        sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");

                                        sb.Append("<SMS>" + smsMsg + "</SMS>");
                                        sb.Append("</ConfirmRes>");
                                        writeLog("RES XML : " + sb.ToString());
                                        return sb.ToString();
                                        #endregion
                                        #endregion
                                    }
                                    else
                                    {
                                        #region <-- Response code not equal success -->
                                        resdecs = string.IsNullOrEmpty(resdecs) ? Utils.GetAwbaResDesc(rescode) : resdecs;
                                        //return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                                        return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                        #endregion
                                    }
                                }
                                #endregion
                            }
                        }

                    }

                    #endregion

                    #region <-- MyKyatcashInOneStopContinue -->
                    /*
                if (taxID == "0000000000025")
                {

                    writeLog("This is MyKyat cashInOneStopContinue");
                    int batchid = 0;
                    double availablebalance = 0;
                    double ledgerbalance = 0;
                    string agnid = string.Empty;
                    mobileNo = ref5;
                    writeLog(mobileNo);
                    RouteAPI api_service = new RouteAPI();

                    StringBuilder signatureString = new StringBuilder();

                    string agnref = string.Empty;
                    // string digitalcodedesc = string.Empty;
                    signatureString.Append(ref2);//txnId
                    signatureString.Append("~");
                    signatureString.Append(ref5);//payeeMobile
                    signatureString.Append("~");
                    signatureString.Append("MMK");
                    signatureString.Append("~");
                    signatureString.Append(amount);
                    signatureString.Append("~");
                    signatureString.Append(imgnrc);// Message=ref6

                    writeLog(signatureString.ToString());

                    if (!_agentWCF.InsertTransactionLog(out errMsg, txnID, "ConfirmReq", signatureString.ToString()))
                    {
                        writeLog("Error in InsertTransactionLog Req : " + errMsg);
                    }
                    if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                    {
                        #region if Simulator is on
                        writeLog("Simulator Y");

                        StringBuilder sb = new StringBuilder();


                        string testpin = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                        string time = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                        string expirys = System.DateTime.Now.ToShortDateString();

                        // string lowercasehash = hash.ToLower();
                        sb.Append("<ConfirmRes>");
                        sb.Append("<Version>1.0</Version>");
                        sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                        sb.Append("<MessageID>" + messageid + "</MessageID>");
                        sb.Append("<BillerName>" + billerName + "</BillerName>");
                        sb.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                        sb.Append("<ResCode>" + rescode + "</ResCode>");
                        sb.Append("<ResDesc>" + resdecs + "</ResDesc>");
                        sb.Append("<Ref1>" + ref1 + "</Ref1>");
                        sb.Append("<Ref2>" + ref2 + "</Ref2>");
                        sb.Append("<Ref3>" + ref3 + "</Ref3>");
                        sb.Append("<Ref4></Ref4>");
                        sb.Append("<Ref5>" + mobileNo + "</Ref5>");
                        sb.Append("<Ref1Name></Ref1Name>");
                        sb.Append("<Ref2Name></Ref2Name>");
                        sb.Append("<Ref3Name>Payee Name</Ref3Name>");
                        sb.Append("<Ref4Name></Ref4Name>");
                        sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                        sb.Append("<BatchID>" + batchid + "</BatchID>");
                        sb.Append("<Balance>" + availablebalance + "</Balance>");
                        sb.Append("<TxnID>" + txnID + "</TxnID>");
                        sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                        sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                        sb.Append("<SMS>" + smsMsg + "</SMS>");
                        sb.Append("</ConfirmRes>");

                        response = sb.ToString();
                        rescode = "00";
                        // return sb.ToString();
                        #endregion
                    }
                    else
                    {

                        string API = string.Empty;

                        API = ConfigurationManager.AppSettings["cashInOneStopContinue"].ToString();

                        writeLog("MyKyat cashInOneStopContinue Req-signature string : " + signatureString.ToString());

                        api_service = new RouteAPI();

                        response = api_service.ApicallingMyKyat(API, signatureString.ToString(), 1, ref1);


                    }

                    if (!_agentWCF.InsertTransactionLog(out errMsg, txnID, "ConfirmRes", response))
                    {
                        writeLog("Error in InsertTransactionLog Res : " + errMsg);
                    }



                    string[] responseData = response.Split('~');

                    if (responseData.Count() > 1)
                    {
                        if (responseData[0].ToString() != "0")
                        {
                            writeLog("Error in cashInOneStopContinue : " + resdecs);

                            StringBuilder sb = new StringBuilder();
                            sb.Append("<Error>");
                            sb.Append("<Version>1.0</Version>");
                            sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            sb.Append("<ResCode>" + responseData[0].ToString() + "</ResCode>");
                            sb.Append("<ResDesc>" + responseData[1].ToString() + "</ResDesc>");
                            sb.Append("</Error>");
                            writeLog("RES XML : " + sb.ToString());
                            if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                            {
                                writeLog("Error in updateError : " + errMsg);
                            }
                            return sb.ToString();

                        }
                        else
                        {
                            rescode = "00";
                        }
                    }


                    if (rescode != "00")
                    {
                        StringBuilder sb = new StringBuilder();
                        sb.Append("<ConfirmRes>");
                        sb.Append("<Version>1.0</Version>");
                        sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                        sb.Append("<MessageID>" + messageid + "</MessageID>");
                        sb.Append("<BillerName>" + billerName + "</BillerName>");
                        sb.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                        sb.Append("<ResCode>" + rescode + "</ResCode>");
                        sb.Append("<ResDesc>" + resdecs + "</ResDesc>");
                        sb.Append("<Ref1>" + ref1 + "</Ref1>");
                        sb.Append("<Ref2>" + ref2 + "</Ref2>");
                        sb.Append("<Ref3>" + ref3 + "</Ref3>");
                        //sb.Append("<Ref4>" + "" + "</Ref4>");
                        sb.Append("<Ref4>" + ref4 + "</Ref4>");
                        sb.Append("<Ref5>" + mobileNo + "</Ref5>");
                        sb.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                        sb.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                        sb.Append("<Ref3Name>" + "" + "</Ref3Name>");
                        sb.Append("<Ref4Name>" + ref3Name + "</Ref4Name>");
                        sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                        sb.Append("<BatchID>" + batchid + "</BatchID>");
                        sb.Append("<Balance>" + availablebalance + "</Balance>");
                        sb.Append("<TxnID>" + txnID + "</TxnID>");
                        sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                        sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                        sb.Append("<SMS>" + smsMsg + "</SMS>");
                        sb.Append("</ConfirmRes>");
                        writeLog("RES XML : " + sb.ToString());
                        if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                        {
                            writeLog("Error in updateError : " + errMsg);
                        }
                        return sb.ToString();
                    }
                    else
                    {
                        writeLog("***************Enter Confirm Update *******************");

                        string myKyattxnid = string.Empty;

                        if (responseData.Count() > 1)

                            myKyattxnid = responseData[1].ToString();

                     
                        if (!_agentWCF.ConfirmUpdate(out  errMsg, out  batchID, out  availablebalance, out  ledgerbalance, txnID,
                                 myKyattxnid, ref3, ref4, string.Empty, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                 agentAmount, agentFeeDbl, isAgreement, smsStatus))
                        {
                            writeLog("Error in ConfirmUpdate : " + errMsg);
                        }
                        else
                        {
                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                        }
                        if (appType == "CS" || appType == "MS")
                        {
                            SMSHelper smsH = new SMSHelper();

                            smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                          

                            smsMsg = smsH.getMessageBiller(agentName, taxID, billerName, "Payer Name", "", "", "", ref3, "", "", txnID.ToString(),
                                double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);


                            try
                            {
                                writeLog("sendSMSWithTxnID starts.");
                                // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                writeLog("sendSMSWithTxnID ends.");
                            }
                            catch (Exception ex)
                            {
                            }
                        }

                        
                        StringBuilder sb = new StringBuilder();
                        sb.Append("<ConfirmRes>");
                        sb.Append("<Version>1.0</Version>");
                        sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                        sb.Append("<MessageID>" + messageid + "</MessageID>");
                        sb.Append("<BillerName>" + billerName + "</BillerName>");
                        sb.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                        sb.Append("<ResCode>00</ResCode>");
                        sb.Append("<ResDesc>Success</ResDesc>");
                        sb.Append("<Ref1>" + myKyattxnid + "</Ref1>");
                        sb.Append("<Ref2>" + ref3 + "</Ref2>");
                        sb.Append("<Ref3>" + ref4 + "</Ref3>");
                        sb.Append("<Ref4></Ref4>");
                        sb.Append("<Ref5>" + mobileNo + "</Ref5>");
                        sb.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                        sb.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                        sb.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                        sb.Append("<Ref4Name></Ref4Name>");
                        sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                        sb.Append("<BatchID>" + batchid + "</BatchID>");
                        sb.Append("<Balance>" + availablebalance + "</Balance>");
                        sb.Append("<TxnID>" + txnID + "</TxnID>");
                        sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                        sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                        sb.Append("<SMS>" + smsMsg + "</SMS>");
                        sb.Append("</ConfirmRes>");
                        writeLog("RES XML : " + sb.ToString());
                        return sb.ToString();


                    }
                }
                */
                    #endregion

                    #region <-- MyKyatcashOutOneStopContinue -->
                    /*
                if (taxID == "0000000000026")
                {

                    writeLog("This is MyKyat cashOutOneStopContinue");
                    int batchid = 0;
                    double availablebalance = 0;
                    double ledgerbalance = 0;
                    string agnid = string.Empty;
                    mobileNo = ref5;

                    RouteAPI api_service = new RouteAPI();

                    StringBuilder signatureString = new StringBuilder();

                    string agnref = string.Empty;
                    // string digitalcodedesc = string.Empty;
                    signatureString.Append(ref2); //txnid
                    signatureString.Append("~");
                    signatureString.Append(ref4); //pickupid



                    if (!_agentWCF.InsertTransactionLog(out errMsg, txnID, "ConfirmReq", signatureString.ToString()))
                    {
                        writeLog("Error in InsertTransactionLog Req : " + errMsg);
                    }
                    if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                    {
                        #region if Simulator is on
                        writeLog("Simulator Y");

                        StringBuilder sb = new StringBuilder();


                        string testpin = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                        string time = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                        string expirys = System.DateTime.Now.ToShortDateString();

                        // string lowercasehash = hash.ToLower();
                        sb.Append("<ConfirmRes>");
                        sb.Append("<Version>1.0</Version>");
                        sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                        sb.Append("<MessageID>" + messageid + "</MessageID>");
                        sb.Append("<BillerName>" + billerName + "</BillerName>");
                        sb.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                        sb.Append("<ResCode>" + rescode + "</ResCode>");
                        sb.Append("<ResDesc>" + resdecs + "</ResDesc>");
                        sb.Append("<Ref1></Ref1>");
                        sb.Append("<Ref2></Ref2>");
                        sb.Append("<Ref3>" + ref3 + "</Ref3>");
                        sb.Append("<Ref4></Ref4>");
                        sb.Append("<Ref5>" + mobileNo + "</Ref5>");
                        sb.Append("<Ref1Name></Ref1Name>");
                        sb.Append("<Ref2Name></Ref2Name>");
                        sb.Append("<Ref3Name>" + "Pickup code" + "</Ref3Name>");
                        sb.Append("<Ref4Name></Ref4Name>");
                        sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                        sb.Append("<BatchID>" + batchid + "</BatchID>");
                        sb.Append("<Balance>" + availablebalance + "</Balance>");
                        sb.Append("<TxnID>" + txnID + "</TxnID>");
                        sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                        sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                        sb.Append("<SMS>" + smsMsg + "</SMS>");
                        sb.Append("</ConfirmRes>");

                        response = sb.ToString();
                        // return sb.ToString();

                        rescode = "00";

                        #endregion
                    }
                    else
                    {

                        string API = string.Empty;

                        API = ConfigurationManager.AppSettings["cashOutOneStopContinue"].ToString();

                        writeLog("MyKyat cashOutOneStopContinue Req-signature string : " + signatureString.ToString());

                        api_service = new RouteAPI();

                        response = api_service.ApicallingMyKyat(API, signatureString.ToString(), 1, ref1);


                    }

                    if (!_agentWCF.InsertTransactionLog(out errMsg, txnID, "ConfirmRes", response))
                    {
                        writeLog("Error in InsertTransactionLog Res : " + errMsg);
                    }


                    string[] responseData = response.Split('~');

                    if (responseData.Count() > 1)
                    {
                        if (responseData[0].ToString() != "0")
                        {
                            writeLog("Error in cashOutOneStopContinue : " + resdecs);

                            StringBuilder sb = new StringBuilder();
                            sb.Append("<Error>");
                            sb.Append("<Version>1.0</Version>");
                            sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            sb.Append("<ResCode>" + responseData[0].ToString() + "</ResCode>");
                            sb.Append("<ResDesc>" + responseData[1].ToString() + "</ResDesc>");
                            sb.Append("</Error>");
                            writeLog("RES XML : " + sb.ToString());
                            if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                            {
                                writeLog("Error in updateError : " + errMsg);
                            }
                            return sb.ToString();

                        }
                        else
                        {
                            rescode = "00";

                            amt = double.Parse(amount) - oneStopFeeDbl;

                            if (isAgreement == "N")
                            {
                                bool isOKAddFund = false;
                                double avalBal = 0;
                                double ledeBal = 0;
                                int agentIDPlus = 0;
                                string agentNamePlus = String.Empty;
                                DataSet dsAgnt = new DataSet();
                                if (!_agentWCF.getAgentNameByAgentCode(out dsAgnt, out errmsg, agentCode))
                                {
                                    writeLog("Error in getAgentNameByAgentCode : " + errmsg);
                                }
                                if (dsAgnt.Tables[0].Rows.Count > 0)
                                {
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                                    agentIDPlus = int.Parse(dsAgnt.Tables[0].Rows[0]["AGENTID"].ToString());
                                    agentNamePlus = dsAgnt.Tables[0].Rows[0]["AGENTNAME"].ToString();                                  
                                    if (_agentWCF.addFund2OneStopPlus(out avalBal, out ledeBal, out errMsg, agentIDPlus, amt))
                                    {
                                        isOKAddFund = true;
                                        writeLog("After addFund = AgentIDPlus : " + agentIDPlus.ToString() + " |Topuped Amount :" + amt.ToString() + "| AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                    }
                                    else
                                    {

                                    }
                                    {
                                        writeLog("Error in addFund2OneStopPlus : " + errMsg);
                                    }
                                    if (isOKAddFund)
                                    {
                                        string topupfee = "0";
                                        if (!_agentWCF.insertAgentTopupBy1Stop(out errMsg, amt, agentIDPlus, agentUserUniqueID, "AP", "1-Stop+", txnID,
                                                agentCode, mobileNo, topupfee, agentNamePlus))
                                        {
                                            writeLog("Error in insertAgentTopupBy1Stop : " + errMsg);
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if (rescode != "00")
                    {
                        StringBuilder sb = new StringBuilder();
                        sb.Append("<ConfirmRes>");
                        sb.Append("<Version>1.0</Version>");
                        sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                        sb.Append("<MessageID>" + messageid + "</MessageID>");
                        sb.Append("<BillerName>" + billerName + "</BillerName>");
                        sb.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                        sb.Append("<ResCode>" + rescode + "</ResCode>");
                        sb.Append("<ResDesc>" + resdecs + "</ResDesc>");
                        sb.Append("<Ref1>" + ref1 + "</Ref1>");
                        sb.Append("<Ref2>" + ref2 + "</Ref2>");
                        sb.Append("<Ref3>" + ref3 + "</Ref3>");
                        sb.Append("<Ref4>" + ref4 + "</Ref4>");
                        sb.Append("<Ref5>" + mobileNo + "</Ref5>");
                        sb.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                        sb.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                        sb.Append("<Ref3Name>" + "" + "</Ref3Name>");
                        sb.Append("<Ref4Name>" + ref3Name + "</Ref4Name>");
                        sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                        sb.Append("<BatchID>" + batchid + "</BatchID>");
                        sb.Append("<Balance>" + availablebalance + "</Balance>");
                        sb.Append("<TxnID>" + txnID + "</TxnID>");
                        sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                        sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                        sb.Append("<SMS>" + smsMsg + "</SMS>");
                        sb.Append("</ConfirmRes>");
                        writeLog("RES XML : " + sb.ToString());
                        if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                        {
                            writeLog("Error in updateError : " + errMsg);
                        }
                        return sb.ToString();
                    }
                    else
                    {
                        writeLog("***************Enter Confirm Update *******************");

                        string myKyattxnid = string.Empty;

                        if (responseData.Count() > 1)

                            myKyattxnid = responseData[1].ToString();
                       
                        if (!_agentWCF.ConfirmUpdateCashOut(out  errMsg, out  batchID, out  availablebalance, out  ledgerbalance, txnID,
                                 myKyattxnid, ref4, ref3, "", mobileNo, "", "CO", "Cash Out Successfully", agentID, email,
                                 amt, agentFeeDbl, isAgreement, smsStatus))
                        {
                            writeLog("Error in ConfirmUpdate : " + errMsg);
                        }
                        else
                        {
                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                        }
                      
                        if (appType == "CS" || appType == "MS")
                        {
                            SMSHelper smsH = new SMSHelper();
                            smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();

                            smsMsg = smsH.getMessageBiller(agentName, taxID, billerName, "Pickup Code", "", "", "Ref", ref3, "", "", txnID.ToString(),
                                double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);


                            try
                            {
                                writeLog("sendSMSWithTxnID starts.");
                                // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                writeLog("sendSMSWithTxnID ends.");
                            }
                            catch (Exception ex)
                            {
                            }
                        }


                        StringBuilder sb = new StringBuilder();
                        sb.Append("<ConfirmRes>");
                        sb.Append("<Version>1.0</Version>");
                        sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                        sb.Append("<MessageID>" + messageid + "</MessageID>");
                        sb.Append("<BillerName>" + billerName + "</BillerName>");
                        sb.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                        sb.Append("<ResCode>00</ResCode>");
                        sb.Append("<ResDesc>Success</ResDesc>");
                        sb.Append("<Ref1></Ref1>");
                        sb.Append("<Ref2></Ref2>");
                        sb.Append("<Ref3>" + ref3 + "</Ref3>");
                        sb.Append("<Ref4></Ref4>");
                        sb.Append("<Ref5>" + mobileNo + "</Ref5>");
                        sb.Append("<Ref1Name></Ref1Name>");
                        sb.Append("<Ref2Name></Ref2Name>");
                        sb.Append("<Ref3Name>Pickup Code</Ref3Name>");
                        sb.Append("<Ref4Name></Ref4Name>");
                        sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                        sb.Append("<BatchID>" + batchid + "</BatchID>");
                        sb.Append("<Balance>" + availablebalance + "</Balance>");
                        sb.Append("<TxnID>" + txnID + "</TxnID>");
                        sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                        sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                        sb.Append("<SMS>" + smsMsg + "</SMS>");
                        sb.Append("</ConfirmRes>");
                        writeLog("RES XML : " + sb.ToString());
                        return sb.ToString();


                    }
                }
                */
                    #endregion

                    #region <-- MyKyatremittanceContinue -->
                    /*
                if (taxID == "0000000000027")
                {

                    writeLog("This is MyKyat remittanceContinue");
                    int batchid = 0;
                    double availablebalance = 0;
                    double ledgerbalance = 0;
                    string agnid = string.Empty;
                    mobileNo = ref5;

                    RouteAPI api_service = new RouteAPI();

                    StringBuilder signatureString = new StringBuilder();

                    string agnref = string.Empty;
                    // string digitalcodedesc = string.Empty;

                    writeLog("signatureString : " + ref2 + ref5 + amount + ref4 + ref3 + imgnrc); // imgnrc= ref6
                    signatureString.Append(ref2);
                    signatureString.Append("~");
                    signatureString.Append(ref5); //payeeMobile
                    signatureString.Append("~");
                    signatureString.Append("MMK");
                    signatureString.Append("~");
                    signatureString.Append(amount);
                    signatureString.Append("~");
                    signatureString.Append(ref4);//message
                    signatureString.Append("~");
                    signatureString.Append(ref3); //payerMobile
                    signatureString.Append("~");
                    string[] payer = imgnrc.Split('-');//payerDisplayName-payerIdentityValue-payerAddress // imgnrc=ref6
                    string payerDisplayName = payer[0].ToString();
                    string payerIdentityValue = payer[1].ToString();
                    string payerAddress = payer[2].ToString();
                    signatureString.Append(payerDisplayName);
                    signatureString.Append("~");
                    signatureString.Append(payerIdentityValue);
                    signatureString.Append("~");
                    signatureString.Append(payerAddress);
                    signatureString.Append("~");

                    writeLog("signatureString : " + signatureString.ToString());

                    if (!_agentWCF.InsertTransactionLog(out errMsg, txnID, "ConfirmReq", signatureString.ToString()))
                    {
                        writeLog("Error in InsertTransactionLog Req : " + errMsg);
                    }
                    if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                    {
                        #region if Simulator is on
                        writeLog("Simulator Y");

                        StringBuilder sb = new StringBuilder();


                        string testpin = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                        string time = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                        string expirys = System.DateTime.Now.ToShortDateString();

                        // string lowercasehash = hash.ToLower();
                        sb.Append("<ConfirmRes>");
                        sb.Append("<Version>1.0</Version>");
                        sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                        sb.Append("<MessageID>" + messageid + "</MessageID>");
                        sb.Append("<BillerName>" + billerName + "</BillerName>");
                        sb.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                        sb.Append("<ResCode>" + rescode + "</ResCode>");
                        sb.Append("<ResDesc>" + resdecs + "</ResDesc>");
                        sb.Append("<Ref1></Ref1>");
                        sb.Append("<Ref2></Ref2>");
                        sb.Append("<Ref3>" + ref3 + "</Ref3>");
                        sb.Append("<Ref4>" + ref4 + "</Ref4>");
                        sb.Append("<Ref5>" + mobileNo + "</Ref5>");
                        sb.Append("<Ref1Name></Ref1Name>");
                        sb.Append("<Ref2Name></Ref2Name>");
                        sb.Append("<Ref3Name>Payer Mobile</Ref3Name>");
                        sb.Append("<Ref4Name>Message</Ref4Name>");
                        sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                        sb.Append("<BatchID>" + batchid + "</BatchID>");
                        sb.Append("<Balance>" + availablebalance + "</Balance>");
                        sb.Append("<TxnID>" + txnID + "</TxnID>");
                        sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                        sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                        sb.Append("<SMS>" + smsMsg + "</SMS>");
                        sb.Append("</ConfirmRes>");

                        response = sb.ToString();
                        // return sb.ToString();
                        rescode = "00";
                        #endregion
                    }
                    else
                    {

                        string API = string.Empty;

                        API = ConfigurationManager.AppSettings["remittanceContinue"].ToString();

                        writeLog("MyKyat remittanceContinue Req-signature string : " + signatureString.ToString());

                        api_service = new RouteAPI();

                        response = api_service.ApicallingMyKyat(API, signatureString.ToString(), 1, ref1);


                    }

                    if (!_agentWCF.InsertTransactionLog(out errMsg, txnID, "ConfirmRes", response))
                    {
                        writeLog("Error in InsertTransactionLog Res : " + errMsg);
                    }


                    string[] responseData = response.Split('~');

                    if (responseData.Count() > 1)
                    {
                        if (responseData[0].ToString() != "0")
                        {
                            writeLog("Error in remittanceContinue : " + resdecs);

                            StringBuilder sb = new StringBuilder();
                            sb.Append("<Error>");
                            sb.Append("<Version>1.0</Version>");
                            sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            sb.Append("<ResCode>" + responseData[0].ToString() + "</ResCode>");
                            sb.Append("<ResDesc>" + responseData[1].ToString() + "</ResDesc>");
                            sb.Append("</Error>");
                            writeLog("RES XML : " + sb.ToString());
                            if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                            {
                                writeLog("Error in updateError : " + errMsg);
                            }
                            return sb.ToString();

                        }
                        else
                        {
                            rescode = "00";
                        }
                    }

                    if (rescode != "00")
                    {
                        StringBuilder sb = new StringBuilder();
                        sb.Append("<ConfirmRes>");
                        sb.Append("<Version>1.0</Version>");
                        sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                        sb.Append("<MessageID>" + messageid + "</MessageID>");
                        sb.Append("<BillerName>" + billerName + "</BillerName>");
                        sb.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                        sb.Append("<ResCode>" + rescode + "</ResCode>");
                        sb.Append("<ResDesc>" + resdecs + "</ResDesc>");
                        sb.Append("<Ref1></Ref1>");
                        sb.Append("<Ref2></Ref2>");
                        sb.Append("<Ref3>" + ref3 + "</Ref3>");
                        sb.Append("<Ref4>" + ref4 + "</Ref4>");
                        sb.Append("<Ref5>" + mobileNo + "</Ref5>");
                        sb.Append("<Ref1Name></Ref1Name>");
                        sb.Append("<Ref2Name></Ref2Name>");
                        sb.Append("<Ref3Name>Payer Mobile</Ref3Name>");
                        sb.Append("<Ref4Name>Message</Ref4Name>");
                        sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                        sb.Append("<BatchID>" + batchid + "</BatchID>");
                        sb.Append("<Balance>" + availablebalance + "</Balance>");
                        sb.Append("<TxnID>" + txnID + "</TxnID>");
                        sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                        sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                        sb.Append("<SMS>" + smsMsg + "</SMS>");
                        sb.Append("</ConfirmRes>");
                        writeLog("RES XML : " + sb.ToString());
                        if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                        {
                            writeLog("Error in updateError : " + errMsg);
                        }
                        return sb.ToString();
                    }
                    else
                    {
                        writeLog("***************Enter Confirm Update *******************");

                        string myKyattxnid = string.Empty;

                        if (responseData.Count() > 1)

                            myKyattxnid = responseData[1].ToString();

                     
                        if (!_agentWCF.ConfirmUpdate(out  errMsg, out  batchID, out  availablebalance, out  ledgerbalance, txnID,
                                 myKyattxnid, ref5, payerIdentityValue, string.Empty.ToString(), ref3, "", "PA", "Paid Successfully", agentID, email,
                                 agentAmount, agentFeeDbl, isAgreement, smsStatus))
                        {
                            writeLog("Error in ConfirmUpdate : " + errMsg);
                        }
                        else
                        {
                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                        }
                        if (appType == "CS" || appType == "MS")
                        {
                            SMSHelper smsH = new SMSHelper();

                            smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();

                            smsMsg = smsH.getMessageBiller(agentName, taxID, billerName, "Payer", "", "", "Ref", payerDisplayName, "", "", txnID.ToString(),
                                double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);
                            
                            try
                            {
                                writeLog("sendSMSWithTxnID starts.");
                                // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                writeLog("Mobile No :" + ref3 + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                smsWcf.sendSmsWithTxnIdLB(ref3, smsMsg, sendername, txnID);
                                writeLog("sendSMSWithTxnID ends.");
                            }
                            catch (Exception ex)
                            {
                            }
                        }


                        StringBuilder sb = new StringBuilder();
                        sb.Append("<ConfirmRes>");
                        sb.Append("<Version>1.0</Version>");
                        sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                        sb.Append("<MessageID>" + messageid + "</MessageID>");
                        sb.Append("<BillerName>" + billerName + "</BillerName>");
                        sb.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                        sb.Append("<ResCode>00</ResCode>");
                        sb.Append("<ResDesc>Success</ResDesc>");
                        sb.Append("<Ref1>" + myKyattxnid + "</Ref1>");
                        sb.Append("<Ref2>" + ref5 + "</Ref2>");
                        sb.Append("<Ref3>" + payerIdentityValue + "</Ref3>");
                        sb.Append("<Ref4></Ref4>");
                        sb.Append("<Ref5>" + ref3 + "</Ref5>");
                        sb.Append("<Ref1Name>"+ ref1Name+"</Ref1Name>");
                        sb.Append("<Ref2Name>"+ ref2Name+"</Ref2Name>");
                        sb.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                        sb.Append("<Ref4Name></Ref4Name>");
                        sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                        sb.Append("<BatchID>" + batchid + "</BatchID>");
                        sb.Append("<Balance>" + availablebalance + "</Balance>");
                        sb.Append("<TxnID>" + txnID + "</TxnID>");
                        sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                        sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                        sb.Append("<SMS>" + smsMsg + "</SMS>");
                        sb.Append("</ConfirmRes>");
                        writeLog("RES XML : " + sb.ToString());
                        return sb.ToString();


                    }
                }
                    */
                    #endregion

                    #region <-- Legacy Music -->
                    else if (MapTaxID == "0000000000028") /////For Legacy Music
                    {
                        writeLog("This is Legacy Music.");
                        int batchid = 0;
                        //double availablebalance = 0;
                        //double ledgerbalance = 0;
                        writeLog("LegacyMusic Confirm Req : CardType" + ref1);
                        string plaintoken = ConfigurationManager.AppSettings["legacyMusicToken"].ToString();

                        string plainCount = ConfigurationManager.AppSettings["cardcount"].ToString();
                        string encryptedToken = string.Empty;
                        string encryptedcardtype = string.Empty;
                        string encryptedcount = string.Empty;
                        string encryptedcode = string.Empty;
                        string plaincode = string.Empty;
                        string rescardtype = string.Empty;
                        string restxnid = string.Empty;

                        string resretrunmessage = string.Empty;
                        string rescardcount = string.Empty;
                        bool result = false;
                        string amountToPutet = Utils.getFromOrginalTo12Digit(amount);
                        double avalbal = 0;
                        double legbal = 0;


                       if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmReq", ("cardType:" + ref1 + "|CardCount:" + plainCount),out errMsg))
                        {
                            writeLog("Error in InsertTransactionLog Req : " + errMsg);
                        }
                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            writeLog("Simulator Y");
                            StringBuilder sb = new StringBuilder();
                            plaincode = "XYZTUVWREVQWYLNI";
                            restxnid = DateTime.Now.ToString("ddMMyyy hh:mm:ss:fff");

                            string testpin = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                            string time = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                            mobileNo = ref3;
                            ref4 = plaincode + " " + DateTime.Now.AddDays(365).ToShortDateString().Trim();
                            rescode = "00";
                            writeLog("***************Enter Confirm Update *******************");

                            if (appType == "CS" || appType == "MS")
                            {
                                SMSHelper smsH = new SMSHelper();
                                smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();

                                smsMsg = smsH.getMessagelegacyMusic(agentName, MapTaxID, billerName, "PIN", "", "", "Ref", plaincode, "", "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                try
                                {
                                    writeLog("sendSMSWithTxnID starts.");
                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                    writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                    writeLog("sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {
                                }
                            }


                            if (!_agentWCF.ConfirmUpdate(txnID,
                                  ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                  agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                                {
                                    writeLog("Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }
                            StringBuilder sb1 = new StringBuilder();
                            sb1.Append("<ConfirmRes>");
                            sb1.Append("<Version>1.0</Version>");
                            sb1.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            sb1.Append("<MessageID>" + messageid + "</MessageID>");
                            sb1.Append("<BillerName>" + billerName + "</BillerName>");
                            sb1.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                            sb1.Append("<ResCode>" + rescode + "</ResCode>");
                            sb1.Append("<ResDesc>" + resdecs + "</ResDesc>");
                            sb1.Append("<Ref1>" + ref1 + "</Ref1>");
                            sb1.Append("<Ref2>" + ref2 + "</Ref2>");
                            sb1.Append("<Ref3>" + "1234567890876" + "</Ref3>");
                            sb1.Append("<Ref4>" + ref4 + "</Ref4>");
                            sb1.Append("<Ref5>" + mobileNo + "</Ref5>");
                            sb1.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                            sb1.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                            sb1.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                            sb1.Append("<Ref4Name>" + ref4Name + "</Ref4Name>");
                            sb1.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                            sb1.Append("<BatchID>" + batchid + "</BatchID>");
                            sb1.Append("<Balance>" + avalbal + "</Balance>");
                            sb1.Append("<TxnID>" + txnID + "</TxnID>");
                            sb1.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                            sb1.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                            sb1.Append("<SMS>" + smsMsg + "</SMS>");
                            sb1.Append("</ConfirmRes>");
                            writeLog("RES XML : " + sb1.ToString());
                            return sb1.ToString();





                            // return sb.ToString();
                        }
                        else
                        {

                            mobileNo = ref3;
                            legancyMusicStoreWCF.PayHereSoapClient lagency = new legancyMusicStoreWCF.PayHereSoapClient();
                            legancyMusicStoreWCF.RedeemCard redeemcard = new legancyMusicStoreWCF.RedeemCard();
                            encryptedToken = Utils.legacyEncrypt(plaintoken);
                            encryptedcardtype = Utils.legacyEncrypt(ref1.Trim());
                            encryptedcount = Utils.legacyEncrypt(plainCount);
                            writeLog("Enter Code");
                            redeemcard = lagency.GenerateMusicStoreRedeemCode(encryptedToken, encryptedcardtype, encryptedcount);

                            int listcount = redeemcard.lstcard.Length;
                            if (listcount > 0)
                            {
                                writeLog("Response TxnID :" + redeemcard.TranscationID + "|Response PIN:" + redeemcard.lstcard[0].Code.ToString() + "|response Message:" + Utils.legacyDecrypt(redeemcard.ReturnMessage));
                                ref1 = Utils.legacyDecrypt(redeemcard.CardType);
                                ref3 = Utils.legacyDecrypt(redeemcard.TranscationID);

                                rescode = Utils.legacyDecrypt(redeemcard.ReturnMessage);
                                rescardcount = Utils.legacyDecrypt(redeemcard.CardCount);


                                plaincode = Utils.legacyDecrypt(redeemcard.lstcard[0].Code.ToString());
                                ref4 = plaincode + " " + DateTime.Now.AddDays(365).ToShortDateString().Trim();
                                rescode = "00";
                                result = true;
                            }
                            else
                            {

                                resdecs = Utils.legacyDecrypt(redeemcard.ReturnMessage);
                            }
                            if (result)
                            {

                            }
                        }

                        if (!result)
                        {
                            writeLog("Error in Get LegacyCode : " + resdecs);

                            //return GeterrorResponse("05", resdecs, txnID, resdecs);

                            return GetErrorResponseWithAddBalance("05", resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                        else
                        {
                            writeLog("***************Enter Confirm Update *******************");

                            if (appType == "CS" || appType == "MS")
                            {
                                SMSHelper smsH = new SMSHelper();
                                smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();

                                smsMsg = smsH.getMessagelegacyMusic(agentName, MapTaxID, billerName, "PIN", "", "", "Ref", plaincode, "", "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                try
                                {
                                    writeLog("sendSMSWithTxnID starts.");
                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                    writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                    writeLog("sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {
                                }
                            }


                            if (!_agentWCF.ConfirmUpdate(txnID,
                                  ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                  agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);
                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }
                            StringBuilder sb = new StringBuilder();
                            sb.Append("<ConfirmRes>");
                            sb.Append("<Version>1.0</Version>");
                            sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            sb.Append("<MessageID>" + messageid + "</MessageID>");
                            sb.Append("<BillerName>" + billerName + "</BillerName>");
                            sb.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                            sb.Append("<ResCode>" + rescode + "</ResCode>");
                            sb.Append("<ResDesc>" + resdecs + "</ResDesc>");
                            sb.Append("<Ref1>" + ref1 + "</Ref1>");
                            sb.Append("<Ref2>" + ref2 + "</Ref2>");
                            sb.Append("<Ref3>" + ref3 + "</Ref3>");
                            sb.Append("<Ref4>" + ref4 + "</Ref4>");
                            sb.Append("<Ref5>" + mobileNo + "</Ref5>");
                            sb.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                            sb.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                            sb.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                            sb.Append("<Ref4Name>" + ref4Name + "</Ref4Name>");
                            sb.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");

                            sb.Append("<BatchID>" + batchid + "</BatchID>");
                            sb.Append("<Balance>" + avalbal + "</Balance>");
                            sb.Append("<TxnID>" + txnID + "</TxnID>");
                            sb.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                            sb.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                            sb.Append("<SMS>" + smsMsg + "</SMS>");
                            sb.Append("</ConfirmRes>");
                            writeLog("RES XML : " + sb.ToString());
                            return sb.ToString();


                        }
                    }
                    #endregion

                    #region <-- Vokak -->
                    else if (MapTaxID == "0000000000030")
                    {
                        double avalbal = 0;
                        double legbal = 0;
                        string cardtype = string.Empty;

                        writeLog("This is Vakok");
                        amt = double.Parse((double.Parse(ref2)).ToString("###0.00"));
                        mobileNo = ref3;
                        writeLog("TaxID :" + taxID + "| MapTaxID : " + MapTaxID + "| CardPrice :" + amt);


                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            writeLog("Simulator Y");

                            #region <-- Simulator is On -->
                            int batchid = 0;
                            //double availablebalance = 0;
                            //double ledgerbalance = 0;
                            //string errMsg = null;
                            //reqCardType = ref1;
                            //reqCardPrice = ref2;
                            mobileNo = ref3;
                            ref3 = new Random().Next(00000000, 99999999).ToString() + new Random().Next(00000000, 99999999).ToString();
                            ref4 = new Random().Next(00000000, 99999999).ToString() + new Random().Next(00000000, 99999999).ToString();
                            ref4 = ref4 + " 6/12/2016";
                            //amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));
                            if (!_agentWCF.InsertTransactionLog(txnID, "TopupReq", "Test Req",out errMsg))
                            {
                                writeLog("Error in InsertTransactionLog Req : " + errMsg);
                            }
                            if (!_agentWCF.InsertTransactionLog(txnID, "TopupRes", "Test Res",out errMsg))
                            {
                                writeLog("Error in InsertTransactionLog Res : " + errMsg);
                            }

                            //if (_agentWCF.ConfirmUpdate(out  errMsg, out  batchID, out  availablebalance, out  ledgerbalance, txnID,
                            //        ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                            //        agentAmount, agentFeeDbl, isAgreement))
                            //{
                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                    string[] words = ref4.Split(' ');
                                    string PIN = words[0].ToString();
                                    string Expiry = words[1].ToString();

                                    smsMsg = smsH.getMessageTopup(agentName, MapTaxID, billerName, PIN, ref3, Expiry, double.Parse(amount).ToString("#,###.00"), branchCode);

                                    try
                                    {
                                        writeLog("sendSMSWithTxnID starts.");
                                        smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID, sendername);
                                        writeLog("sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                    }
                                }

                            }

                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                    agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);
                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                            }


                            rescode = "00";
                            resdecs = "Success";
                            StringBuilder sbresponse = new StringBuilder();
                            sbresponse.Append("<ConfirmRes>");
                            sbresponse.Append("<Version>1.0</Version>");
                            sbresponse.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            sbresponse.Append("<TaxID>" + taxID + "</TaxID>");
                            sbresponse.Append("<Email>" + email + "</Email>");
                            sbresponse.Append("<Password>" + password + "</Password>");
                            sbresponse.Append("<MessageID>" + messageid + "</MessageID>");
                            sbresponse.Append("<BillerName>" + billerName + "</BillerName>");
                            sbresponse.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                            sbresponse.Append("<ResCode>" + rescode + "</ResCode>");
                            sbresponse.Append("<ResDesc>" + resdecs + "</ResDesc>");
                            sbresponse.Append("<Ref1>" + ref1 + "</Ref1>");
                            sbresponse.Append("<Ref2>" + ref2 + "</Ref2>");
                            sbresponse.Append("<Ref3>" + ref3 + "</Ref3>");
                            sbresponse.Append("<Ref4>" + ref4 + "</Ref4>");
                            sbresponse.Append("<Ref5>" + mobileNo + "</Ref5>");
                            sbresponse.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                            sbresponse.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                            sbresponse.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                            sbresponse.Append("<Ref4Name>" + ref4Name + "</Ref4Name>");
                            sbresponse.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                            sbresponse.Append("<BatchID>" + batchid + "</BatchID>");
                            sbresponse.Append("<Balance>" + avalbal + "</Balance>");
                            sbresponse.Append("<TxnID>" + txnID + "</TxnID>");
                            sbresponse.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                            sbresponse.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                            sbresponse.Append("<SMS>" + smsMsg + "</SMS>");
                            sbresponse.Append("</ConfirmRes>");
                            writeLog("RES XML : " + sbresponse.ToString());
                            // writeLog("TxnID:*****" + txnID);
                            return sbresponse.ToString();
                            #endregion
                        }
                        else
                        {
                            if (ConfigurationManager.AppSettings["IsVokakESBA"].ToString() == "Y")
                            {
                                #region <-- This is Easy Bill -->
                                #region <-- Initialize Variable -->
                                writeLog("$$$$$$$$$ This Is ESBA $$$$$$$$$$$$$");
                                var pinreq = new giftcardConfirmReq();
                                var pinres = new GetGiftCardPINResults();
                                var aesKey = string.Empty;
                                aesKey = ConfigurationManager.AppSettings["EsbaAesKey"].ToString();

                                if (IsTokenNullOrExpire(Token))
                                {
                                    Token = GetOAuthToken();
                                }

                                //  string cardtype =
                                pinreq.Token = Token.Token;
                                pinreq.BillerCode = "Vakok";
                                pinreq.PriceType = ref2;
                                pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                                pinreq.ChannelRefID = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                                amt = double.Parse((double.Parse(ref2)).ToString("###0.00"));
                                //   mobileNo = ref3;

                                var json_serializer1 = new JavaScriptSerializer();

                                string jsonReq = json_serializer1.Serialize(pinreq);
                                writeLog("ESBA JasonReq:" + jsonReq);
                                #endregion
                                //Request PIN To ESBA
                                string jsonres = Utils.pinRequest(jsonReq, esbGetGiftCardMethod);
                                writeLog("ESBA JasonRes:" + jsonres);
                                if (string.IsNullOrEmpty(jsonres))
                                {
                                    resdecs = "No Response From ESBA";
                                    rescode = "06";
                                    //if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                                    //{
                                    //    writeLog("Error in updateError : " + errMsg);
                                    //}
                                    //return Utils.getErrorRes(rescode, resdecs);
                                    return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                }
                                var json_serializerpinres = new JavaScriptSerializer();
                                pinres = json_serializerpinres.Deserialize<GetGiftCardPINResults>(jsonres);


                                if (pinres.GetGiftCardPINResult.TransactionStatus == "0" && !string.IsNullOrEmpty(pinres.GetGiftCardPINResult.PIN))
                                {
                                    pinres.GetGiftCardPINResult.PIN = Utils.AESDecryptText(pinres.GetGiftCardPINResult.PIN, aesKey);
                                    ref4 = pinres.GetGiftCardPINResult.PIN + " " + pinres.GetGiftCardPINResult.ExpiryDate;
                                    ref3 = pinres.GetGiftCardPINResult.SerialNumber;

                                    amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                    #region <-- Update Transaction -->
                                    if (!_agentWCF.ConfirmUpdate(txnID,
                                        ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                        agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                                    {
                                        writeLog("Error in ConfirmUpdate : " + errMsg);
                                        resdecs = "Error in update database";
                                        rescode = "06";
                                        if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                        {
                                            writeLog("Error in updateError : " + errMsg);
                                        }
                                        return Utils.getErrorRes(rescode, "Transaction fail");
                                    }
                                    else
                                    {
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                    }
                                    #endregion
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                    #region <-- Send SMS -->
                                    if (appType == "CS" || appType == "MS")
                                    {
                                        if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                        {
                                            SMSHelper smsH = new SMSHelper();
                                            smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                            string[] words = ref4.Split(' ');
                                            string PIN = words[0].ToString();
                                            string Expiry = words[1].ToString();

                                            if (MapTaxID == "0000000000002" || MapTaxID == "0000000000003" || MapTaxID == "0000000000004" || MapTaxID == "0000000000015" || MapTaxID == "0000000000016")
                                            {
                                                smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Expiry", "", "Ref", PIN, Expiry, "", txnID.ToString(),
                                                double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);
                                            }
                                            else
                                            {
                                                smsMsg = smsH.getMessageTopup(agentName, MapTaxID, billerName, PIN, ref3, Expiry, double.Parse(amount).ToString("#,###.00"), branchCode);
                                            }
                                            try
                                            {
                                                writeLog("sendSMSWithTxnID starts.");
                                                //  smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                                writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                                smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                                writeLog("sendSMSWithTxnID ends.");
                                            }
                                            catch (Exception ex)
                                            {
                                            }
                                        }
                                        else
                                        {
                                            //To Develop Airtime
                                        }
                                    }
                                    #endregion
                                    #region <-- Response Back To Client -->
                                    rescode = "00";
                                    resdecs = "Success";
                                    ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                    confirmres.taxID = taxID;
                                    confirmres.email = email;
                                    confirmres.password = password;
                                    confirmres.messageid = messageid;
                                    confirmres.billername = billerName;
                                    confirmres.billerlogo = billerLogo;
                                    confirmres.rescode = rescode;
                                    confirmres.resdesc = resdecs;
                                    confirmres.ref1 = ref1;
                                    confirmres.ref2 = ref2;
                                    confirmres.ref3 = ref3;
                                    confirmres.ref4 = ref4;
                                    confirmres.ref5 = mobileNo;
                                    confirmres.ref1Name = ref1Name;
                                    confirmres.ref2Name = ref2Name;
                                    confirmres.ref3Name = ref3Name;
                                    confirmres.ref4Name = ref4Name;
                                    confirmres.ref5Name = ref5Name;
                                    confirmres.availablebalance = availablebalance.ToString();
                                    confirmres.txnID = txnID.ToString();
                                    confirmres.TodayTxnAmount = TodayTxnAmount;
                                    confirmres.TodayTxnCount = TodayTxnCount;
                                    confirmres.smsMsg = smsMsg;

                                    return Utils.getConfirmRes(confirmres);
                                    #endregion
                                }
                                else
                                {
                                    resdecs = Utils.EsbResponseDescription(pinres.GetGiftCardPINResult.ResponseCode);
                                    return GetErrorResponseWithAddBalance(pinres.GetGiftCardPINResult.ResponseCode, "Out of Stock", txnID, resdecs, agentID, agentAmount, isAgreement);
                                }

                                #endregion
                            }
                            else
                            {
                                #region <-- GET VAKOK FROM PAYHEREDB -->

                                payhereMPTWCF.PINServiceClient mptWCF = new payhereMPTWCF.PINServiceClient();


                                writeLog("$$$$$$$$$$$$$$This Is Get Pin From MyanpayPin Table of 1Stop TELCOPON DB NOTOK $$$$$$$$$$$$$$$");
                                if (mptWCF.getVAKOKPIN(out resdecs, out ref4, out expiry, out ref3, amt, cardtype))
                                {
                                    writeLog("$$$$$$$$$$$$$$$$$ get PIN MPT FROM PAYHERE OK$$$$$$$$$$$$$$$$$$$$$");
                                    // ref2 = ref3;// ref2 is serial no to show                               
                                    //ref3 = ref4;
                                    ref4 = ref4 + " " + expiry;
                                    //double availablebalance = 0;
                                    //double ledgerbalance = 0;
                                    //string errMsg = null;
                                    // amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                    if (!_agentWCF.ConfirmUpdate(txnID,
                                      ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                      agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                                    {
                                        writeLog("Error in ConfirmUpdate : " + errMsg);
                                        resdecs = "Error in update database";
                                        rescode = "06";
                                        if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                        {
                                            writeLog("Error in updateError : " + errMsg);
                                        }
                                        return Utils.getErrorRes(rescode, "Transaction fail");
                                    }
                                    else
                                    {
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                    }

                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                    if (appType == "CS" || appType == "MS")
                                    {
                                        if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                        {
                                            SMSHelper smsH = new SMSHelper();
                                            smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                            string[] words = ref4.Split(' ');
                                            string PIN = words[0].ToString();
                                            string Expiry = words[1].ToString();

                                            smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Serial", "Expiry", "Ref", PIN, ref3, expiry, txnID.ToString(),
                                                   double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                            try
                                            {
                                                writeLog("sendSMSWithTxnID starts.");
                                                smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                                writeLog("sendSMSWithTxnID ends.");
                                            }
                                            catch (Exception ex)
                                            {
                                                writeLog("Exception was occure when send sms:" + ex.Message);
                                            }
                                        }

                                    }




                                    rescode = "00";
                                    resdecs = "Success";

                                    StringBuilder sbresponse = new StringBuilder();
                                    sbresponse.Append("<ConfirmRes>");
                                    sbresponse.Append("<Version>1.0</Version>");
                                    sbresponse.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                                    sbresponse.Append("<TaxID>" + taxID + "</TaxID>");
                                    sbresponse.Append("<Email>" + email + "</Email>");
                                    sbresponse.Append("<Password>" + password + "</Password>");
                                    sbresponse.Append("<MessageID>" + messageid + "</MessageID>");
                                    sbresponse.Append("<BillerName>" + billerName + "</BillerName>");
                                    sbresponse.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                                    sbresponse.Append("<ResCode>" + rescode + "</ResCode>");
                                    sbresponse.Append("<ResDesc>" + resdecs + "</ResDesc>");
                                    sbresponse.Append("<Ref1>" + ref1 + "</Ref1>");
                                    sbresponse.Append("<Ref2>" + ref2 + "</Ref2>");
                                    sbresponse.Append("<Ref3>" + ref3 + "</Ref3>");
                                    sbresponse.Append("<Ref4>" + ref4 + "</Ref4>");
                                    sbresponse.Append("<Ref5>" + mobileNo + "</Ref5>");
                                    sbresponse.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                                    sbresponse.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                                    sbresponse.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                                    sbresponse.Append("<Ref4Name></Ref4Name>");
                                    sbresponse.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                                    sbresponse.Append("<BatchID></BatchID>");
                                    sbresponse.Append("<Balance>" + avalbal + "</Balance>");
                                    sbresponse.Append("<TxnID>" + txnID + "</TxnID>");
                                    sbresponse.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                                    sbresponse.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                                    sbresponse.Append("<SMS>" + smsMsg + "</SMS>");
                                    sbresponse.Append("</ConfirmRes>");
                                    writeLog("RES XML : " + sbresponse.ToString());
                                    return sbresponse.ToString();

                                }
                                else
                                {
                                    writeLog("Error in getPIN of Vokak.");
                                    if (!String.IsNullOrEmpty(errmsg))
                                    {
                                        string customMessage = errmsg.ToString();
                                    }
                                    //return GeterrorResponse("06", resdecs, txnID, resdecs);

                                    return GetErrorResponseWithAddBalance("06", resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                                }
                                #endregion
                            }
                        }
                    }
                    #endregion

                    #region <-- FourTV Confirm -->
                    if (MapTaxID == "0000000000031")
                    {
                        string tempamt = string.Empty;
                        string tempname = string.Empty;
                        //double availablebalance = 0;
                        //double ledgerbalance = 0;
                        mobileNo = ref3;
                        double avalbal = 0;
                        double legbal = 0;

                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {

                            #region <-- Simulator Mode -->
                            writeLog("get 4TV Product Price List");
                            string fourTVProductPrice = ConfigurationManager.AppSettings["fourTVPrice"].ToString();//get ProductID:Price string set of 4TV.
                            writeLog("get 4TV Product Price List OK");
                            Hashtable fourTVProductPriceHt = Utils.getMerchantCodeHashtable(fourTVProductPrice);//Fatch productID and Price pair of 4TV

                            writeLog("get 4TV Product Price List");
                            string fourTVProductName = ConfigurationManager.AppSettings["fourTVProduct"].ToString();//get ProductID:Price string set of 4TV.
                            writeLog("get 4TV Product Price List OK");
                            Hashtable fourTVProductNameHt = Utils.getMerchantCodeHashtable(fourTVProductName);//Fatch productID and Price pair of 4TV


                            if (fourTVProductPriceHt.ContainsKey(fourTVproductID))
                            {
                                tempamt = fourTVProductPriceHt[fourTVproductID].ToString();
                                writeLog("productPirce" + tempamt);
                            }

                            if (fourTVProductNameHt.Contains(fourTVproductID))
                            {
                                tempname = fourTVProductNameHt[fourTVproductID].ToString();
                                ref3 = tempname;
                            }

                            ref4 = ref3.Replace(" ", "") + " " + DateTime.Now.AddDays(30).ToString("dd-MM-yyyy");
                            if (!_agentWCF.ConfirmUpdate(txnID,
                         ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                         agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                                {
                                    writeLog("Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                            }
                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                    string[] words = ref4.Split(' ');
                                    string PIN = words[0].ToString();
                                    string Expiry = words[1].ToString();

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, ref3Name, "Expiry", "Ref", ref1, ref3, Expiry, txnID.ToString(),
                                           double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                    try
                                    {
                                        writeLog("sendSMSWithTxnID starts.");
                                        smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                        writeLog("sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                        writeLog("Exception was occure when send sms:" + ex.Message);
                                    }
                                }

                            }

                            #region <-- Response Back To Client -->
                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = mobileNo;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);
                            #endregion

                            #endregion
                        }
                        else
                        {
                            #region <-- Simulater Mode Off -->
                            writeLog("get 4TV Product Price List");
                            string fourTVProductPrice = ConfigurationManager.AppSettings["fourTVPrice"].ToString();//get ProductID:Price string set of 4TV.
                            writeLog("get 4TV Product Price List OK");
                            Hashtable fourTVProductPriceHt = Utils.getMerchantCodeHashtable(fourTVProductPrice);//Fatch productID and Price pair of 4TV

                            writeLog("get 4TV Product Price List");
                            string fourTVProductName = ConfigurationManager.AppSettings["fourTVProduct"].ToString();//get ProductID:Price string set of 4TV.
                            writeLog("get 4TV Product Price List OK");
                            Hashtable fourTVProductNameHt = Utils.getMerchantCodeHashtable(fourTVProductName);//Fatch productID and Price pair of 4TV


                            if (fourTVProductPriceHt.ContainsKey(fourTVproductID))
                            {
                                tempamt = fourTVProductPriceHt[fourTVproductID].ToString();
                                writeLog("productPirce" + tempamt);
                            }

                            if (fourTVProductNameHt.Contains(fourTVproductID))
                            {
                                tempname = fourTVProductNameHt[fourTVproductID].ToString();
                                ref3 = tempname;
                            }
                            writeLog("Request amount:" + amount + "amount from Config:" + tempamt);
                            if (tempamt == amount)
                            {
                                writeLog("Amount Match");
                                string responseData = string.Empty;
                                string username = ConfigurationManager.AppSettings["fourTVUserID"].ToString();
                                string pas = ConfigurationManager.AppSettings["fourTVPass"].ToString();
                                string parameter = "username=" + username + "&password=" + pas + "&viewers_smartcard_id=" + ref1 + "&products_id=" + fourTVproductID + "&transid=" + txnID + "&amount=" + amount;
                                string url = ConfigurationManager.AppSettings["fourTVUri"].ToString();
                                writeLog("Request URL:" + url);
                                writeLog("Request Parameter:" + parameter);
                                url = url + "subscribe.php";
                                fuorTVSubscribeRes fourTVRes = new fuorTVSubscribeRes();
                                SSLPost post = new SSLPost();
                                if (post.postData(url, parameter, out responseData, out errMsg))
                                {
                                    writeLog("Response from FourTV" + responseData);
                                    JavaScriptSerializer sescriberes = new JavaScriptSerializer();
                                    fourTVRes = sescriberes.Deserialize<fuorTVSubscribeRes>(responseData);
                                    // StringBuilder sb = new StringBuilder();
                                    if (fourTVRes.status == 1)
                                    {
                                        ref4 = ref3.Replace(" ", "") + " " + fourTVRes.response.expire_date.ToString("dd-MM-yyyy");
                                        if (!_agentWCF.ConfirmUpdate(txnID,ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                     agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                        {
                                            writeLog("Error in ConfirmUpdate : " + errMsg);
                                        }
                                        else
                                        {
                                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                        }
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                        if (appType == "CS" || appType == "MS")
                                        {
                                            if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                            {
                                                SMSHelper smsH = new SMSHelper();
                                                smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                                string[] words = ref4.Split(' ');
                                                string PIN = words[0].ToString();
                                                string Expiry = words[1].ToString();

                                                smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, ref3Name, "Expiry", "Ref", ref1, ref3, Expiry, txnID.ToString(),
                                                       double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                                try
                                                {
                                                    writeLog("sendSMSWithTxnID starts.");
                                                    smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                                    writeLog("sendSMSWithTxnID ends.");
                                                }
                                                catch (Exception ex)
                                                {
                                                    writeLog("Exception was occure when send sms:" + ex.Message);
                                                }
                                            }

                                        }

                                        #region <-- Response Back To Client -->
                                        rescode = "00";
                                        resdecs = "Success";
                                        ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                        confirmres.taxID = taxID;
                                        confirmres.email = email;
                                        confirmres.password = password;
                                        confirmres.messageid = messageid;
                                        confirmres.billername = billerName;
                                        confirmres.billerlogo = billerLogo;
                                        confirmres.rescode = rescode;
                                        confirmres.resdesc = resdecs;
                                        confirmres.ref1 = ref1;
                                        confirmres.ref2 = ref2;
                                        confirmres.ref3 = ref3;
                                        confirmres.ref4 = ref4;
                                        confirmres.ref5 = mobileNo;
                                        confirmres.ref1Name = ref1Name;
                                        confirmres.ref2Name = ref2Name;
                                        confirmres.ref3Name = ref3Name;
                                        confirmres.ref5Name = ref5Name;
                                        confirmres.ref4Name = ref4Name;
                                        confirmres.availablebalance = availablebalance.ToString();
                                        confirmres.txnID = txnID.ToString();
                                        confirmres.TodayTxnAmount = TodayTxnAmount;
                                        confirmres.TodayTxnCount = TodayTxnCount;
                                        confirmres.smsMsg = smsMsg;

                                        return Utils.getConfirmRes(confirmres);
                                        #endregion

                                    }
                                    else
                                    {
                                        //return GeterrorResponse("06", "Topup Fail!", txnID, fourTVRes.message);

                                        return GetErrorResponseWithAddBalance("06", "Topup Fail!", txnID, fourTVRes.message, agentID, agentAmount, isAgreement);
                                    }


                                }
                                else
                                {
                                    //writeLog("Error Posting To 4TV:" + errMsg);
                                    //return GeterrorResponse("06", "System Busy!", txnID, "Cannot Post!");

                                    writeLog("Error Posting To 4TV:" + errMsg);
                                    return GetErrorResponseWithAddBalance("06", "System Busy!", txnID, "Cannot Post!", agentID, agentAmount, isAgreement);
                                }
                            }
                            else
                            {
                                writeLog("Amount Miss match");
                                return GeterrorResponse("06", "Invalid Amount", txnID, "Invalid amount");
                            }



                            #endregion
                        }
                    }


                    #endregion

                    #region 


                    #endregion

                    #region <-- 123RemitCashIn -->

                    if (MapTaxID == "0000000000032")
                    {

                        writeLog("This is 123 Remit CashIn");
                        int batchid = 0;
                        //double availablebalance = 0;
                        //double ledgerbalance = 0;
                        string agnid = string.Empty;
                        string BranchId = string.Empty;
                        mobileNo = ref5;
                        writeLog(mobileNo);
                        double avalbal = 0;
                        double legbal = 0;

                        RouteAPI api_service = new RouteAPI();
                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }

                        CashInConfirmRequest cashinRequest = new CashInConfirmRequest();
                        CashInConfirmResponse cashinResponse = new CashInConfirmResponse();
                        cashinRequest.Channel = ConfigurationManager.AppSettings["123RemitChannelCode"].ToString();
                        cashinRequest.Token = Token.Token;
                        cashinRequest.Amount = amount;
                        string[] txninfo = imgnrc.Split('-'); // for ref6
                        cashinRequest.TxnRef = txninfo[0].ToString();
                        string PaidBy = txninfo[1].ToString();
                        BranchId = txninfo[2].ToString();
                        cashinRequest.OrderId = txnID.ToString();
                        if (ht.ContainsKey("Ref5"))
                        {
                            cashinRequest.PayerMobileNumber = ht["Ref5"].ToString();
                        }
                        else cashinRequest.PayerMobileNumber = string.Empty;

                        var json_serializer1 = new JavaScriptSerializer();

                        string jsonReq = json_serializer1.Serialize(cashinRequest);

                        writeLog("123 Remit CashIn request:" + jsonReq);

                        if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmReq", jsonReq,out errMsg))
                        {
                            writeLog("Error in InsertTransactionLog Req : " + errMsg);
                        }

                        //serviceFeeDbl = Utils.getFee(double.Parse(amount), float.Parse(servicePercent), double.Parse(serviceFlatFee));//double.Parse((double.Parse(agentFee)).ToString("#,##0.00"));
                        //serviceFee = serviceFeeDbl.ToString("###0.00");

                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            #region <-- If Simulator is on -->
                            writeLog("Simulator Y");
                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                            status = "PA";
                            ConfirmResponseModel responseCashIn = new ConfirmResponseModel();
                            responseCashIn.version = "1.0";
                            responseCashIn.timestamp = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                            responseCashIn.email = email;
                            responseCashIn.password = password;
                            responseCashIn.taxID = taxID;
                            responseCashIn.txnID = txnID.ToString();
                            responseCashIn.TodayTxnAmount = TodayTxnAmount;
                            responseCashIn.TodayTxnCount = TodayTxnCount;
                            responseCashIn.availablebalance = availablebalance.ToString();
                            responseCashIn.billername = agentName;
                            responseCashIn.billerlogo = billerLogo;
                            string responseXML = Utils.getConfirmRes(responseCashIn);
                            writeLog("RES XML : " + responseXML);

                            #endregion
                        }
                        else
                        {


                            string API = ConfigurationManager.AppSettings["123RemitCashInConfirmUrl"].ToString();

                            string cashinResponseJson = SSLPost.SendRequestJson(jsonReq, API);

                            var json_serializerpinres = new JavaScriptSerializer();

                            GetConfirmCashInResult CashInConfirmResult = json_serializerpinres.Deserialize<GetConfirmCashInResult>(cashinResponseJson);

                            cashinResponse = CashInConfirmResult.ConfirmCashInResult;

                            writeLog("123 Remit CashIn Confirm response:" + cashinResponseJson);

                            if (cashinResponse.ResponseCode != "0")
                            {
                                ErrorResponse errResponse = new ErrorResponse();
                                errResponse.ResCode = cashinResponse.ResponseCode;
                                errResponse.ResDesc = VerificationRemittanceResponse.VerifyResponse(Convert.ToInt16(cashinResponse.ResponseCode));

                                //string apiResponse = GeterrorResponse(errResponse.ResCode, errResponse.ResDesc, txnID, errResponse.ResDesc);
                                //writeLog("RES XML : " + apiResponse);
                                //return apiResponse;

                                string apiResponse = GetErrorResponseWithAddBalance(errResponse.ResCode, errResponse.ResDesc, txnID, errResponse.ResDesc, agentID, agentAmount, isAgreement);
                                return apiResponse;

                            }
                            else
                            {
                                cashinResponse = DecryptionResponse.DecryptCashinInConfirmResponse(cashinResponse);

                                status = "AP";

                                rescode = "00";
                            }

                            if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmRes", cashinResponseJson,out errMsg))
                            {
                                writeLog("Error in InsertTransactionLog Res : " + errMsg);
                            }

                        }



                        if (rescode != "00")
                        {
                            ConfirmResponseModel confirmResponse = new ConfirmResponseModel();

                            confirmResponse.billername = billerName;
                            confirmResponse.billerlogo = billerLogo;
                            confirmResponse.rescode = cashinResponse.ResponseCode;
                            confirmResponse.resdesc = "System Error";
                            confirmResponse.taxID = taxID;
                            confirmResponse.ref1 = ref1;
                            confirmResponse.ref2 = ref2;
                            confirmResponse.ref3 = ref3;
                            confirmResponse.ref4 = ref4;
                            confirmResponse.ref5 = ref5;
                            confirmResponse.ref1Name = ref1Name;
                            confirmResponse.ref2Name = ref2Name;
                            confirmResponse.ref3Name = ref3Name;
                            confirmResponse.ref4Name = ref4Name;
                            confirmResponse.ref5Name = ref5Name;
                            confirmResponse.TodayTxnAmount = TodayTxnAmount;
                            confirmResponse.TodayTxnCount = TodayTxnCount;
                            confirmResponse.txnID = txnID.ToString();
                            confirmResponse.availablebalance = availablebalance.ToString();
                            string confirmRes = Utils.getConfirmRes(confirmResponse);
                            writeLog("RES XML : " + confirmRes);
                            if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                            {
                                writeLog("Error in updateError : " + errMsg);
                            }
                            return confirmRes;
                        }
                        else
                        {
                            writeLog("***************Enter Confirm Update *******************");

                            agentAmount = Convert.ToDouble(OneTwoThreeRemit.GetPartnerAmount(Convert.ToDecimal(serviceFeeDbl - oneStopFeeDbl + agentFeeDbl), Convert.ToDecimal(agentFee), Convert.ToDecimal(amount), 1));


                            if (!_agentWCF.ConfirmUpdate(txnID,cashinResponse.TxnRef + "-" + PaidBy, ref1, ref2, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                     agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);
                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }
                            if (appType == "CS" || appType == "MS")
                            {
                                SMSHelper smsH = new SMSHelper();

                                smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                decimal TotalAmountFor123Remit = Convert.ToDecimal(ServiceFeeFor123Remit) + Convert.ToDecimal(amount);
                                smsMsg = smsH.getMessageBiller(agentName, taxID, billerName, "Payer Name", "", "", "", ref1, "", "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), ServiceFeeFor123Remit, TotalAmountFor123Remit.ToString("#,##0.00"), branchCode);

                                try
                                {
                                    writeLog("sendSMSWithTxnID starts.");
                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                    writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);

                                    writeLog("sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {

                                }
                            }

                            #region <-- Notification -->
                            DataSet dsUser = new DataSet();
                            if (!_agentWCF.InsertRemittanceNotification(Convert.ToInt64(cashinResponse.TxnRef), Convert.ToDecimal(amount), Convert.ToInt32(BranchId), 1,out errmsg))
                            {
                                writeLog("Error in InsertRemittanceNotification" + errmsg);
                            }
                            //if (appType == "CS" || appType == "MS")
                            //{
                            _agentWCF.GetPartnerUserListByBranchCode(Convert.ToInt32(BranchId),out dsUser, out errmsg);
                            pushNotiWCF.ServiceClient _notiservice = new pushNotiWCF.ServiceClient();
                            DataTable dtUser = dsUser.Tables[0];
                            string devicetoken = string.Empty;
                            string message = string.Empty;
                            string BranchName = dtUser.Rows[0]["AGENTBRANCHNAME"].ToString();
                            for (int i = 0; i < dtUser.Rows.Count; i++)
                            {
                                if (dtUser.Rows[i]["LOGINDEVICE"].ToString() == "M")
                                {
                                    devicetoken = dtUser.Rows[i]["DEVICETOKEN"].ToString();
                                    message = Get123RemitNotificationMessage(Convert.ToDecimal(amount), BranchName, cashinResponse.TxnRef, "CashIn");
                                    _notiservice.PushToAndroid(devicetoken, message, out errmsg);
                                }
                            }
                            //}
                            #endregion
                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                            ConfirmResponseModel confirmResponse = new ConfirmResponseModel();
                            confirmResponse.rescode = "00";
                            confirmResponse.resdesc = "Success";
                            confirmResponse.email = email;
                            confirmResponse.password = password;
                            confirmResponse.messageid = messageid;
                            confirmResponse.taxID = taxID;
                            confirmResponse.billername = billerName;
                            confirmResponse.billerlogo = billerLogo;
                            confirmResponse.ref1 = ref1;
                            confirmResponse.ref2 = ref2;
                            confirmResponse.ref3 = ref3;
                            confirmResponse.ref4 = ref4;
                            confirmResponse.ref5 = ref5;
                            confirmResponse.ref1Name = "Payer Name";
                            confirmResponse.ref2Name = "Payee Name";
                            //confirmResponse.Ref3Name = "Payee Mobile";
                            confirmResponse.ref3Name = "";
                            confirmResponse.ref4Name = "Payee NRC";
                            confirmResponse.ref5Name = "Mobile No";
                            confirmResponse.batchID = string.Empty;
                            confirmResponse.availablebalance = availablebalance.ToString();
                            confirmResponse.txnID = txnID.ToString();
                            confirmResponse.TodayTxnCount = TodayTxnCount;
                            confirmResponse.TodayTxnAmount = TodayTxnAmount;
                            confirmResponse.smsMsg = smsMsg;
                            string confirmRes = Utils.getConfirmRes(confirmResponse);
                            writeLog("RES XML : " + confirmRes);
                            return confirmRes;


                        }
                    }

                    #endregion

                    #region <-- 123RemitCashOut -->

                    if (MapTaxID == "0000000000033")
                    {

                        writeLog("This is 123 Remit CashOut");
                        int batchid = 0;
                        //double availablebalance = 0;
                        //double ledgerbalance = 0;
                        string agnid = string.Empty;
                        mobileNo = ref5;
                        writeLog(mobileNo);
                        double avalbal = 0;
                        double legbal = 0;

                        RouteAPI api_service = new RouteAPI();
                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }

                        DataSet dsAgent = null;
                        string agentBranchCode = string.Empty;
                        string agentDivision = string.Empty;
                        string agentTownship = string.Empty;


                        if (_agentWCF.checkAgentInfoforCashOut(agentID, email,out dsAgent, out errmsg))
                        {
                            if (dsAgent.Tables[0].Rows.Count > 0)
                            {
                                agentBranchCode = dsAgent.Tables[0].Rows[0]["AGENTBRANCHID"].ToString();
                                agentDivision = dsAgent.Tables[0].Rows[0]["Division"].ToString();
                                agentTownship = dsAgent.Tables[0].Rows[0]["Township"].ToString();
                            }
                        }

                        CashOutConfirmRequest cashoutRequest = new CashOutConfirmRequest();

                        cashoutRequest.Channel = ConfigurationManager.AppSettings["123RemitChannelCode"].ToString();
                        cashoutRequest.Amount = amount;
                        cashoutRequest.Token = Token.Token;
                        cashoutRequest.BranchCode = agentBranchCode;
                        cashoutRequest.DivisionID = agentDivision;
                        cashoutRequest.TownshipID = agentTownship;


                        ref6 = imgnrc;
                        string[] strTxn = ref6.Split('-');
                        cashoutRequest.TxnRef = strTxn[0].ToString();
                        cashoutRequest.DigitalCode = strTxn[1].ToString();
                        string PaidBy = strTxn[2].ToString();
                        var json_serializer1 = new JavaScriptSerializer();

                        string jsonReq = json_serializer1.Serialize(cashoutRequest);

                        writeLog("123 Remit CashOut request:" + jsonReq);

                        if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmReq", jsonReq,out errMsg))
                        {
                            writeLog("Error in InsertTransactionLog Req : " + errMsg);
                        }

                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {

                            #region <-- If Simulator is on -->
                            writeLog("Simulator Y");

                            status = "PA";
                            ConfirmResponseModel responseCashIn = new ConfirmResponseModel();
                            responseCashIn.version = "1.0";
                            responseCashIn.timestamp = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                            responseCashIn.billername = agentName;
                            responseCashIn.billerlogo = billerLogo;
                            string responseXML = Utils.getConfirmRes(responseCashIn);
                            writeLog("RES XML : " + responseXML);

                            rescode = "00";

                            #endregion
                        }
                        else
                        {

                            string API = ConfigurationManager.AppSettings["123RemitCashOutConfirmUrl"].ToString();

                            string cashoutResponseJson = SSLPost.SendRequestJson(jsonReq, API);

                            var json_serializerpinres = new JavaScriptSerializer();

                            GetConfrimCashOutResult ConfirmCashOutResult = json_serializerpinres.Deserialize<GetConfrimCashOutResult>(cashoutResponseJson);

                            CashOutConfirmResponse cashoutResponse = ConfirmCashOutResult.ConfrimCashOutResult;

                            writeLog("123 Remit CashIn Confirm response:" + cashoutResponseJson);

                            if (cashoutResponse.ResponseCode != "0")
                            {
                                ErrorResponse errResponse = new ErrorResponse();

                                errResponse.Version = "1.0";
                                errResponse.TimeStamp = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                                errResponse.ResCode = cashoutResponse.ResponseCode;
                                errResponse.ResDesc = VerificationRemittanceResponse.VerifyResponse(Convert.ToInt16(cashoutResponse.ResponseCode));
                                string apiResponse = GeterrorResponse(errResponse.ResCode, errResponse.ResDesc, txnID, errResponse.ResDesc); //APIResponse.GetErrorResponse(errResponse);

                                return apiResponse;

                            }
                            else
                            {
                                cashoutResponse = DecryptionResponse.DecryptCashOutConfirmResponse(cashoutResponse);

                                status = "AP";

                                rescode = "00";

                                agentAmount = Convert.ToDouble(OneTwoThreeRemit.GetPartnerAmount(Convert.ToDecimal(serviceFeeDbl - oneStopFeeDbl + agentFeeDbl), Convert.ToDecimal(agentFee), Convert.ToDecimal(amount), 2));

                                if (isAgreement == "N")
                                {
                                    bool isOKAddFund = false;
                                    double avalBal = 0;
                                    double ledeBal = 0;
                                    int agentIDPlus = 0;
                                    string agentNamePlus = String.Empty;
                                    DataSet dsAgnt = new DataSet();
                                    if (!_agentWCF.getAgentNameByAgentCode(agentCode,out dsAgnt, out errmsg))
                                    {
                                        writeLog("Error in getAgentNameByAgentCode : " + errmsg);
                                    }
                                    if (dsAgnt.Tables[0].Rows.Count > 0)
                                    {
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                                        agentIDPlus = int.Parse(dsAgnt.Tables[0].Rows[0]["AGENTID"].ToString());
                                        agentNamePlus = dsAgnt.Tables[0].Rows[0]["AGENTNAME"].ToString();

                                        if (_agentWCF.addFund2OneStopPlus(agentIDPlus, agentAmount,out avalBal, out ledeBal, out errMsg))
                                        {
                                            isOKAddFund = true;
                                            writeLog("After addFund = AgentIDPlus : " + agentIDPlus.ToString() + " |Topuped Amount :" + agentAmount.ToString() + "| AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                        }
                                        else
                                        {
                                            writeLog("Error in add fund to @Post plus : " + errMsg);
                                        }

                                        if (isOKAddFund)
                                        {
                                            string topupfee = "0";
                                            if (!_agentWCF.insertAgentTopupBy1Stop(agentAmount, agentIDPlus, agentUserUniqueID, "AP", "@Post+", txnID,
                                                    agentCode, mobileNo, topupfee, agentNamePlus,out errMsg))
                                            {
                                                writeLog("Error in insertAgentTopupBy1Stop : " + errMsg);
                                            }
                                            else
                                            {
                                                Task.Factory.StartNew(() => _fraudWCF.CheckReceiver(agentIDPlus, decimal.Parse(amt.ToString()), billerName, txnID.ToString()));

                                            }
                                        }
                                    }
                                }
                            }

                            if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmRes", cashoutResponseJson,out errMsg))
                            {
                                writeLog("Error in InsertTransactionLog Res : " + errMsg);
                            }
                        }



                        if (rescode != "00")
                        {
                            ConfirmResponseModel confirmResponse = new ConfirmResponseModel();
                            confirmResponse.taxID = taxID;
                            confirmResponse.billername = billerName;
                            confirmResponse.billerlogo = billerLogo;
                            confirmResponse.rescode = "99";
                            confirmResponse.resdesc = "System Error";
                            confirmResponse.ref1 = ref1;
                            confirmResponse.ref2 = ref2;
                            confirmResponse.ref3 = ref3;
                            confirmResponse.ref4 = ref4;
                            confirmResponse.ref5 = ref5;
                            confirmResponse.ref1Name = ref1Name;
                            confirmResponse.ref2Name = ref2Name;
                            confirmResponse.ref3Name = ref3Name;
                            confirmResponse.ref4Name = ref4Name;
                            confirmResponse.ref5Name = ref5Name;
                            string confirmRes = Utils.getConfirmRes(confirmResponse);

                            if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                            {
                                writeLog("Error in updateError : " + errMsg);
                            }
                            return confirmRes;
                        }
                        else
                        {
                            writeLog("***************Enter Confirm Update *******************");



                            if (!_agentWCF.ConfirmUpdateCashOut(txnID,
                                     cashoutRequest.TxnRef + "-" + PaidBy, ref3, ref4, cashoutRequest.DigitalCode, mobileNo, "", "CO", "Cash Out Successfully", agentID, email,
                                     agentAmount, agentFeeDbl, isAgreement, smsStatus,out  errMsg, out  batchID, out  avalbal, out  ledgerbalance))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);
                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }
                            #region <-- Notification -->

                            DataSet dsUser = new DataSet();
                            DataSet dsBranch = new DataSet();

                            if (_agentWCF.GetRemittanceNotification(Convert.ToInt64(cashoutRequest.TxnRef), 1,out dsBranch, out errmsg))
                            {
                                if (dsBranch != null)
                                {
                                    int destinationBranchID = Convert.ToInt32(dsBranch.Tables[0].Rows[0]["BranchID"].ToString());

                                    if (Convert.ToInt32(dsBranch.Tables[0].Rows[0]["AGENTID"].ToString()) == agentID && dsBranch.Tables[0].Rows[0]["AGENTBRANCHCODE"].ToString() == branchCode) // destination branch and cash out branch is different
                                    {

                                        if (!_agentWCF.UpdateRemittanceNotification(Convert.ToInt64(cashoutRequest.TxnRef), destinationBranchID, 2,out errmsg))
                                        {
                                            writeLog("Error in UpdateRemittanceNotification" + errmsg);
                                        }

                                    }
                                    else
                                    {
                                        DataSet dsUserCashOut = new DataSet();

                                        _agentWCF.GetBranchByUserID(email,out dsUserCashOut, out errmsg);
                                        int CashOutbranchID = Convert.ToInt32(dsUserCashOut.Tables[0].Rows[0]["AGENTBRANCHID"].ToString());
                                        _agentWCF.GetPartnerUserListByBranchCode(destinationBranchID,out dsUser, out errmsg);
                                        pushNotiWCF.ServiceClient _notiservice = new pushNotiWCF.ServiceClient();
                                        DataTable dtUser = dsUser.Tables[0];
                                        string devicetoken = string.Empty;
                                        string message = string.Empty;
                                        string BranchName = dtUser.Rows[0]["AGENTBRANCHNAME"].ToString();
                                        for (int i = 0; i < dtUser.Rows.Count; i++)
                                        {
                                            if (dtUser.Rows[i]["LOGINDEVICE"].ToString() == "M")
                                            {
                                                devicetoken = dtUser.Rows[i]["DEVICETOKEN"].ToString();
                                                message = Get123RemitNotificationMessage(Convert.ToDecimal(amount), BranchName, cashoutRequest.TxnRef, "Cancel");
                                                _notiservice.PushToAndroid(devicetoken, message, out errmsg);
                                            }
                                        }
                                        //to cancel 
                                        if (!_agentWCF.UpdateRemittanceNotification(Convert.ToInt64(cashoutRequest.TxnRef), destinationBranchID, 3,out errmsg))
                                        {
                                            writeLog("Error in UpdateRemittanceNotification for cancellation " + errmsg + branchCode);
                                        }
                                        // to update cash out status
                                        if (!_agentWCF.InsertRemittanceNotification(Convert.ToInt64(cashoutRequest.TxnRef), Convert.ToDecimal(amount), CashOutbranchID, 2,out errmsg))
                                        {
                                            writeLog("Error in InsertRemittanceNotification" + errmsg);
                                        }

                                    }
                                }
                            }
                            #endregion

                            if (appType == "CS" || appType == "MS")
                            {
                                SMSHelper smsH = new SMSHelper();

                                smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                decimal TotalAmountFor123Remit = Convert.ToDecimal(amount) - Convert.ToDecimal(ServiceFeeFor123Remit);
                                smsMsg = smsH.getMessageBiller(agentName, taxID, billerName, "Payee Name", "", "", "", ref3, "", "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), ServiceFeeFor123Remit, TotalAmountFor123Remit.ToString("#,##0.00"), branchCode);

                                try
                                {
                                    writeLog("sendSMSWithTxnID starts.");
                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                    writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);

                                    writeLog("sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {
                                }
                            }
                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                            ConfirmResponseModel confirmResponse = new ConfirmResponseModel();
                            confirmResponse.taxID = taxID;
                            confirmResponse.rescode = "00";
                            confirmResponse.resdesc = "Success";
                            confirmResponse.billername = billerName;
                            confirmResponse.billerlogo = billerLogo;
                            confirmResponse.ref1 = string.Empty;
                            confirmResponse.ref2 = ref3;
                            confirmResponse.ref3 = ref4;
                            confirmResponse.ref4 = cashoutRequest.DigitalCode;
                            confirmResponse.ref5 = mobileNo;
                            confirmResponse.ref1Name = string.Empty;
                            confirmResponse.ref2Name = "Payee Name";
                            confirmResponse.ref3Name = "Payee NRC";
                            confirmResponse.ref4Name = "Remittance Code";
                            confirmResponse.ref5Name = "Mobile No";
                            confirmResponse.batchID = string.Empty;
                            confirmResponse.availablebalance = availablebalance.ToString();
                            confirmResponse.txnID = txnID.ToString();
                            confirmResponse.TodayTxnCount = TodayTxnCount;
                            confirmResponse.TodayTxnAmount = TodayTxnAmount;
                            confirmResponse.smsMsg = smsMsg;
                            string confirmRes = Utils.getConfirmRes(confirmResponse);
                            return confirmRes;

                        }
                    }

                    #endregion

                    #region <-- Zala by Tz 12-Dec-2016 -->
                    else if (MapTaxID == "0000000000050") /////For Zala
                    {
                        writeLog("This is Zala.");
                        int batchid = 0;
                        //double availablebalance = 0;
                        //double ledgerbalance = 0;
                        StringBuilder sb = new StringBuilder();
                        // string hashstr = Utils.hashstrConfirm(version, ts, "", inquirytype, ref1, ref2, amount, locLongitude, locLatitude); 
                        double avalbal = 0;
                        double legbal = 0;

                        if (!_agentWCF.InsertTransactionLog(txnID, "ConfirmReq", reqXml,out errMsg))
                        {
                            writeLog("Error in InsertTransactionLog Req : " + errMsg);
                        }

                        Hashtable htt = Utils.getHTableFromXML(reqXml);
                        //writeLog("OneStop+ Confirm Res : " + reqXml);
                        if (!IsValidateConfirmReqOneStop(htt, out rescode, out resdecs, out version, out messageid, out ref1, out ref3))
                        {
                            //return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                        else
                        {
                            bool isOKAddFund = false;
                            // ref4 = txnID.ToString();
                            mobileNo = ref3;
                            DataSet dsAgnt;
                            if (!_agentWCF.getAgentNameByAgentCode(ref1,out dsAgnt, out errmsg))//Ref1 is agentCode
                            {
                                writeLog("Error in getAgentNameByAgentCode : " + errmsg);
                            }
                            if (dsAgnt.Tables[0].Rows.Count > 0)
                            {
                                if (dsAgnt.Tables[0].Rows[0]["AGREEMENTTYPE"].ToString() != "Y")
                                {


                                    if (dsAgnt.Tables[1].Rows.Count > 0)
                                    {
                                        DeviceToken = (dsAgnt.Tables[1].Rows[0]["DEVICETOKEN"] == DBNull.Value ? string.Empty : dsAgnt.Tables[1].Rows[0]["DEVICETOKEN"].ToString());
                                        DeviceInfo = (dsAgnt.Tables[1].Rows[0]["DEVICEINFO"] == DBNull.Value ? string.Empty : dsAgnt.Tables[1].Rows[0]["DEVICEINFO"].ToString());

                                        writeLog("Device Token:" + DeviceToken + "Device Info" + DeviceInfo);
                                    }
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                    int agentIDPlus = 0;
                                    string agentNamePlus = "";
                                    agentIDPlus = int.Parse(dsAgnt.Tables[0].Rows[0]["AGENTID"].ToString());
                                    agentNamePlus = dsAgnt.Tables[0].Rows[0]["AGENTNAME"].ToString();
                                    if (agentIDPlus > 0)
                                    {
                                        double avalBal = 0;
                                        double ledeBal = 0;
                                        double amountToTopup = 0;
                                        //  amountToTopup = (agentAmount - oneStopFeeDbl);
                                        if (_agentWCF.addFund2OneStopPlus(agentIDPlus, amt,out avalBal, out ledeBal, out errMsg))
                                        {
                                            isOKAddFund = true;
                                            writeLog("After addFund = AgentIDPlus : " + agentIDPlus.ToString() + " |Topuped Amount :" + amt.ToString() + "| AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                        }
                                        else
                                        {
                                            writeLog("Error in addFundtoagent Zala : " + errMsg);
                                        }
                                    }
                                    else
                                    {
                                        writeLog("No AgentID for Zala : " + agentIDPlus.ToString());
                                    }

                                    if (isOKAddFund)
                                    {
                                        writeLog("Fund Added OK to AgentID : " + agentIDPlus);

                                        if (!_agentWCF.ConfirmUpdate(txnID,ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                 agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                        {
                                            writeLog("Error in ConfirmUpdate : " + errMsg);
                                        }
                                        else
                                        {
                                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                                            //added by nila
                                            if (!_agentWCF.insertAgentTopupBy1Stop(amt, agentIDPlus, agentUserUniqueID, "AP", ConfigurationManager.AppSettings["ZalaChannelTopup"].ToString(), txnID,
                                                agentCode, mobileNo, serviceFee, agentName,out errMsg))
                                            {
                                                writeLog("Error in insertAgentTopupBy1Stop : " + errMsg);
                                            }

                                        }

                                        if (appType == "CS" || appType == "MS")
                                        {
                                            SMSHelper smsH = new SMSHelper();
                                            smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                            smsMsg = smsH.getMessageBiller1Stop(agentName, MapTaxID, billerName, ref1Name, ref2Name, "", "Ref", ref1, ref2, "", txnID.ToString(),
                                                double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);


                                            try
                                            {
                                                writeLog("sendSMSWithTxnID starts." + " smsMsg :" + smsMsg);
                                                //smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                                writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);

                                                //smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                                pushNotiWCF.ServiceClient pushnoti = new pushNotiWCF.ServiceClient();
                                                if (!string.IsNullOrEmpty(DeviceInfo))
                                                {
                                                    writeLog("Device Info is not Empty:" + DeviceInfo);
                                                    if (DeviceInfo.StartsWith("iOS"))
                                                    {
                                                        writeLog("Push To IOS:" + DeviceInfo);
                                                        pushnoti.PushToApple(DeviceToken, smsMsg, 0, out errmsg);
                                                    }
                                                    else
                                                    {
                                                        writeLog("Push To andriod:" + DeviceInfo);
                                                        pushnoti.PushToAndroid(DeviceToken, smsMsg, out errmsg);
                                                    }
                                                }

                                                writeLog("sendSMSWithTxnID ends.");
                                            }
                                            catch (Exception ex)
                                            {
                                                writeLog("Exception error occue at 1stop+ notification" + ex.Message);
                                            }
                                        }
                                        Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));
                                        Task.Factory.StartNew(() => _fraudWCF.CheckReceiver(agentIDPlus, decimal.Parse(amt.ToString()), billerName, txnID.ToString()));

                                        ConfirmResponseModel conRes = new ConfirmResponseModel();

                                        conRes.email = email;
                                        conRes.password = password;
                                        conRes.messageid = messageid;
                                        conRes.billerlogo = billerLogo;
                                        conRes.billername = billerName;
                                        conRes.taxID = taxID;
                                        conRes.rescode = "00";
                                        conRes.resdesc = "Success";
                                        conRes.ref1 = ref1;
                                        conRes.ref2 = ref2;
                                        conRes.ref3 = ref3;
                                        conRes.ref4 = txnID.ToString();
                                        conRes.ref5 = mobileNo;
                                        conRes.ref1Name = ref1Name;
                                        conRes.ref2Name = ref2Name;
                                        conRes.ref3Name = ref3Name;
                                        conRes.ref4Name = string.Empty;
                                        conRes.ref5Name = ref5Name;
                                        conRes.batchID = batchid.ToString();
                                        conRes.availablebalance = availablebalance.ToString();
                                        conRes.txnID = txnID.ToString();
                                        conRes.TodayTxnCount = TodayTxnCount;
                                        conRes.TodayTxnAmount = TodayTxnAmount;
                                        conRes.smsMsg = smsMsg;
                                        return Utils.getConfirmRes(conRes);
                                    }
                                    else
                                    {
                                        writeLog("Fund Added NOT OK to AgentID : " + agentIDPlus);
                                        rescode = "10";
                                        resdecs = "Adding Fund Failed";
                                        return Utils.getErrorRes(rescode, resdecs);
                                    }

                                }
                                else
                                {
                                    return Utils.getErrorRes("01", "Agent NOT Applicable");
                                }
                                // }
                            }
                            else
                            {
                                rescode = "01";
                                resdecs = errMsg;
                                return Utils.getErrorRes(rescode, "Ref Not Found");
                            }
                        }
                        // }
                    }
                    #endregion

                    #region <-- Viber Out -->
                    else if (MapTaxID == "0000000000051")
                    {
                        if (CheckIsESBAGiftCard(MapTaxID))
                        {
                            #region <-- This is Easy Bill -->
                            #region <-- Initialize Variable -->
                            writeLog("$$$$$$$$$ This Is ESBA Viber Out Confirm $$$$$$$$$$$$$");
                            string billercode = string.Empty;
                            billercode = getBillerCode(MapTaxID);
                            GiftCardAirTimeConfirmRequest pinreq = new GiftCardAirTimeConfirmRequest();
                            GiftCardAirTimeTopUpResponses pinres = new GiftCardAirTimeTopUpResponses();
                            string aesKey = string.Empty;
                            double avalbal = 0;
                            double legbal = 0;

                            if (IsTokenNullOrExpire(Token))
                            {
                                Token = GetOAuthToken();
                            }

                            pinreq.Token = Token.Token;
                            pinreq.BillerCode = billercode;
                            pinreq.CreditAmount = ref2;
                            pinreq.PayAmount = amount;
                            pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                            pinreq.ChannelRefNo = pinreq.Channel + txnID;
                            pinreq.UserRefNumber = ref3;
                            mobileNo = ref3;
                            ref3 = "Airtime";

                            var json_serializer1 = new JavaScriptSerializer();

                            string jsonReq = json_serializer1.Serialize(pinreq);
                            writeLog("ESBA JasonReq:" + jsonReq);
                            #endregion
                            //Request PIN To ESBA
                            string jsonres = Utils.pinRequest(jsonReq, esbaGcardAirtimeReq);
                            writeLog("ESBA JasonRes:" + jsonres);
                            if (string.IsNullOrEmpty(jsonres))
                            {
                                resdecs = "No Response From ESBA";
                                rescode = "06";
                                //if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                                //{
                                //    writeLog("Error in updateError : " + errMsg);
                                //}
                                //return Utils.getErrorRes(rescode, resdecs);

                                return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                            }
                            var json_serializerpinres = new JavaScriptSerializer();
                            pinres = json_serializerpinres.Deserialize<GiftCardAirTimeTopUpResponses>(jsonres);


                            if (pinres.TopUpGiftCardAirTimeResult.TransactionStatus == "0" && !string.IsNullOrEmpty(pinres.TopUpGiftCardAirTimeResult.UserRefNumber) && !string.IsNullOrEmpty(pinres.TopUpGiftCardAirTimeResult.GiftCardAirtimeTransactionID))
                            {


                                ref4 = "SUCCESS" + " " + pinres.TopUpGiftCardAirTimeResult.GiftCardAirtimeTransactionID;


                                //double availablebalance = 0;
                                //double ledgerbalance = 0;
                                #region <-- Update Transaction -->
                                if (!_agentWCF.ConfirmUpdate(txnID,
                                    ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                    agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                {
                                    writeLog("Error in ConfirmUpdate : " + errMsg);
                                    resdecs = "Error in update database";
                                    rescode = "06";
                                    if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                                    {
                                        writeLog("Error in updateError : " + errMsg);
                                    }
                                    return Utils.getErrorRes(rescode, "Transaction fail");
                                }
                                else
                                {
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                }
                                #endregion
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                                #region <-- Response Back To Client -->
                                rescode = "00";
                                resdecs = "Success";
                                ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                confirmres.taxID = taxID;
                                confirmres.email = email;
                                confirmres.password = password;
                                confirmres.messageid = messageid;
                                confirmres.billername = billerName;
                                confirmres.billerlogo = billerLogo;
                                confirmres.rescode = rescode;
                                confirmres.resdesc = resdecs;
                                confirmres.ref1 = ref1;
                                confirmres.ref2 = ref2;
                                confirmres.ref3 = ref3;
                                confirmres.ref4 = ref4;
                                confirmres.ref5 = mobileNo;
                                confirmres.ref1Name = ref1Name;
                                confirmres.ref2Name = ref2Name;
                                confirmres.ref3Name = ref3Name;
                                confirmres.ref4Name = ref4Name;
                                confirmres.ref5Name = ref5Name;
                                confirmres.availablebalance = availablebalance.ToString();
                                confirmres.txnID = txnID.ToString();
                                confirmres.TodayTxnAmount = TodayTxnAmount;
                                confirmres.TodayTxnCount = TodayTxnCount;
                                confirmres.smsMsg = smsMsg;

                                return Utils.getConfirmRes(confirmres);
                                #endregion
                            }
                            else
                            {
                                //resdecs = pinres.TopUpGiftCardAirTimeResult.ResponseDescription;
                                //if (!_agentWCF.updateError(out errMsg, txnID, "ER", resdecs))
                                //{
                                //    writeLog("Error in updateError : " + errMsg);
                                //}
                                resdecs = pinres.TopUpGiftCardAirTimeResult.ResponseCode == "23" || pinres.TopUpGiftCardAirTimeResult.ResponseCode == "24" ? pinres.TopUpGiftCardAirTimeResult.ResponseDescription : "Transaction is not successful.Please try again!";

                                // return Utils.getErrorRes("06", resdecs);

                                return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, pinres.TopUpGiftCardAirTimeResult.ResponseDescription, agentID, agentAmount, isAgreement);
                            }
                            #endregion

                        }

                    }
                    #endregion

                    #region <-- 663 CashIn/Load Tz 25-sep-2017 -->
                    if (MapTaxID == "0000000000008")
                    {
                        writeLog("This is 663 Load");
                        int batchid = 0;
                        //double availablebalance = 0;
                        //double ledgerbalance = 0;
                        string agnid = string.Empty;
                        string BranchId = string.Empty;
                        mobileNo = ref3;
                        writeLog(mobileNo);
                        double avalbal = 0;
                        double legbal = 0;

                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            #region <-- If Simulator is on -->
                            writeLog("Simulator Y");

                            if (!_agentWCF.ConfirmUpdate(txnID,ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email, 
                                agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                            {

                                writeLog("Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                                {
                                    writeLog("Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }
                            if (appType == "CS" || appType == "MS")
                            {
                                SMSHelper smsH = new SMSHelper();

                                smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                decimal Total663Amount = Convert.ToDecimal(serviceFee) + Convert.ToDecimal(amount);
                                smsMsg = smsH.getMessageBiller(agentName, taxID, billerName, ref1Name, "", "", "", ref1, "", "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, Total663Amount.ToString("#,##0.00"), branchCode);

                                try
                                {
                                    writeLog("sendSMSWithTxnID starts.");
                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                    writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);

                                    writeLog("sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {

                                }
                            }


                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                            ConfirmResponseModel confirmResponse = new ConfirmResponseModel();
                            confirmResponse.rescode = "00";
                            confirmResponse.resdesc = "Success";
                            confirmResponse.email = email;
                            confirmResponse.password = password;
                            confirmResponse.messageid = messageid;
                            confirmResponse.taxID = taxID;
                            confirmResponse.billername = billerName;
                            confirmResponse.billerlogo = billerLogo;
                            confirmResponse.ref1 = ref1;
                            confirmResponse.ref2 = ref2;
                            confirmResponse.ref3 = ref3;
                            confirmResponse.ref4 = ref4;
                            confirmResponse.ref5 = ref5;
                            confirmResponse.ref1Name = ref1Name;
                            confirmResponse.ref2Name = "";
                            //confirmResponse.Ref3Name = "Payee Mobile";
                            confirmResponse.ref3Name = "";
                            confirmResponse.ref4Name = "";
                            confirmResponse.ref5Name = "Mobile No";
                            confirmResponse.batchID = string.Empty;
                            confirmResponse.availablebalance = availablebalance.ToString();
                            confirmResponse.txnID = txnID.ToString();
                            confirmResponse.TodayTxnCount = TodayTxnCount;
                            confirmResponse.TodayTxnAmount = TodayTxnAmount;
                            confirmResponse.smsMsg = smsMsg;
                            string confirmRes = Utils.getConfirmRes(confirmResponse);
                            writeLog("RES XML : " + confirmRes);
                            return confirmRes;



                            #endregion
                        }
                        else
                        {
                            //                    <add key="3DESFinalKey" value="D90ECC8BD39EBBDEABB0D964F5371BF9C0F24261E7C89225"/>
                            //<add key="663Password" value="97959871351234"/>
                            //<add key="signatureString" value="qdlnRQdA8B35tZWGg6aQ605kzBoY="/>
                            //<add key="Os" value="ANDROID"/>
                            //<add key="AppVersion" value="1.0.0.0"/>
                            Request663 request663 = new Request663();
                            Response663 response663 = new Response663();
                            request663.transactionType = ConfigurationManager.AppSettings["663CashInPrefix"].ToString();
                            request663.receiverMobileNo = ref1;
                            request663.txnAmount = amount;
                            request663.txnID = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                            response663 = confirmRequestTo663(request663);
                            if (response663.Result)
                            {
                                #region <-- Confirm Update for Success Transaction -->
                                if (!_agentWCF.ConfirmUpdate(txnID,ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                {
                                    writeLog("Error in ConfirmUpdate : " + errMsg);
                                    resdecs = "Error in update database";
                                    rescode = "06";
                                    if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                                    {
                                        writeLog("Error in updateError : " + errMsg);
                                    }
                                    return Utils.getErrorRes(rescode, "Transaction fail");
                                }
                                else
                                {
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                                }
                                if (appType == "CS" || appType == "MS")
                                {
                                    SMSHelper smsH = new SMSHelper();

                                    smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                    decimal Total663Amount = Convert.ToDecimal(serviceFee) + Convert.ToDecimal(amount);
                                    smsMsg = smsH.getMessageBiller(agentName, taxID, billerName, ref1Name, "", "", "", ref1, "", "", txnID.ToString(),
                                        double.Parse(amount).ToString("#,##0.00"), serviceFee, Total663Amount.ToString("#,##0.00"), branchCode);

                                    try
                                    {
                                        writeLog("sendSMSWithTxnID starts.");
                                        // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                        writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                        writeLog("sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                        writeLog("Exception occur when sending sms" + ex.ToString());
                                    }
                                }
                                Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));
                                ConfirmResponseModel confirmResponse = new ConfirmResponseModel();
                                confirmResponse.rescode = "00";
                                confirmResponse.resdesc = "Success";
                                confirmResponse.email = email;
                                confirmResponse.password = password;
                                confirmResponse.messageid = messageid;
                                confirmResponse.taxID = taxID;
                                confirmResponse.billername = billerName;
                                confirmResponse.billerlogo = billerLogo;
                                confirmResponse.ref1 = ref1;
                                confirmResponse.ref2 = ref2;
                                confirmResponse.ref3 = ref3;
                                confirmResponse.ref4 = ref4;
                                confirmResponse.ref5 = ref5;
                                confirmResponse.ref1Name = ref1Name;
                                confirmResponse.ref2Name = "";
                                //confirmResponse.Ref3Name = "Payee Mobile";
                                confirmResponse.ref3Name = "";
                                confirmResponse.ref4Name = "";
                                confirmResponse.ref5Name = "Mobile No";
                                confirmResponse.batchID = string.Empty;
                                confirmResponse.availablebalance = availablebalance.ToString();
                                confirmResponse.txnID = txnID.ToString();
                                confirmResponse.TodayTxnCount = TodayTxnCount;
                                confirmResponse.TodayTxnAmount = TodayTxnAmount;
                                confirmResponse.smsMsg = smsMsg;
                                string confirmRes = Utils.getConfirmRes(confirmResponse);
                                writeLog("RES XML : " + confirmRes);
                                return confirmRes;
                                #endregion
                            }
                            else
                            {
                                rescode = "06";
                                resdecs = "Transaction is not successful";
                                return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, response663.ResponseDescription, agentID, agentAmount, isAgreement);
                            }



                        }
                    }
                    #endregion

                    #region <-- 663 Remit/Send -->
                    //    RemitReq
                    //<ref1>toMobileNo</ref1>
                    //<ref2>toData(toName:toNrc)</ref2>
                    //<ref3>fromMobileNo</ref3>
                    //<ref4></ref4>
                    //<ref5>fromData(fromName:fromNrc)</ref5>

                    //RemitRes
                    //<ref1>09xxxxxxxxx</ref1>
                    //<ref2>Lu Lu:10/ABC(N)000000</ref2>
                    //<ref3>09xxxxxxxxx</ref3>
                    //<ref4></ref4>
                    //<ref5>Thet Zaw:11/CBA(N)111111</ref5>
                    //<ref1Name>To Mobile No.</ref1Name>
                    //<ref2Name>Name/NRC (To)</ref2name>
                    //<ref3Name>From Mobile No.</ref3Name>
                    //<ref4Name></ref4Name>
                    //<ref5Name>Name/NRC (From)</ref5Name>
                    if (MapTaxID == "0000000000007")
                    {
                        int batchid = 0;
                        //double availablebalance = 0;
                        //double ledgerbalance = 0;
                        string agnid = string.Empty;
                        string BranchId = string.Empty;
                        mobileNo = ref3;
                        writeLog(mobileNo);
                        double avalbal = 0;
                        double legbal = 0;

                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            writeLog("$$$$$$$$$ This is simulator $$$$$$$$$$$$$$$$$");
                            #region <-- Confirm Update for Success Transaction -->
                            if (!_agentWCF.ConfirmUpdate( txnID,ref1, ref2, ref5, ref4, mobileNo, "", "PA", "Paid Successfully", 
                                agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                                {
                                    writeLog("Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }
                            if (appType == "CS" || appType == "MS")
                            {
                                SMSHelper smsH = new SMSHelper();

                                smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                decimal Total663Amount = Convert.ToDecimal(serviceFee) + Convert.ToDecimal(amount);
                                smsMsg = smsH.getMessageBiller(agentName, taxID, billerName, ref1Name, ref2Name, "", "Ref", ref1, ref2, "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, Total663Amount.ToString("#,##0.00"), branchCode);

                                try
                                {
                                    writeLog("sendSMSWithTxnID starts.");
                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                    writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                    writeLog("sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {
                                    writeLog("Exception occur when sending sms" + ex.ToString());
                                }
                            }
                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));
                            ConfirmResponseModel confirmResponse = new ConfirmResponseModel();
                            confirmResponse.rescode = "00";
                            confirmResponse.resdesc = "Success";
                            confirmResponse.email = email;
                            confirmResponse.password = password;
                            confirmResponse.messageid = messageid;
                            confirmResponse.taxID = taxID;
                            confirmResponse.billername = billerName;
                            confirmResponse.billerlogo = billerLogo;
                            confirmResponse.ref1 = ref1;
                            confirmResponse.ref2 = ref2;
                            confirmResponse.ref3 = ref5;
                            confirmResponse.ref4 = ref4;
                            confirmResponse.ref5 = ref3;
                            confirmResponse.ref1Name = ref1Name;
                            confirmResponse.ref2Name = ref2Name;
                            //confirmResponse.Ref3Name = "Payee Mobile";
                            confirmResponse.ref3Name = ref3Name;
                            confirmResponse.ref4Name = "";
                            confirmResponse.ref5Name = ref5Name;
                            confirmResponse.batchID = string.Empty;
                            confirmResponse.availablebalance = availablebalance.ToString();
                            confirmResponse.txnID = txnID.ToString();
                            confirmResponse.TodayTxnCount = TodayTxnCount;
                            confirmResponse.TodayTxnAmount = TodayTxnAmount;
                            confirmResponse.smsMsg = smsMsg;
                            string confirmRes = Utils.getConfirmRes(confirmResponse);
                            writeLog("RES XML : " + confirmRes);
                            return confirmRes;
                            #endregion
                        }
                        else
                        {
                            Request663 request663 = new Request663();
                            Response663 response663 = new Response663();
                            request663.transactionType = ConfigurationManager.AppSettings["663RemitPrefix"].ToString();
                            request663.receiverMobileNo = ref1;
                            request663.txnAmount = amount;
                            request663.txnID = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                            response663 = confirmRequestTo663(request663);
                            if (response663.Result)
                            {
                                #region <-- Confirm Update for Success Transaction -->
                                if (!_agentWCF.ConfirmUpdate(txnID,ref1, ref2, ref5, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, 
                                    email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                {
                                    writeLog("Error in ConfirmUpdate : " + errMsg);
                                    resdecs = "Error in update database";
                                    rescode = "06";
                                    if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                                    {
                                        writeLog("Error in updateError : " + errMsg);
                                    }
                                    return Utils.getErrorRes(rescode, "Transaction fail");
                                }
                                else
                                {
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                                }
                                if (appType == "CS" || appType == "MS")
                                {
                                    SMSHelper smsH = new SMSHelper();

                                    smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                    decimal Total663Amount = Convert.ToDecimal(serviceFee) + Convert.ToDecimal(amount);
                                    smsMsg = smsH.getMessageBiller(agentName, taxID, billerName, ref1Name, ref2Name, "", "Ref", ref1, ref2, "", txnID.ToString(),
                                        double.Parse(amount).ToString("#,##0.00"), serviceFee, Total663Amount.ToString("#,##0.00"), branchCode);

                                    try
                                    {
                                        writeLog("sendSMSWithTxnID starts.");
                                        // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                        writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                        writeLog("sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                        writeLog("Exception occur when sending sms" + ex.ToString());
                                    }
                                }
                                Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));
                                ConfirmResponseModel confirmResponse = new ConfirmResponseModel();
                                confirmResponse.rescode = "00";
                                confirmResponse.resdesc = "Success";
                                confirmResponse.email = email;
                                confirmResponse.password = password;
                                confirmResponse.messageid = messageid;
                                confirmResponse.taxID = taxID;
                                confirmResponse.billername = billerName;
                                confirmResponse.billerlogo = billerLogo;
                                confirmResponse.ref1 = ref1;
                                confirmResponse.ref2 = ref2;
                                confirmResponse.ref3 = ref5;
                                confirmResponse.ref4 = ref4;
                                confirmResponse.ref5 = ref3;
                                confirmResponse.ref1Name = ref1Name;
                                confirmResponse.ref2Name = ref2Name;
                                //confirmResponse.Ref3Name = "Payee Mobile";
                                confirmResponse.ref3Name = ref3Name;
                                confirmResponse.ref4Name = "";
                                confirmResponse.ref5Name = ref5Name;
                                confirmResponse.batchID = string.Empty;
                                confirmResponse.availablebalance = availablebalance.ToString();
                                confirmResponse.txnID = txnID.ToString();
                                confirmResponse.TodayTxnCount = TodayTxnCount;
                                confirmResponse.TodayTxnAmount = TodayTxnAmount;
                                confirmResponse.smsMsg = smsMsg;
                                string confirmRes = Utils.getConfirmRes(confirmResponse);
                                writeLog("RES XML : " + confirmRes);
                                return confirmRes;
                                #endregion
                            }
                            else
                            {
                                rescode = "06";
                                resdecs = "Transaction is not successful";
                                return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, response663.ResponseDescription, agentID, agentAmount, isAgreement);
                            }

                        }
                    }
                    #endregion

                    #region <-- 663 CashOut -->
                    if (MapTaxID == "0000000000009")
                    {

                        writeLog("This is 663  CashOut");
                        int batchid = 0;
                        //double availablebalance = 0;
                        //double ledgerbalance = 0;
                        string agnid = string.Empty;
                        mobileNo = ref3;
                        writeLog(mobileNo);

                        DataSet dsAgent = null;
                        string agentBranchCode = string.Empty;
                        string agentDivision = string.Empty;
                        string agentTownship = string.Empty;
                        double avalbal = 0;
                        double legbal = 0;



                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {

                            #region <-- If Simulator is on -->
                            writeLog("Simulator Y");

                            status = "PA";
                            ConfirmResponseModel responseCashIn = new ConfirmResponseModel();
                            responseCashIn.version = "1.0";
                            responseCashIn.timestamp = System.DateTime.Now.ToString("yyyyMMddhhmmssffff");
                            responseCashIn.billername = agentName;
                            responseCashIn.billerlogo = billerLogo;
                            string responseXML = Utils.getConfirmRes(responseCashIn);
                            writeLog("RES XML : " + responseXML);

                            rescode = "00";

                            #endregion
                        }
                        else
                        {

                            Request663 request663 = new Request663();
                            Response663 response663 = new Response663();
                            request663.transactionType = ConfigurationManager.AppSettings["663CashOutPrefix"].ToString();
                            request663.receiverMobileNo = ref5;
                            request663.oTp = ref1;
                            request663.txnAmount = amount;
                            request663.txnID = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                            response663 = confirmRequestTo663(request663);

                            if (!response663.Result)
                            {
                                rescode = "06";
                                resdecs = "Transaction is not successful";
                                if (!_agentWCF.updateError(txnID, "ER", response663.ResponseDescription,out errMsg))
                                {
                                    writeLog("Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, resdecs);

                            }
                            else
                            {


                                status = "AP";

                                rescode = "00";


                                if (isAgreement == "N")
                                {
                                    bool isOKAddFund = false;
                                    double avalBal = 0;
                                    double ledeBal = 0;
                                    int agentIDPlus = 0;
                                    string agentNamePlus = String.Empty;
                                    DataSet dsAgnt = new DataSet();
                                    if (!_agentWCF.getAgentNameByAgentCode(agentCode,out dsAgnt, out errmsg))
                                    {
                                        writeLog("Error in getAgentNameByAgentCode : " + errmsg);
                                    }
                                    if (dsAgnt.Tables[0].Rows.Count > 0)
                                    {
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                                        agentIDPlus = int.Parse(dsAgnt.Tables[0].Rows[0]["AGENTID"].ToString());
                                        agentNamePlus = dsAgnt.Tables[0].Rows[0]["AGENTNAME"].ToString();

                                        if (_agentWCF.addFund2OneStopPlus(agentIDPlus, agentAmount,out avalBal, out ledeBal, out errMsg))
                                        {
                                            isOKAddFund = true;
                                            writeLog("After addFund = AgentIDPlus : " + agentIDPlus.ToString() + " |Topuped Amount :" + agentAmount.ToString() + "| AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                        }
                                        else
                                        {
                                            writeLog("Error in add fund to @Post plus : " + errMsg);
                                        }

                                        if (isOKAddFund)
                                        {
                                            string topupfee = "0";
                                            if (!_agentWCF.insertAgentTopupBy1Stop(agentAmount, agentIDPlus, agentUserUniqueID, "AP", "663CashOut", txnID,
                                                    agentCode, mobileNo, topupfee, agentNamePlus,out errMsg))
                                            {
                                                writeLog("Error in insertAgentTopupBy1Stop : " + errMsg);
                                            }
                                            else
                                            {
                                                Task.Factory.StartNew(() => _fraudWCF.CheckReceiver(agentIDPlus, decimal.Parse(amt.ToString()), billerName, txnID.ToString()));

                                            }
                                        }
                                    }
                                }
                            }

                            //if (!_agentWCF.InsertTransactionLog(out errMsg, txnID, "ConfirmRes", cashoutResponseJson))
                            //{
                            //    writeLog("Error in InsertTransactionLog Res : " + errMsg);
                            //}
                        }



                        if (rescode != "00")
                        {
                            ConfirmResponseModel confirmResponse = new ConfirmResponseModel();
                            confirmResponse.taxID = taxID;
                            confirmResponse.billername = billerName;
                            confirmResponse.billerlogo = billerLogo;
                            confirmResponse.rescode = "99";
                            confirmResponse.resdesc = "System Error";
                            confirmResponse.ref1 = ref1;
                            confirmResponse.ref2 = ref2;
                            confirmResponse.ref3 = ref3;
                            confirmResponse.ref4 = ref4;
                            confirmResponse.ref5 = ref5;
                            confirmResponse.ref1Name = ref1Name;
                            confirmResponse.ref2Name = ref2Name;
                            confirmResponse.ref3Name = ref3Name;
                            confirmResponse.ref4Name = ref4Name;
                            confirmResponse.ref5Name = ref5Name;
                            string confirmRes = Utils.getConfirmRes(confirmResponse);

                            if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                            {
                                writeLog("Error in updateError : " + errMsg);
                            }
                            return confirmRes;
                        }
                        else
                        {
                            writeLog("***************Enter Confirm Update *******************");



                            if (!_agentWCF.ConfirmUpdateCashOut(txnID,ref1, ref2, ref5, ref4, mobileNo, "", "CO", "Cash Out Successfully", agentID, email,
                                     agentAmount, agentFeeDbl, isAgreement, smsStatus,out  errMsg, out  batchID, out  avalbal, out  legbal))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);
                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            if (appType == "CS" || appType == "MS")
                            {
                                SMSHelper smsH = new SMSHelper();

                                smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                smsMsg = smsH.getMessageBiller(agentName, taxID, billerName, ref1Name, ref3Name, "", "Ref", ref1, ref5, "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);
                                try
                                {
                                    writeLog("sendSMSWithTxnID starts.");
                                    // smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                    writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                    smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);

                                    writeLog("sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {
                                }
                            }
                            Task.Factory.StartNew(() => _fraudWCF.CheckSender(txnID, agentID, branchCode, email, decimal.Parse(amount.ToString()), billerName));

                            ConfirmResponseModel confirmResponse = new ConfirmResponseModel();
                            confirmResponse.taxID = taxID;
                            confirmResponse.rescode = "00";
                            confirmResponse.resdesc = "Success";
                            confirmResponse.billername = billerName;
                            confirmResponse.billerlogo = billerLogo;
                            confirmResponse.ref1 = ref1;
                            confirmResponse.ref2 = ref2;
                            confirmResponse.ref3 = ref5;
                            confirmResponse.ref4 = ref4;
                            confirmResponse.ref5 = mobileNo;
                            confirmResponse.ref1Name = ref1Name;
                            confirmResponse.ref2Name = ref2Name;
                            confirmResponse.ref3Name = ref3Name;
                            confirmResponse.ref4Name = ref4Name;
                            confirmResponse.ref5Name = ref5Name;
                            confirmResponse.batchID = string.Empty;
                            confirmResponse.availablebalance = availablebalance.ToString();
                            confirmResponse.txnID = txnID.ToString();
                            confirmResponse.TodayTxnCount = TodayTxnCount;
                            confirmResponse.TodayTxnAmount = TodayTxnAmount;
                            confirmResponse.smsMsg = smsMsg;
                            string confirmRes = Utils.getConfirmRes(confirmResponse);
                            return confirmRes;

                        }


                    }
                    #endregion

                    #region <-- //YTalk -->

                    else if (MapTaxID == "0000000000012" || MapTaxID == "1111111111111")
                    {
                        // string cardtype = taxID == "2222222222222" ? "C8" : taxID == "3333333333333" ? "GS" : "C4";
                        //string cardtypemyanpay = taxID == "2222222222222" ? "102" : taxID == "3333333333333" ? "101" : "000";
                        writeLog("This is Ytalk/MyPlay");
                        amt = double.Parse((double.Parse(ref2)).ToString("###0.00"));
                        mobileNo = ref3;
                        writeLog("TaxID :" + taxID + "| CardTYPE :" + ref1);
                        double avalbal = 0;
                        double legbal = 0;

                        if (topupType == "A")
                        {
                            #region <-- Airtime Topup -->
                            writeLog("This is Airtime topup.");
                            rescode = "01";
                            resdecs = "Airtime Topup is NOT Available.";
                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);

                            #endregion
                        }
                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            writeLog("Simulator Y");
                            #region <-- Simulator is On -->
                            int batchid = 0;
                            //double availablebalance = 0;
                            //double ledgerbalance = 0;
                            //string errMsg = null;
                            //reqCardType = ref1;
                            //reqCardPrice = ref2;
                            mobileNo = ref3;
                            ref3 = new Random().Next(00000000, 99999999).ToString() + new Random().Next(00000000, 99999999).ToString();
                            ref4 = new Random().Next(00000000, 99999999).ToString() + new Random().Next(00000000, 99999999).ToString();
                            ref4 = ref4 + " 6/12/2016";
                            //amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));
                            if (!_agentWCF.InsertTransactionLog(txnID, "TopupReq", "Test Req",out errMsg))
                            {
                                writeLog("Error in InsertTransactionLog Req : " + errMsg);
                            }
                            if (!_agentWCF.InsertTransactionLog(txnID, "TopupRes", "Test Res",out errMsg))
                            {
                                writeLog("Error in InsertTransactionLog Res : " + errMsg);
                            }

                            //if (_agentWCF.ConfirmUpdate(out  errMsg, out  batchID, out  availablebalance, out  ledgerbalance, txnID,
                            //        ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                            //        agentAmount, agentFeeDbl, isAgreement))
                            //{
                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                    string[] words = ref4.Split(' ');
                                    string PIN = words[0].ToString();
                                    string Expiry = words[1].ToString();




                                    try
                                    {
                                        smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Expiry", "", "Ref", PIN, Expiry, "", txnID.ToString(),
                                      double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                        writeLog("---Messssage Text-----" + smsMsg);
                                        writeLog("sendSMSWithTxnID starts.");
                                        //smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                        writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                        writeLog("sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                        writeLog("exception in send sms:" + ex.Message);
                                    }
                                }

                            }

                            if (!_agentWCF.ConfirmUpdate(txnID,ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                    agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);
                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                            }

                            rescode = "00";
                            resdecs = "Success";
                            StringBuilder sbresponse = new StringBuilder();
                            sbresponse.Append("<ConfirmRes>");
                            sbresponse.Append("<Version>1.0</Version>");
                            sbresponse.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                            sbresponse.Append("<TaxID>" + taxID + "</TaxID>");
                            sbresponse.Append("<Email>" + email + "</Email>");
                            sbresponse.Append("<Password>" + password + "</Password>");
                            sbresponse.Append("<MessageID>" + messageid + "</MessageID>");
                            sbresponse.Append("<BillerName>" + billerName + "</BillerName>");
                            sbresponse.Append("<BillerLogo>" + billerLogo + "</BillerLogo>");
                            sbresponse.Append("<ResCode>" + rescode + "</ResCode>");
                            sbresponse.Append("<ResDesc>" + resdecs + "</ResDesc>");
                            sbresponse.Append("<Ref1>" + ref1 + "</Ref1>");
                            sbresponse.Append("<Ref2>" + ref2 + "</Ref2>");
                            sbresponse.Append("<Ref3>" + ref3 + "</Ref3>");
                            sbresponse.Append("<Ref4>" + ref4 + "</Ref4>");
                            sbresponse.Append("<Ref5>" + mobileNo + "</Ref5>");
                            sbresponse.Append("<Ref1Name>" + ref1Name + "</Ref1Name>");
                            sbresponse.Append("<Ref2Name>" + ref2Name + "</Ref2Name>");
                            sbresponse.Append("<Ref3Name>" + ref3Name + "</Ref3Name>");
                            sbresponse.Append("<Ref4Name>" + ref4Name + "</Ref4Name>");
                            sbresponse.Append("<Ref5Name>" + ref5Name + "</Ref5Name>");
                            sbresponse.Append("<BatchID>" + batchid + "</BatchID>");
                            sbresponse.Append("<Balance>" + avalbal + "</Balance>");
                            sbresponse.Append("<TxnID>" + txnID + "</TxnID>");
                            sbresponse.Append("<TodayTxnCount>" + TodayTxnCount + "</TodayTxnCount>");
                            sbresponse.Append("<TodayTxnAmount>" + TodayTxnAmount + "</TodayTxnAmount>");
                            sbresponse.Append("<SMS>" + smsMsg + "</SMS>");
                            sbresponse.Append("</ConfirmRes>");
                            writeLog("RES XML : " + sbresponse.ToString());
                            // writeLog("TxnID:*****" + txnID);
                            return sbresponse.ToString();
                            #endregion
                        }
                        else
                        {
                            if (CheckIsESBAGiftCard(MapTaxID))
                            {
                                #region <-- This is Easy Bill -->
                                #region <-- Initialize Variable -->
                                writeLog("$$$$$$$$$ This Is ESBA $$$$$$$$$$$$$");
                                string billercode = string.Empty;
                                billercode = getBillerCode(MapTaxID);
                                giftcardConfirmReq pinreq = new giftcardConfirmReq();
                                GetGiftCardPINResults pinres = new GetGiftCardPINResults();
                                string aesKey = string.Empty;
                                aesKey = ConfigurationManager.AppSettings["EsbaAesKey"].ToString();
                                if (IsTokenNullOrExpire(Token))
                                {
                                    Token = GetOAuthToken();
                                }

                                //  string cardtype =
                                pinreq.Token = Token.Token;
                                pinreq.BillerCode = billercode;
                                pinreq.PriceType = ref2;
                                pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                                pinreq.ChannelRefID = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                                amt = double.Parse((double.Parse(ref2)).ToString("###0.00"));
                                //  mobileNo = ref3;

                                var json_serializer1 = new JavaScriptSerializer();

                                string jsonReq = json_serializer1.Serialize(pinreq);
                                writeLog("ESBA JasonReq:" + jsonReq);
                                #endregion
                                //Request PIN To ESBA
                                string jsonres = Utils.pinRequest(jsonReq, esbGetGiftCardMethod);
                                writeLog("ESBA JasonRes:" + jsonres);
                                if (string.IsNullOrEmpty(jsonres))
                                {
                                    resdecs = "No Response From ESBA";
                                    rescode = "06";
                                    if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                                    {
                                        writeLog("Error in updateError : " + errMsg);
                                    }
                                    return Utils.getErrorRes(rescode, resdecs);
                                }
                                var json_serializerpinres = new JavaScriptSerializer();
                                pinres = json_serializerpinres.Deserialize<GetGiftCardPINResults>(jsonres);


                                if (pinres.GetGiftCardPINResult.TransactionStatus == "0" && !string.IsNullOrEmpty(pinres.GetGiftCardPINResult.PIN))
                                {

                                    pinres.GetGiftCardPINResult.PIN = Utils.AESDecryptText(pinres.GetGiftCardPINResult.PIN, aesKey);
                                    ref4 = pinres.GetGiftCardPINResult.PIN + " " + pinres.GetGiftCardPINResult.ExpiryDate;
                                    ref3 = pinres.GetGiftCardPINResult.SerialNumber;

                                    //double availablebalance = 0;
                                    //double ledgerbalance = 0;
                                    //string errMsg = null;
                                    amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                    #region <-- Update Transaction -->
                                    if (!_agentWCF.ConfirmUpdate(txnID,
                                        ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                        agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                                    {
                                        writeLog("Error in ConfirmUpdate : " + errMsg);
                                        resdecs = "Error in update database";
                                        rescode = "06";
                                        if (!_agentWCF.updateError(txnID, "ER", resdecs,out errMsg))
                                        {
                                            writeLog("Error in updateError : " + errMsg);
                                        }
                                        return Utils.getErrorRes(rescode, "Transaction fail");
                                    }
                                    else
                                    {
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                    }
                                    #endregion
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                                    #region <-- Send SMS -->
                                    if (appType == "CS" || appType == "MS")
                                    {
                                        if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                        {
                                            SMSHelper smsH = new SMSHelper();
                                            smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                            string[] words = ref4.Split(' ');
                                            string PIN = words[0].ToString();
                                            string Expiry = words[1].ToString();





                                            try
                                            {
                                                writeLog("sendSMSWithTxnID starts.");
                                                smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Expiry", "", "Ref", PIN, Expiry, "", txnID.ToString(),
                                              double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);
                                                //  smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                                writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                                smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                                writeLog("sendSMSWithTxnID ends.");
                                            }
                                            catch (Exception ex)
                                            {
                                                writeLog("Excepiton occur when sending sms:" + ex.Message);
                                            }
                                        }
                                        else
                                        {
                                            //To Develop Airtime
                                        }
                                    }
                                    #endregion
                                    #region <-- Response Back To Client -->
                                    rescode = "00";
                                    resdecs = "Success";
                                    ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                    confirmres.taxID = taxID;
                                    confirmres.email = email;
                                    confirmres.password = password;
                                    confirmres.messageid = messageid;
                                    confirmres.billername = billerName;
                                    confirmres.billerlogo = billerLogo;
                                    confirmres.rescode = rescode;
                                    confirmres.resdesc = resdecs;
                                    confirmres.ref1 = ref1;
                                    confirmres.ref2 = ref2;
                                    confirmres.ref3 = ref3;
                                    confirmres.ref4 = ref4;
                                    confirmres.ref5 = mobileNo;
                                    confirmres.ref1Name = ref1Name;
                                    confirmres.ref2Name = ref2Name;
                                    confirmres.ref3Name = ref3Name;
                                    confirmres.ref4Name = ref4Name;
                                    confirmres.ref5Name = ref5Name;
                                    confirmres.availablebalance = availablebalance.ToString();
                                    confirmres.txnID = txnID.ToString();
                                    confirmres.TodayTxnAmount = TodayTxnAmount;
                                    confirmres.TodayTxnCount = TodayTxnCount;
                                    confirmres.smsMsg = smsMsg;

                                    return Utils.getConfirmRes(confirmres);
                                    #endregion



                                }
                                else
                                {
                                    resdecs = Utils.EsbResponseDescription(pinres.GetGiftCardPINResult.ResponseCode);

                                    return GetErrorResponseWithAddBalance(pinres.GetGiftCardPINResult.ResponseCode, "Out of Stock", txnID, resdecs, agentID, agentAmount, isAgreement);
                                }

                                #endregion
                            }
                            else
                            {

                                return GeterrorResponse("06", resdecs, txnID, resdecs);
                            }
                        }

                    }

                    #endregion

                    #region <-- Canal-Plus Confirm -->
                    if (MapTaxID == "0000000000052")
                    {
                        string tempamt = string.Empty;
                        string tempname = string.Empty;
                        mobileNo = imgnrc; //Note : mobile request for the phone number of Ref6 but request parse get with imgnrc
                        double avalbal = 0;
                        double legbal = 0;

                        if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                        {
                            #region <-- Response Back To Client -->
                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = "ref1";
                            confirmres.ref2 = "ref2";
                            confirmres.ref3 = "ref3";
                            confirmres.ref4 = "ref4";
                            confirmres.ref5 = "mobileNo";
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = "smsMsg";

                            return Utils.getConfirmRes(confirmres);
                            #endregion
                        }
                        else
                        {
                            #region <-- Simulater Mode Off -->

                            string token = string.Empty;
                            string responseData = string.Empty;

                            if (IsTokenNullOrExpire(Token))
                            {
                                Token = GetOAuthToken();
                            }
                            string channelRef = ConfigurationManager.AppSettings["CanalPlusChannelCode"].ToString() + txnID;
                            #region COMMENTED CODES
                            //EBACanalPlusConfirmReq ECanalPlusConfirmreq = new EBACanalPlusConfirmReq();
                            //ECanalPlusConfirmreq.Token = Token.Token;
                            //ECanalPlusConfirmreq.Channel = ConfigurationManager.AppSettings["CanalPlusChannelCode"].ToString();
                            //ECanalPlusConfirmreq.ChannelRefID = channelRef;
                            //ECanalPlusConfirmreq.CardNumber = ref1;
                            //ECanalPlusConfirmreq.idBase = ref5;
                            //ECanalPlusConfirmreq.SubscriberNumber = ref2;
                            //ECanalPlusConfirmreq.ContractNumber = ref4;
                            //ECanalPlusConfirmreq.Amount = amount;

                            //var json_serializer1 = new JavaScriptSerializer();
                            //var json_serializerpinres = new JavaScriptSerializer();
                            //string parameter = json_serializer1.Serialize(ECanalPlusConfirmreq);
                            //string url = ConfigurationManager.AppSettings["CanalPlusConfirmUri"].ToString();

                            //CanalPlusSubscribeRes canalPlusRes = new CanalPlusSubscribeRes();
                            //SSLPost post = new SSLPost();
                            //writeLog("Confirm Request Post to EBA(CanalPlus)");
                            //if (post.postDataCanalPlus(url, parameter, out responseData, out errMsg))
                            //{
                            //    writeLog("Confirm Response from EBA(CanalPlus)" + responseData);
                            //    JavaScriptSerializer sescriberes = new JavaScriptSerializer();
                            //    canalPlusRes = sescriberes.Deserialize<CanalPlusSubscribeRes>(responseData);
                            //    if (canalPlusRes.TransactionStatus == "0")
                            //    {
                            //        //ref4 = ref3.Replace(" ", "") + " " + canalPlusRes.response.expire_date.ToString("dd-MM-yyyy");

                            //        //EndDate stored in ref4

                            //        if (!_agentWCF.ConfirmUpdate(out  errMsg, out  batchID, txnID,
                            //         ref1, ref2, ref3, canalPlusRes.EndDate, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                            //         agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance))
                            //        {
                            //            writeLog("Error in ConfirmUpdate : " + errMsg);
                            //        }
                            //        else
                            //        {
                            //            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                            //        }
                            //        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                            //        if (appType == "CS" || appType == "MS")
                            //        {
                            //            if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                            //            {
                            //                SMSHelper smsH = new SMSHelper();
                            //                smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();

                            //                smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, ref3Name, "Expiry", "Ref", ref1, ref3, canalPlusRes.EndDate, txnID.ToString(),
                            //                       double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                            //                try
                            //                {
                            //                    writeLog("sendSMSWithTxnID starts.");
                            //                    smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                            //                    writeLog("sendSMSWithTxnID ends.");
                            //                }
                            //                catch (Exception ex)
                            //                {
                            //                    writeLog("Exception was occure when send sms:" + ex.Message);
                            //                }
                            //            }
                            //        }

                            //        #region <-- Response Back To Client -->
                            //        rescode = "00";
                            //        resdecs = "Success";
                            //        ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            //        confirmres.taxID = taxID;
                            //        confirmres.email = email;
                            //        confirmres.password = password;
                            //        confirmres.messageid = messageid;
                            //        confirmres.billername = billerName;
                            //        confirmres.billerlogo = billerLogo;
                            //        confirmres.rescode = rescode;
                            //        confirmres.resdesc = resdecs;
                            //        confirmres.ref1 = ref1; //Card Number
                            //        confirmres.ref2 = ref2; //Subscriber Number
                            //        confirmres.ref3 = ref3; //PackageName
                            //        confirmres.ref4 = canalPlusRes.EndDate; //EndDate
                            //        confirmres.ref5 = mobileNo; //Mobile No
                            //        confirmres.ref1Name = ref1Name; //Card Number
                            //        confirmres.ref2Name = ref2Name; //Subscriber Number
                            //        confirmres.ref3Name = ref3Name; //Product                                    
                            //        confirmres.ref4Name = ref4Name; //EndDate
                            //        confirmres.ref5Name = ref5Name; //Mobile No

                            //        confirmres.availablebalance = availablebalance.ToString();
                            //        confirmres.txnID = txnID.ToString();
                            //        confirmres.TodayTxnAmount = TodayTxnAmount;
                            //        confirmres.TodayTxnCount = TodayTxnCount;
                            //        confirmres.smsMsg = smsMsg;

                            //        return Utils.getConfirmRes(confirmres);
                            //        #endregion
                            //    }
                            //    else
                            //    {
                            //        return GetErrorResponseWithAddBalance("06", "Topup Fail!", txnID, canalPlusRes.TransactionStatus, agentID, agentAmount, isAgreement);
                            //    }
                            //}
                            //else
                            //{
                            //    writeLog("Error Posting To CanalPlus:" + errMsg);
                            //    return GetErrorResponseWithAddBalance("06", "System Busy!", txnID, "Cannot Post!", agentID, agentAmount, isAgreement);
                            //}
                            #endregion
                            if (string.IsNullOrEmpty(canalPlusConfirmType))
                            {
                                return CanalPlusConfirmMonthlyPayment(ref1, ref2, ref3, ref4, ref5, channelRef, amount, appType, txnID, email, isAgreement, availablebalance, topupType, MapTaxID, taxID, messageid, password, ref1Name, ref2Name, ref3Name, ref4Name, ref5Name, totalAmount,
                                sendername, TodayTxnAmount, TodayTxnCount);
                            }
                            else
                            {
                                return CanalPlusConfirmChangePackage(ref1, ref2, ref3, ref4, ref5, channelRef, amount, appType, txnID, email, isAgreement, availablebalance, topupType, MapTaxID, taxID, messageid, password, ref1Name, ref2Name, ref3Name, ref4Name, ref5Name, totalAmount, 
                                    sendername, TodayTxnAmount, TodayTxnCount, sessionID, packageCode, durationCode);
                            }
                            #endregion
                        }
                    }
                    #endregion

                    #region <-- Solar-Home Confirm -->
                        if (MapTaxID == "0000000000053")
                        {
                            string solarhomeMobile = string.Empty;
                            string apiUrl = ConfigurationManager.AppSettings["SolarHomeAPI"].ToString() + "mobilemoney";
                            string apiKey = ConfigurationManager.AppSettings["SolarHomeAPIKey"].ToString();
                            var json_serializerpinres = new JavaScriptSerializer();
                            if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                            {

                            }
                            else
                            {

                            }
                            writeLog("$$$$$$$$$$$$ SolarHome confirmReq: $$$$$$$$$$$$");

                            writeLog("Device Type from Mobile ref3: " + ref3 +"ref5 : "+ref5);

                            if (ref3.StartsWith("09"))
                            {
                                solarhomeMobile = "95" + ref3.Substring(1);
                            }

                            else if (ref5.StartsWith("09"))
                            {
                                solarhomeMobile = "95" + ref5.Substring(1);
                            }
                            else
                            {
                                solarhomeMobile = ConfigurationManager.AppSettings["SolarHomeDefaultPhno"].ToString();
                            }
                            string jsonParam = "{\"trans_id\": \"" + txnID + "\",\"api_key\": \"" + apiKey + "\",\"account\":\"" + ref1 + "\",\"phone_number\": \"+" + solarhomeMobile + "\",\"currency\": \"MMK\",\"summ\":" + amount + "}";

                            writeLog("SolarHome confirmReq: " + jsonParam);

                            SSLPost post = new SSLPost();
                            string respData = "";
                            SolarHomeConfirmResponse solarHomeConfirmResp = new SolarHomeConfirmResponse();

                            if (post.postDateSolarHome(apiUrl, jsonParam, out respData))
                            {
                                writeLog("SolarHome confirmRes: " + respData);
                                solarHomeConfirmResp = json_serializerpinres.Deserialize<SolarHomeConfirmResponse>(respData);

                                if (!string.IsNullOrEmpty(solarHomeConfirmResp.Status))
                                {
                                    string confirmResString = string.Empty;
                                    rescode = "00";
                                    resdecs = "Success";
                                    solarHomeConfirmResp.Trans_ID = txnID.ToString();
                                    solarHomeConfirmResp.ResCode = rescode;
                                    solarHomeConfirmResp.ResDesc = resdecs;
                                    solarHomeConfirmResp.Amount = amount;
                                    solarHomeConfirmResp.TodayTxnCount = TodayTxnCount;
                                    solarHomeConfirmResp.TodayTxnAmount = TodayTxnAmount;
                                    solarHomeConfirmResp.Mobile = ref5;
                                    if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, ref5
                                        , "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out errMsg, out batchID))
                                    {
                                        writeLog("Error in ConfirmUpdate : " + errMsg);
                                    }
                                    else
                                    {
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                                        smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                                        try
                                        {
                                            if (!smsWcf.UpdateSmsStatusSolarHome(out errMsg, txnID, "Y"))
                                            {
                                                writeLog("Exception was occure when send sms:" + errMsg);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            writeLog("Solar Home SMS Error : " + ex.ToString());
                                        }
                                        
                                    }
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                                    confirmResString = Utils.getConfirmResSolarHome(solarHomeConfirmResp);

                                    return confirmResString;
                                }
                            }
                        }
                    #endregion

                    #region <-- Ananda E_PIN -->

                        else if (MapTaxID == "0000000000057")
                        {
                            writeLog("This is Ananda E_PIN from EBA");
                            mobileNo = ref3;
                            double avalbal = 0;
                            double legbal = 0;

                            giftcardConfirmReq pinreq = new giftcardConfirmReq();
                            GetGiftCardPINResults pinres = new GetGiftCardPINResults();
                            string aesKey = string.Empty;
                            aesKey = ConfigurationManager.AppSettings["EsbaAesKey"].ToString();
                            if (IsTokenNullOrExpire(Token))
                            {
                                Token = GetOAuthToken();
                            }
                            string billercode = string.Empty;
                            billercode = getBillerCode(MapTaxID);
                            pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                            pinreq.ChannelRefID = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                            pinreq.PriceType = ref2;
                            pinreq.Token = Token.Token;
                            pinreq.BillerCode = billercode;
                            var json_serializer1 = new JavaScriptSerializer();
                            string jsonReq = json_serializer1.Serialize(pinreq);
                            writeLog("EBA Ananda JsonReq: "+jsonReq);

                            SSLPost post = new SSLPost();
                            string jsonres = Utils.pinRequest(jsonReq, esbGetGiftCardMethod);
                            writeLog("EBA Ananda JasonRes:" + jsonres);

                            if (string.IsNullOrEmpty(jsonres))
                            {
                                resdecs = "No Response From ESBA";
                                rescode = "06";

                                return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                            }

                            var json_serializerpinres = new JavaScriptSerializer();
                            pinres = json_serializerpinres.Deserialize<GetGiftCardPINResults>(jsonres);

                            if (pinres.GetGiftCardPINResult.TransactionStatus == "0" && !string.IsNullOrEmpty(pinres.GetGiftCardPINResult.PIN))
                            {
                                pinres.GetGiftCardPINResult.PIN = Utils.AESDecryptText(pinres.GetGiftCardPINResult.PIN, aesKey);
                                ref4 = pinres.GetGiftCardPINResult.PIN + " " + pinres.GetGiftCardPINResult.ExpiryDate;
                                ref3 = pinres.GetGiftCardPINResult.SerialNumber;
                                amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                                #region <-- Update Transaction-->
                                if (!_agentWCF.ConfirmUpdate(txnID,
                               ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                               agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                                {
                                    writeLog("Error in ConfirmUpdate : " + errMsg);
                                    resdecs = "Error in update database";
                                    rescode = "06";
                                    if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                    {
                                        writeLog("Error in updateError : " + errMsg);
                                    }
                                    return Utils.getErrorRes(rescode, "Transaction fail");
                                }
                                else
                                {
                                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                                }
                                #endregion 
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());


                                #region <--Send SMS -->

                                if (appType == "CS" || appType == "MS")
                                {
                                    if (string.IsNullOrEmpty(topupType) || topupType == "S")
                                    {
                                        SMSHelper smsH = new SMSHelper();
                                        smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();

                                        string[] words = ref4.Split(' ');
                                        string PIN = words[0].ToString();
                                        string Expiry = words[1].ToString();


                                        smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Expiry", "", "Ref", PIN, Expiry, "", txnID.ToString(),
                                        double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);


                                        try
                                        {

                                            writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                            smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                            writeLog("sendSMSWithTxnID ends.");
                                        }
                                        catch (Exception ex)
                                        {
                                        }
                                       
                                    }
                                    else
                                    {
                                        //To Develop AirTime
                                    }
                                }
                                #endregion


                                #region <-- Response Back To Client -->
                                rescode = "00";
                                resdecs = "Success";
                                ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                confirmres.taxID = taxID;
                                confirmres.email = email;
                                confirmres.password = password;
                                confirmres.messageid = messageid;
                                confirmres.billername = billerName;
                                confirmres.billerlogo = billerLogo;
                                confirmres.rescode = rescode;
                                confirmres.resdesc = resdecs;
                                confirmres.ref1 = ref1;
                                confirmres.ref2 = ref2;
                                confirmres.ref3 = ref3;
                                confirmres.ref4 = ref4;
                                confirmres.ref5 = mobileNo;
                                confirmres.ref1Name = ref1Name;
                                confirmres.ref2Name = ref2Name;
                                confirmres.ref3Name = ref3Name;
                                confirmres.ref4Name = ref4Name;
                                confirmres.ref5Name = ref5Name;
                                confirmres.availablebalance = availablebalance.ToString();
                                confirmres.txnID = txnID.ToString();
                                confirmres.TodayTxnAmount = TodayTxnAmount;
                                confirmres.TodayTxnCount = TodayTxnCount;
                                confirmres.smsMsg = smsMsg;

                                return Utils.getConfirmRes(confirmres);
                                #endregion
                            }

                            else
                            {
                                resdecs = Utils.EsbResponseDescription(pinres.GetGiftCardPINResult.ResponseCode);
                                return GetErrorResponseWithAddBalance(pinres.GetGiftCardPINResult.ResponseCode, "Out of Stock", txnID, resdecs, agentID, agentAmount, isAgreement);

                                 
                            }

                        }

                    #endregion

                    #region <-- Pahtama Group -->
                    if (MapTaxID == "0000000000056")
                    {
                        string apiUrl = ConfigurationManager.AppSettings["PhatamaGroupAPI"].ToString() + "ConfirmPendingInvoice";
                        string apiKey = ConfigurationManager.AppSettings["PhatamaGroupAPIKey"].ToString();

                        writeLog("$$$$$$$$$$$$ Phatama Group confirmReq: $$$$$$$$$$$$");

                        PgToken = GetPGOAuthToken();

                        var json_serializer1 = new JavaScriptSerializer();
                        var json_serializerpinres = new JavaScriptSerializer();

                        SSLPost post = new SSLPost();

                        PGConfirmPendingRequest pgConfirmPendingReq = new PGConfirmPendingRequest();
                        pgConfirmPendingReq.Token = PgToken.Token;
                        pgConfirmPendingReq.PartnerCode = ConfigurationManager.AppSettings["1StopPGPartnerCode"].ToString();
                        pgConfirmPendingReq.CustomerID = ref2;
                        pgConfirmPendingReq.Invoices = lstInvoices;
                        mobileNo = ref3;
                        foreach (PGReqConfirmInvoice invoice in pgConfirmPendingReq.Invoices)
                        {
                            invoice.PaymentReference = txnID.ToString();
                            invoice.PaymentMethod = "1-Stop";
                        }

                        string parameter = json_serializer1.Serialize(pgConfirmPendingReq);
                        writeLog("Phatama Group confirmReq: " + parameter);

                        PGConfirmPendingInvoiceResponse pgConfirmPendingInvoiceResp = new PGConfirmPendingInvoiceResponse();
                        string responseData = string.Empty;

                        if (post.postDataPG(apiUrl, parameter, pgConfirmPendingReq.Token, out responseData, out errMsg))
                        {
                            writeLog("Phatama Group confirmRes:" + responseData);

                            pgConfirmPendingInvoiceResp = json_serializerpinres.Deserialize<PGConfirmPendingInvoiceResponse>(responseData);

                            if (pgConfirmPendingInvoiceResp.ErrorCode.Equals("0"))
                            {
                                if (!string.IsNullOrEmpty(pgConfirmPendingInvoiceResp.CustomerID))
                                {
                                    string inqResString = string.Empty;
                                    

                                    if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, ref5
                                        , "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                                    {
                                        writeLog("Error in ConfirmUpdate : " + errMsg);
                                        return Utils.getErrorRes("06", errMsg);
                                    }
                                    else
                                    {
                                        foreach (PGResConfirmInvoice invoice in pgConfirmPendingInvoiceResp.Invoices)
	                                    {
		                                    if (!_agentWCF.insertInvoice(txnID, invoice.InvoiceNumber, double.Parse(invoice.Amount), ref2, "1-STOP", out errmsg))
                                            {
                                                writeLog("Error in InsertInvoice : " + errMsg);
                                                return Utils.getErrorRes("06", errMsg);
                                            }
	                                    }
                                        //if (appType == "CS" || appType == "MS")
                                        //{
                                        //    writeLog("**********Service Fees:************" + serviceFee.ToString());
                                        //    SMSHelper smsH = new SMSHelper();
                                        //    smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();

                                        //    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, ref2Name, "", "Ref", ref1, ref2, "", txnID.ToString(),
                                        //        double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                        //    pgConfirmPendingInvoiceResp.smsMsg = smsMsg;
                                        //    try
                                        //    {
                                        //        writeLog("sendSMSWithTxnID starts.");
                                        //        //smsWcf.sendSMSWithTxnID(mobileNo, smsMsg, "EN", txnID);
                                        //        writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        //        smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                        //        writeLog("sendSMSWithTxnID ends.");
                                                
                                        //    }
                                        //    catch (Exception ex)
                                        //    {
                                        //        writeLog("Error in PG send sms : " + ex.ToString());
                                        //    }
                                        //}
                                    }
                                    pgConfirmPendingInvoiceResp.smsMsg = string.Empty;
                                    pgConfirmPendingInvoiceResp.TxnID = txnID.ToString();
                                    return Utils.getConfirmPendingInvoiceRes(pgConfirmPendingInvoiceResp);
                                }
                            }
                            else
                            {
                                writeLog("Response Fail: " + errMsg);
                                return GetErrorResponseWithAddBalance(pgConfirmPendingInvoiceResp.ErrorCode, pgConfirmPendingInvoiceResp.FailReason, txnID, resdecs, agentID, agentAmount, isAgreement);
                            }
                        }
                        else
                        {
                            writeLog("Response Fail: " + errMsg);
                            return Utils.getErrorRes("06", errMsg);
                        }

                    }
                    #endregion

                    #region <-- TelenorBB -->

                        else if (MapTaxID == "0000000000058")
                        {
                            writeLog("This is TelenorBB");
                            mobileNo = ref3;
                            double avalbal = 0;
                            double legbal = 0;
                             string responseData = "";

                            string token = string.Empty;
                            
                            if (IsTokenNullOrExpire(Token))
                            {
                                Token = GetOAuthToken();
                            }
                            string[] words = ref2.Split(' ');
                            string IMEI = words[0].ToString();
                            string Expiry = words[1].ToString();
                            string channelRef = ConfigurationManager.AppSettings["TelenorBBChannelCode"].ToString() + txnID;
                            TelenorBBConfirmReq Req = new TelenorBBConfirmReq();
                            Req.Token = Token.Token;
                            Req.Channel = ConfigurationManager.AppSettings["TelenorBBChannelCode"].ToString();
                            Req.ChannelRefID = channelRef;
                            Req.CustomerID = ref5;
                            Req.Amount = ref4;
                            Req.IMEI = IMEI;

                            var json_serializer1 = new JavaScriptSerializer();
                            var json_serializerpinres = new JavaScriptSerializer();
                            string parameter = json_serializer1.Serialize(Req);
                            string url = ConfigurationManager.AppSettings["TelenorBBConfirmUrl"].ToString();

                            TelenorBBConfirmRes Res = new TelenorBBConfirmRes();
                            SSLPost post = new SSLPost();
                            writeLog("TelenorBB ConfirmReq: " + parameter);

                            if (post.postDataCanalPlus(url, parameter, out responseData, out errMsg))
                            {

                                writeLog("TelenorBB ConfimRes: " + responseData);
                                JavaScriptSerializer sescriberes = new JavaScriptSerializer();
                                Res = sescriberes.Deserialize<TelenorBBConfirmRes>(responseData);

                                if (Res.ResponseCode == "0")
                                {
                                    if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref5, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                        agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                                    {
                                        writeLog("Error in Confirm Change Package Update : " + errMsg);
                                    }
                                    else
                                    {
                                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                                    }

                                    #region SMS
                                    if (appType == "CS" || appType == "MS")
                                    {
                                        if (string.IsNullOrEmpty(topupType) || topupType == "S")
                                        {
                                            SMSHelper smsH = new SMSHelper();
                                            smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();

                                            smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, "IME/Expiry", ref3Name, "Ref", ref1,ref2, ref5, txnID.ToString(),
                                                 double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                            try
                                            {
                                                writeLog("sendSMSWithTxnID starts.");
                                                smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                                writeLog("sendSMSWithTxnID ends.");
                                            }
                                            catch (Exception ex)
                                            {
                                                writeLog("Exception was occure when send sms:" + ex.Message);
                                            }
                                        }
                                    }
                                    #endregion SMS

                                    #region <-- Response Back To Client -->
                                    rescode = "00";
                                    resdecs = "Success";

                                    ConfirmResponseModel confirmres = new ConfirmResponseModel();
                                    confirmres.taxID = taxID;
                                    confirmres.email = email;
                                    confirmres.password = password;
                                    confirmres.messageid = messageid;
                                    confirmres.billername = billerName;
                                    confirmres.billerlogo = billerLogo;
                                    confirmres.rescode = rescode;
                                    confirmres.resdesc = resdecs;
                                    confirmres.ref1 = ref1; // Registered Mobile No
                                    confirmres.ref2 = ref2; //IMEI/Expiry
                                    confirmres.ref3 = ref5; // CustomerID
                                    confirmres.ref4 = ref4; //Amount
                                    confirmres.ref5 = mobileNo; //Mobile No
                                    confirmres.ref1Name = ref1Name;
                                    confirmres.ref2Name = ref2Name;
                                    confirmres.ref3Name = ref3Name;
                                    confirmres.ref4Name = "";
                                    confirmres.ref5Name = ref5Name;

                                    confirmres.availablebalance = availablebalance.ToString();
                                    confirmres.txnID = txnID.ToString();
                                    confirmres.TodayTxnAmount = TodayTxnAmount;
                                    confirmres.TodayTxnCount = TodayTxnCount;
                                    confirmres.smsMsg = smsMsg;

                                    return Utils.getConfirmRes(confirmres);
                                    #endregion
                                }
                                else
                                {

                                    return GetErrorResponseWithAddBalance(Res.ResponseCode, Res.ResponseDescription, txnID, Res.ResponseDescription, agentID, agentAmount, isAgreement);
                                }


                            }
                            else
                            {
                                resdecs = errMsg;
                                rescode = "06";

                                return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);


                            }


                        }

                    #endregion

                    #region <-- Viu -->

                    else if (MapTaxID == "0000000000067")
                    {
                        writeLog("This is Viu from EBA");
                        mobileNo = ref3;
                        double avalbal = 0;
                        double legalbal = 0;

                        giftcardConfirmReq pinreq = new giftcardConfirmReq();
                        GetGiftCardPINResults pinres = new GetGiftCardPINResults();
                        string aesKey = string.Empty;
                        aesKey = ConfigurationManager.AppSettings["EsbaAesKey"].ToString();
                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }
                        string billercode = string.Empty;
                        billercode = getBillerCode(MapTaxID);
                        pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                        pinreq.ChannelRefID = ConfigurationManager.AppSettings["ChannelCode"].ToString() + txnID;
                        pinreq.PriceType = ref2;
                        pinreq.Token = Token.Token;
                        pinreq.BillerCode = billercode;

                        var json_serializer1 = new JavaScriptSerializer();
                        string jsonReq = json_serializer1.Serialize(pinreq);
                        writeLog("EBA Viu  JasonReq:" + jsonReq);

                        SSLPost post = new SSLPost();

                        string jsonres = Utils.pinRequest(jsonReq, esbGetGiftCardMethod);
                        writeLog("EBA Viu  JasonRes:" + jsonres);

                        if (string.IsNullOrEmpty(jsonres))
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        var json_serializerpinres = new JavaScriptSerializer();
                        pinres = json_serializerpinres.Deserialize<GetGiftCardPINResults>(jsonres);

                        if (pinres.GetGiftCardPINResult.TransactionStatus == "0" && !string.IsNullOrEmpty(pinres.GetGiftCardPINResult.PIN))
                        {
                            pinres.GetGiftCardPINResult.PIN = Utils.AESDecryptText(pinres.GetGiftCardPINResult.PIN, aesKey);
                            ref4 = pinres.GetGiftCardPINResult.PIN + " " + pinres.GetGiftCardPINResult.ExpiryDate;
                            ref3 = pinres.GetGiftCardPINResult.SerialNumber;
                            amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                            #region <-- Update Transaction -->
                            if (!_agentWCF.ConfirmUpdate(txnID,
                                ref1, ref2, ref3, ref4, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                                agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog("Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                            }
                            #endregion

                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #region <-- Send SMS -->
                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();

                                    string[] words = ref4.Split(' ');
                                    string PIN = words[0].ToString();
                                    string Expiry = words[1].ToString();


                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, "Code", "Expiry", "", "Ref", PIN, Expiry, "", txnID.ToString(),
                                    double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);


                                    try
                                    {

                                        writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                                        writeLog("sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                    }
                                }
                                else
                                {
                                    //To Develop Airtime
                                }
                            }
                            #endregion
                            #region <-- Response Back To Client -->
                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = mobileNo;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);
                            #endregion
                        }

                        else
                        {
                            resdecs = Utils.EsbResponseDescription(pinres.GetGiftCardPINResult.ResponseCode);
                            return GetErrorResponseWithAddBalance(pinres.GetGiftCardPINResult.ResponseCode, "Out of Stock", txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                    }

                    #endregion

                    #region <-- AEON Confirm -->
                    else if (MapTaxID == ConfigurationManager.AppSettings["AEONMapTaxId"].ToString())
                    {
                        writeLog("This is AEON from EBA");

                        double avalbal = 0;
                        double legbal = 0;

                        var req = new AeonConfirmReq();
                        var res = new AeonConfirmRes();
                        var aesKey = ConfigurationManager.AppSettings["EsbaAesKey"].ToString();

                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }
                        req.Token = Token.Token;
                        req.Channel = ConfigurationManager.AppSettings["AeonChannel"].ToString();
                        req.ChannelRefId = ConfigurationManager.AppSettings["AeonChannelRefId"].ToString() + txnID;
                        req.AgreementNo = ref1;
                        req.CustomerName = ref2;
                        req.PaidAmount = amount;

                        var json_serializer1 = new JavaScriptSerializer();
                        string jsonReq = json_serializer1.Serialize(req);
                        writeLog("EBA Aeon  JasonReq:" + jsonReq);

                        SSLPost post = new SSLPost();
                        var url = ConfigurationManager.AppSettings["AeonConfirmUri"].ToString();
                        string jsonres = Utils.PaymentRequest(jsonReq, url);
                        writeLog("EBA Aeon  JasonRes:" + jsonres);

                        if (string.IsNullOrEmpty(jsonres))
                        {
                            resdecs = "No Response From EBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                        }

                        var json_serializerpinres = new JavaScriptSerializer();
                        res = json_serializerpinres.Deserialize<AeonConfirmRes>(jsonres);

                        if (res.ResponseCode == 0 && res.ResponseDescription == "Success")
                        {
                            if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, res.AeonTransactionID.ToString(),
                                    phoneNumber, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl,
                                    isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);
                                resdecs = "Error in update database";
                                rescode = "06";
                                if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                                {
                                    writeLog("Error in updateError : " + errMsg);
                                }
                                return Utils.getErrorRes(rescode, "Transaction fail");
                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                            }

                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                            #region <-- Send SMS -->

                            if (appType == "CS" || appType == "MS")
                            {
                                if (string.IsNullOrEmpty(topupType) || topupType == "S") //topup type is null or S
                                {
                                    SMSHelper smsH = new SMSHelper();
                                    smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();

                                    smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, ref2Name, "", ref4Name , ref1, ref2, "", res.AeonTransactionID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);
                                    
                                    try
                                    {

                                        writeLog("Mobile No :" + phoneNumber + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                                        smsWcf.sendSmsWithTxnIdLB(phoneNumber, smsMsg, sendername, txnID);
                                        writeLog("sendSMSWithTxnID ends.");
                                    }
                                    catch (Exception ex)
                                    {
                                    }
                                }
                                else
                                {
                                    //To Develop Airtime
                                }
                            }

                            #endregion

                            #region <-- Response Back To Client -->

                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = res.ResponseDescription;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = string.Empty;
                            confirmres.ref4 = res.AeonTransactionID.ToString();
                            confirmres.ref5 = phoneNumber;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref3Name = string.Empty;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }
                        else
                        {
                            resdecs = Utils.EsbResponseDescription(res.ResponseCode.ToString());
                            return GetErrorResponseWithAddBalance(res.ResponseCode.ToString(), res.ResponseDescription,
                                txnID, resdecs, agentID, agentAmount, isAgreement);
                        }
                    }
                    #endregion

                    #region <-- FttthOrWtth Confirm -->

                else if (MapTaxID == ConfigurationManager.AppSettings["FtthMapTaxId"].ToString() || MapTaxID == ConfigurationManager.AppSettings["WtthMapTaxId"].ToString())
                {
                    writeLog("This is FttthOrWtth from EBA");

                    var ebaUrl = string.Empty;

                    if (MapTaxID == ConfigurationManager.AppSettings["FtthMapTaxId"].ToString())
                    {
                        ebaUrl = ConfigurationManager.AppSettings["FtthConfirmUrl"].ToString();
                    }

                    if (MapTaxID == ConfigurationManager.AppSettings["WtthMapTaxId"].ToString())
                    {
                        ebaUrl = ConfigurationManager.AppSettings["WtthConfirmUrl"].ToString();
                    }

                    var device = ref3.Split('\\').ToList();
                    var imei = device.FirstOrDefault();
                    var ebaResponse = GetConfirmResponseForFtthOrWtth(ebaUrl, ref2, ref4, imei, txnID).Result;

                    if (ebaResponse == null)
                    {
                        resdecs = "No Response From EBA";
                        rescode = "06";

                        return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                    }


                    if (ebaResponse.ResponseCode == 0 && ebaResponse.ResponseDescription == "Success")
                    {
                        #region <-- Update Transaction -->

                        if (!_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, phoneNumber, "", "PA", "Paid Successfully", agentID, email, agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out errMsg, out batchID))
                        {
                            writeLog("Error in ConfirmUpdate : " + errMsg);
                            resdecs = "Error in update database";
                            rescode = "06";
                            if (!_agentWCF.updateError(txnID, "ER", resdecs, out errMsg))
                            {
                                writeLog("Error in updateError : " + errMsg);
                            }
                            return Utils.getErrorRes(rescode, "Transaction fail");
                        }
                        else
                        {
                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                        }

                        #endregion

                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());

                        #region <-- Send SMS -->

                        if (appType == "CS" || appType == "MS")
                        {
                            if (string.IsNullOrEmpty(topupType) || topupType == "S")
                                //topup type is null or S
                            {
                                SMSHelper smsH = new SMSHelper();
                                smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();

                                smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, ref2Name, ref3Name, "Ref", ref1, ref2, ref3, txnID.ToString(), double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                                try
                                {
                                    writeLog("Mobile No :" + phoneNumber + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID); 
                                    smsWcf.sendSmsWithTxnIdLB(phoneNumber, smsMsg, sendername, txnID);
                                    writeLog("sendSMSWithTxnID ends.");
                                }
                                catch (Exception ex)
                                {
                                }
                            }
                            else
                            {
                                //To Develop Airtime
                            }
                        }

                        #endregion

                        #region <-- Response Back To Client -->

                        rescode = "00";
                        resdecs = "Success";
                        ConfirmResponseModel confirmres = new ConfirmResponseModel();
                        confirmres.taxID = taxID;
                        confirmres.email = email;
                        confirmres.password = password;
                        confirmres.messageid = messageid;
                        confirmres.billername = billerName;
                        confirmres.billerlogo = billerLogo;
                        confirmres.rescode = rescode;
                        confirmres.resdesc = ebaResponse.ResponseDescription;
                        confirmres.ref1 = ref1;
                        confirmres.ref2 = ref2;
                        confirmres.ref3 = ref3;
                        confirmres.ref4 = ref4;
                        confirmres.ref5 = phoneNumber;
                        confirmres.ref6 = ReplaceAmpersandString(imgnrc);
                        confirmres.ref1Name = ref1Name;
                        confirmres.ref2Name = ref2Name;
                        confirmres.ref3Name = ref3Name;
                        confirmres.ref4Name = string.Empty;
                        confirmres.ref5Name = ref5Name;
                        confirmres.availablebalance = availablebalance.ToString();
                        confirmres.txnID = txnID.ToString();
                        confirmres.TodayTxnAmount = TodayTxnAmount;
                        confirmres.TodayTxnCount = TodayTxnCount;
                        confirmres.smsMsg = smsMsg;

                        return Utils.getConfirmRes(confirmres);

                        #endregion
                    }

                    else
                    {
                        resdecs = Utils.EsbResponseDescription(ebaResponse.ResponseCode.ToString());
                        return GetErrorResponseWithAddBalance(ebaResponse.ResponseCode.ToString(),
                            ebaResponse.ResponseDescription, txnID, resdecs, agentID, agentAmount,
                            isAgreement);
                    }


                }

                    #endregion

                    #region <-- TelenorDataPackage -->

                else if (MapTaxID == "0000000000071")
                {
                    double avalbal = 0;
                    double legbal = 0;

                    writeLog("This is TELENOR Data Package");

                    #region <-- TELENOR DataPackages -->

                    rescode = "01";
                    resdecs = "Data Package is NOT Available.";
                    mobileNo = ref3;
                    ref3 = "Airtime";
                    string responseresult = string.Empty;

                    #region Simulator

                    if (ConfigurationManager.AppSettings["isSimulator"].ToString() == "Y")
                    {
                        #region <-- Request To Telenor DataPackage -->

                        responseresult = "OK";
                        ref4 = responseresult + " " + DateTime.Now.ToShortDateString();
                        resdecs = responseresult.ToString().Trim();
                        writeLog("Response Description:" + resdecs);
                        writeLog("Response Result From Telenor AirTime:" + responseresult);
                        writeLog("Length:" + responseresult.Length);

                        writeLog("Response OK");
                        // ref4 = ref4 + " " + expiry;
                        //double availablebalance = 0;
                        //double ledgerbalance = 0;
                        //string errMsg = null;
                        amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                        if (
                            !_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, mobileNo, "", "PA",
                                "Paid Successfully", agentID, email,
                                agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,
                                out errMsg, out batchID))
                        {
                            writeLog("Error in ConfirmUpdate : " + errMsg);
                        }
                        else
                        {
                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " +
                                    availablebalance.ToString() + "| smsStatus:" + smsStatus);

                        }
                        writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " +
                                availablebalance.ToString());
                        rescode = "00";
                        resdecs = "Success";

                        ConfirmResponseModel conRes = new ConfirmResponseModel();
                        conRes.taxID = taxID;
                        conRes.email = email;
                        conRes.password = password;
                        conRes.messageid = messageid;
                        conRes.billerlogo = billerLogo;
                        conRes.billername = billerName;
                        conRes.rescode = rescode;
                        conRes.resdesc = resdecs;
                        conRes.ref1 = ref1;
                        conRes.ref2 = ref2;
                        conRes.ref3 = ref3;
                        conRes.ref4 = ref4;
                        conRes.ref5 = mobileNo;
                        conRes.ref1Name = ref1Name;
                        conRes.ref2Name = ref2Name;
                        conRes.ref3Name = ref3Name;
                        conRes.ref4Name = ref4Name;
                        conRes.ref5Name = ref5Name;
                        conRes.batchID = string.Empty;
                        conRes.availablebalance = availablebalance.ToString();
                        conRes.txnID = txnID.ToString();
                        conRes.TodayTxnCount = TodayTxnCount;
                        conRes.TodayTxnAmount = TodayTxnAmount;
                        conRes.smsMsg = smsMsg;
                        return Utils.getConfirmRes(conRes);

                        #endregion
                    }

                        #endregion

                    else
                    {
                        writeLog("$$$$$$$$ This Is EBA Tenenor DataPackage $$$$$$$$$");

                        #region <-- This is Easy Bill -->

                        #region <-- Initialize Variable -->

                        string oneStopRef = ConfigurationManager.AppSettings["ChannelCode"].ToString() +
                                            txnID;
                        EABAirTimeTopUpReq pinreq = new EABAirTimeTopUpReq();
                        AirTimeTopUpResults pinres = new AirTimeTopUpResults();
                        string aesKey = string.Empty;

                        if (IsTokenNullOrExpire(Token))
                        {
                            Token = GetOAuthToken();
                        }

                        pinreq.Token = Token.Token;
                        pinreq.Channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
                        pinreq.BillerCode = "TelenorDataPack";
                        pinreq.Amount = ref2;
                        pinreq.NetworkType = "GSM";
                        pinreq.ChannelRefID = oneStopRef;
                        pinreq.MobileNumber = mobileNo;


                        var json_serializer1 = new JavaScriptSerializer();

                        string jsonReq = json_serializer1.Serialize(pinreq);
                        writeLog("ESBA JasonReq:" + jsonReq);

                        #endregion

                        string jsonres = string.Empty;
                        jsonres = Utils.pinRequest(jsonReq, esbAirTimeTopup);

                        writeLog("ESBA JasonRes:" + jsonres);
                        if (string.IsNullOrEmpty(jsonres))
                        {
                            resdecs = "No Response From ESBA";
                            rescode = "06";

                            return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID,
                                agentAmount, isAgreement);
                        }
                        var json_serializerpinres = new JavaScriptSerializer();
                        pinres = json_serializerpinres.Deserialize<AirTimeTopUpResults>(jsonres);


                        if (pinres.AirTimeTopUpResult.TransactionStatus == 0)
                        {
                            // return ref4 as mobile request ref4
                            //ref4 = pinres.AirTimeTopUpResult.ChannelRefID + ":" + pinres.AirTimeTopUpResult.AirTimeToupTransactionID + " " + DateTime.Now.ToShortDateString();
                            amt = double.Parse((double.Parse(ref2)).ToString("#,##0.00"));

                            #region <-- Update Transaction -->

                            if (
                                !_agentWCF.ConfirmUpdate(txnID, ref1, ref2, ref3, ref4, mobileNo, "", "PA",
                                    "Paid Successfully", agentID, email,
                                    agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,
                                    out errMsg, out batchID))
                            {
                                writeLog("Error in ConfirmUpdate : " + errMsg);
                            }
                            else
                            {
                                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " +
                                        availablebalance.ToString() + "| smsStatus:" + smsStatus);

                            }

                            #endregion

                            writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " +
                                    availablebalance.ToString());

                            #region <-- Response Back To Client -->

                            rescode = "00";
                            resdecs = "Success";
                            ConfirmResponseModel confirmres = new ConfirmResponseModel();
                            confirmres.taxID = taxID;
                            confirmres.email = email;
                            confirmres.password = password;
                            confirmres.messageid = messageid;
                            confirmres.billername = billerName;
                            confirmres.billerlogo = billerLogo;
                            confirmres.rescode = rescode;
                            confirmres.resdesc = resdecs;
                            confirmres.ref1 = ref1;
                            confirmres.ref2 = ref2;
                            confirmres.ref3 = ref3;
                            confirmres.ref4 = ref4;
                            confirmres.ref5 = mobileNo;
                            confirmres.ref1Name = ref1Name;
                            confirmres.ref2Name = ref2Name;
                            confirmres.ref4Name = ref4Name;
                            confirmres.ref3Name = ref3Name;
                            confirmres.ref5Name = ref5Name;
                            confirmres.availablebalance = availablebalance.ToString();
                            confirmres.txnID = txnID.ToString();
                            confirmres.TodayTxnAmount = TodayTxnAmount;
                            confirmres.TodayTxnCount = TodayTxnCount;
                            confirmres.smsMsg = smsMsg;

                            return Utils.getConfirmRes(confirmres);

                            #endregion
                        }
                        else
                        {
                            return
                                GetErrorResponseWithAddBalance(
                                    pinres.AirTimeTopUpResult.ResponseCode.ToString(),
                                    "Transaction Not Successful Please Tryagain!", txnID,
                                    pinres.AirTimeTopUpResult.ResponseDescription, agentID, agentAmount,
                                    isAgreement);
                        }

                        #endregion
                    }

                    #endregion

                }

        #endregion

                }
                catch (Exception ex)
                {

                     if (MapTaxID != "7777777777777" && MapTaxID != ConfigurationManager.AppSettings["123RemitCashOut"].ToString() && MapTaxID != "0000000000018" && MapTaxID != "0000000000009" && MapTaxID != "0000000000010" && MapTaxID != "0000000000011" && MapTaxID!="0000000000055")//if not MalarMyaineRedeem,123RemitCashOut , MalarMyaineCodeGenerate , 663 Cashout , MercyCorps Generate,MercyCorpsRedeem will check balance.
                    {
                        writeLog("Error ConfirmToBiller : " + ex.ToString());
                        rescode = "97";
                        resdecs = "BIS API Error";
                        return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, resdecs, agentID, agentAmount, isAgreement);
                    }
                    
                    else
                    {
                        writeLog("Error ConfirmToBiller : " + ex.ToString());
                        rescode = "97";
                        resdecs = "BIS API Error";
                        return GeterrorResponse(rescode, resdecs, txnID, resdecs);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            writeLog("Error ConfirmToBiller : " + ex.ToString());
            rescode = "97";
            resdecs = "BIS API Error";
            return Utils.getErrorRes(rescode, resdecs);
        }
        return null;
    }

    public string CanalPlusConfirmMonthlyPayment(string ref1, string ref2, string ref3, string ref4, string ref5, string channelRef, string amount, string appType, long txnID, string email, string isAgreement, double availablebalance, string topupType
        , string MapTaxID, string taxID, string messageid, string password, string ref1Name, string ref2Name, string ref3Name, string ref4Name, string ref5Name, string totalAmount, string sendername, string TodayTxnAmount, string TodayTxnCount)
    {
        string responseData = "";
        int batchID = 0;
        string smsMsg = string.Empty;
        string rescode = "";
        string resdecs = "";

        EBACanalPlusConfirmReq ECanalPlusConfirmreq = new EBACanalPlusConfirmReq();
        ECanalPlusConfirmreq.Token = Token.Token;
        ECanalPlusConfirmreq.Channel = ConfigurationManager.AppSettings["CanalPlusChannelCode"].ToString();
        ECanalPlusConfirmreq.ChannelRefID = channelRef;
        ECanalPlusConfirmreq.CardNumber = ref1;
        ECanalPlusConfirmreq.idBase = ref5;
        ECanalPlusConfirmreq.SubscriberNumber = ref2;
        ECanalPlusConfirmreq.ContractNumber = ref4;
        ECanalPlusConfirmreq.Amount = amount;

        var json_serializer1 = new JavaScriptSerializer();
        var json_serializerpinres = new JavaScriptSerializer();
        string parameter = json_serializer1.Serialize(ECanalPlusConfirmreq);
        string url = ConfigurationManager.AppSettings["CanalPlusConfirmUri"].ToString();

        CanalPlusSubscribeRes canalPlusRes = new CanalPlusSubscribeRes();
        SSLPost post = new SSLPost();
        writeLog("Confirm Request Post to EBA(CanalPlus)");
        if (post.postDataCanalPlus(url, parameter, out responseData, out errMsg))
        {
            writeLog("Confirm Response from EBA(CanalPlus)" + responseData);
            JavaScriptSerializer sescriberes = new JavaScriptSerializer();
            canalPlusRes = sescriberes.Deserialize<CanalPlusSubscribeRes>(responseData);
            
            if (canalPlusRes.TransactionStatus == "0")
            {
                //ref4 = ref3.Replace(" ", "") + " " + canalPlusRes.response.expire_date.ToString("dd-MM-yyyy");

                //EndDate stored in ref4

                if (!_agentWCF.ConfirmUpdate(txnID,
                 ref1, ref2, ref3, canalPlusRes.EndDate, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                 agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance,out  errMsg, out  batchID))
                {
                    writeLog("Error in ConfirmUpdate : " + errMsg);
                }
                else
                {
                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);

                }
                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                if (appType == "CS" || appType == "MS")
                {
                    if (string.IsNullOrEmpty(topupType) || topupType == "S")//topup type is null or S
                    {
                        SMSHelper smsH = new SMSHelper();
                        smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();

                        smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, ref3Name, "Expiry", "Ref", ref1, ref3, canalPlusRes.EndDate, txnID.ToString(),
                               double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                        try
                        {
                            writeLog("sendSMSWithTxnID starts.");
                            smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                            writeLog("sendSMSWithTxnID ends.");
                        }
                        catch (Exception ex)
                        {
                            writeLog("Exception was occure when send sms:" + ex.Message);
                        }
                    }
                }

                #region <-- Response Back To Client -->
                rescode = "00";
                resdecs = "Success";
                ConfirmResponseModel confirmres = new ConfirmResponseModel();
                confirmres.taxID = taxID;
                confirmres.email = email;
                confirmres.password = password;
                confirmres.messageid = messageid;
                confirmres.billername = billerName;
                confirmres.billerlogo = billerLogo;
                confirmres.rescode = rescode;
                confirmres.resdesc = resdecs;
                confirmres.ref1 = ref1; //Card Number
                confirmres.ref2 = ref2; //Subscriber Number
                confirmres.ref3 = ref3; //PackageName
                confirmres.ref4 = canalPlusRes.EndDate; //EndDate
                confirmres.ref5 = mobileNo; //Mobile No
                confirmres.ref1Name = ref1Name; //Card Number
                confirmres.ref2Name = ref2Name; //Subscriber Number
                confirmres.ref3Name = ref3Name; //Product                                    
                confirmres.ref4Name = ref4Name; //EndDate
                confirmres.ref5Name = ref5Name; //Mobile No

                confirmres.availablebalance = availablebalance.ToString();
                confirmres.txnID = txnID.ToString();
                confirmres.TodayTxnAmount = TodayTxnAmount;
                confirmres.TodayTxnCount = TodayTxnCount;
                confirmres.smsMsg = smsMsg;

                return Utils.getConfirmRes(confirmres);
                #endregion
            }
            else
            {
                resdecs = "Error From EBA Side";
                rescode = "06";
                return GetErrorResponseWithAddBalance("06", resdecs, txnID, canalPlusRes.TransactionStatus, agentID, agentAmount, isAgreement);
            }
        }
        else
        {
            writeLog("Error Posting To CanalPlus:" + errMsg);
            return GetErrorResponseWithAddBalance("06", "System Busy!", txnID, "Cannot Post!", agentID, agentAmount, isAgreement);
        }
        return "";
    }

    public string CanalPlusConfirmChangePackage(string ref1, string ref2, string ref3, string ref4, string ref5, string channelRef, string amount, string appType, long txnID, string email, string isAgreement, double availablebalance, string topupType
        , string MapTaxID, string taxID, string messageid, string password, string ref1Name, string ref2Name, string ref3Name, string ref4Name, string ref5Name, string totalAmount, string sendername, string TodayTxnAmount, string TodayTxnCount, string sessionid, string packageCode, string durationCode)
    {
        string responseData = "";
        int batchID = 0;
        string smsMsg = string.Empty;
        string rescode = "";
        string resdecs = "";

        EBACanalPlusChangePackageConfirmReq canalPlusChangePackageConfirmReq = new EBACanalPlusChangePackageConfirmReq();
        canalPlusChangePackageConfirmReq.Token = Token.Token;
        canalPlusChangePackageConfirmReq.CardNumber = ref1;
        canalPlusChangePackageConfirmReq.NumSubscriber = ref2;
        canalPlusChangePackageConfirmReq.NumContract = ref4;
        //canalPlusChangePackageConfirmReq.Duration = ref4;
        canalPlusChangePackageConfirmReq.idBase = ref5;
        canalPlusChangePackageConfirmReq.Package = packageCode;
        canalPlusChangePackageConfirmReq.Duration = durationCode;
        canalPlusChangePackageConfirmReq.Channel = ConfigurationManager.AppSettings["CanalPlusChannelCode"].ToString();
        canalPlusChangePackageConfirmReq.ChannelRefID = channelRef;
        canalPlusChangePackageConfirmReq.Amount = amount;
        canalPlusChangePackageConfirmReq.TotalAmount = totalAmount;
        
        
        canalPlusChangePackageConfirmReq.SessionID = sessionid;

        var json_serializer1 = new JavaScriptSerializer();
        var json_serializerpinres = new JavaScriptSerializer();
        string parameter = json_serializer1.Serialize(canalPlusChangePackageConfirmReq);
        string url = ConfigurationManager.AppSettings["CanalPlusRegisterApiUrl"].ToString();

        CanalPlusChangePackageConfirmRes canalPlusChangePackageConfirmRes = new CanalPlusChangePackageConfirmRes();
        SSLPost post = new SSLPost();
        writeLog("Confirm Change Package Request from EBA(CanalPlus) : " + parameter);
        if (post.postDataCanalPlus(url, parameter, out responseData, out errMsg))
        {
            writeLog("Confirm Change Package Response from EBA(CanalPlus) : " + responseData);
            JavaScriptSerializer sescriberes = new JavaScriptSerializer();
            canalPlusChangePackageConfirmRes = sescriberes.Deserialize<CanalPlusChangePackageConfirmRes>(responseData);
            
            if (canalPlusChangePackageConfirmRes.ResponseCode == "0")
            {
                if (!_agentWCF.ConfirmUpdate(txnID,
                 ref1, ref2, ref3, canalPlusChangePackageConfirmRes.EndDate, mobileNo, "", "PA", "Paid Successfully", agentID, email,
                 agentAmount, agentFeeDbl, isAgreement, smsStatus, availablebalance, out  errMsg, out  batchID))
                {
                    writeLog("Error in Confirm Change Package Update : " + errMsg);
                }
                else
                {
                    writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString() + "| smsStatus:" + smsStatus);
                }
                writeLog("After update = AgentAmount : " + agentAmount + " | Balance : " + availablebalance.ToString());
                if (appType == "CS" || appType == "MS")
                {
                    if (string.IsNullOrEmpty(topupType) || topupType == "S")
                    {
                        SMSHelper smsH = new SMSHelper();
                        smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();

                        smsMsg = smsH.getMessageBiller(agentName, MapTaxID, billerName, ref1Name, ref3Name, "Expiry", "Ref", ref1, ref3, canalPlusChangePackageConfirmRes.EndDate, txnID.ToString(),
                               double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalAmount).ToString("#,##0.00"), branchCode);

                        try
                        {
                            writeLog("sendSMSWithTxnID starts.");
                            smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                            writeLog("sendSMSWithTxnID ends.");
                        }
                        catch (Exception ex)
                        {
                            writeLog("Exception was occure when send sms:" + ex.Message);
                        }
                    }
                }
                #region <-- Response Back To Client -->
                rescode = "00";
                resdecs = "Success";
                EBACanalPlusChangePackageConfirmRes confirmRes = new EBACanalPlusChangePackageConfirmRes();
                confirmRes.ref1 = canalPlusChangePackageConfirmRes.CardNumber;
                confirmRes.ref2 = ref2;
                confirmRes.ref3 = canalPlusChangePackageConfirmRes.Package[0].Label + " (" + canalPlusChangePackageConfirmRes.Duration[0].Label + ")";
                confirmRes.ref4 = canalPlusChangePackageConfirmRes.EndDate;
                confirmRes.ref5 = mobileNo;
                confirmRes.ref1Name = ref1Name;
                confirmRes.ref2Name = ref2Name;
                confirmRes.ref3Name = ref3Name;
                confirmRes.ref4Name = ref4Name;
                confirmRes.ref5Name = ref5Name;
                confirmRes.PackageAmount = canalPlusChangePackageConfirmRes.PackageAmount;
                confirmRes.CanalPlusRefID = canalPlusChangePackageConfirmRes.CanalPlusRefID;
                confirmRes.ServiceFee = canalPlusChangePackageConfirmRes.ServiceFee;
                confirmRes.TransactionAmount = canalPlusChangePackageConfirmRes.TransactionAmount;
                confirmRes.Package = canalPlusChangePackageConfirmRes.Package;
                confirmRes.Duration = canalPlusChangePackageConfirmRes.Duration;
                confirmRes.txnID = txnID.ToString();
                confirmRes.TodayTxnCount = TodayTxnCount;
                confirmRes.TodayTxnAmount = TodayTxnAmount;
                confirmRes.ResponseCode = rescode;
                confirmRes.ResponseDescription = resdecs;
                confirmRes.smsMsg = smsMsg;

                return Utils.getChangePackageConfirmRes(confirmRes);
                #endregion
            }
            else
            {
                resdecs = "Error From EBA Side";
                rescode = "06";
                return GetErrorResponseWithAddBalance(rescode, resdecs, txnID, canalPlusChangePackageConfirmRes.ResponseCode, agentID, agentAmount, isAgreement);
            }
        }
        else
        {
            writeLog("Error Posting To CanalPlus:" + errMsg);
            return GetErrorResponseWithAddBalance("06", "System Busy!", txnID, "Cannot Post!", agentID, agentAmount, isAgreement);
        }
        return "";
    }

    CreditLimitResultModel isEnoughCreditTermsAndLimit(CreditLimitModel creditLimitMdl)
    {

        CreditLimitResultModel result = new CreditLimitResultModel();
        result.result = false;
        string errmsg;
        #region <-- Check Credit Terms and Condation. -->
        try
        {
            if (!String.IsNullOrEmpty(credittemrstart))
            {
                writeLog("Credit term strt Not NULL/Credit Term Start:" + credittemrstart);
                dtStart = DateTime.Parse(credittemrstart);

                double convertcreditterm = double.Parse(creditterm);
                dtStartplusCreditterm = dtStart.AddDays(convertcreditterm);
            }

            // dtStart.Date.AddDays(addday);
            if ((double.Parse(creditlimit) > 0 && double.Parse(creditterm) > 0))//if ((creditlimit != "0.00" && creditterm != "0"))//This condition will work if both creditlimit and creditterm have values
            {
                writeLog("Credit Limit and Credit Terms is grater than 0 creditlimit:" + creditlimit + "|creditterm:" + creditterm);
                if (dtNow < dtStartplusCreditterm)
                {
                    writeLog("Credit Term Not Expired yet currentdate:" + dtNow + "|creditterms:" + dtStartplusCreditterm);

                    avalcredit = double.Parse(creditlimit) - double.Parse(creditLimitMdl.totalAgentAmount);
                    writeLog("avaliable credit:" + avalcredit);
                    if (avalcredit >= agentAmount)
                    {
                        writeLog("Credit Enough = Agent ID : " + agentID.ToString() + "| CreditLimit = " + creditlimit + "| Total Using Amount :" + creditLimitMdl.totalAgentAmount + " | Avaliable Credit : " + avalcredit.ToString());
                        result.result = true;
                    }
                    else
                    {
                        writeLog("Credit Limit Exceeded = Agent ID : " + agentID.ToString() + "| CreditLimit = " + creditlimit + "| Total Using Amount :" + creditLimitMdl.totalAgentAmount + " | Avaliable Credit : " + avalcredit.ToString() + " | Agent Amount :" + agentAmount.ToString());


                        result.rescode = "10";
                        result.resdesc = "Credit Limit Exceeded";
                        //  return Utils.getErrorRes(rescode, resdecs);
                    }
                }
                else
                {
                    writeLog("Credit Term Expired = Agent ID : " + agentID.ToString() + " | CreditTerm : " + creditterm + " | CreditTermStartDate :" + credittemrstart + " | CurrentDate " + dtNow);

                    if (isAutoCreditReset == "Y")
                    {

                        writeLog("Auto Reset Credit Terms is Yes");
                        if (_agentWCF.resetCredit(this.branchCode, this.agentCode,out errmsg))
                        {
                            writeLog("ResetCreditLimit Success");
                            result.result = true;
                            if (isSendCreditResetEmail == "Y")
                            {

                                Task.Factory.StartNew(() => sendCreditResetEmail(this.agentCode, this.agentName, this.branchCode, creditterm, creditlimit, dtNow.ToShortDateString()));

                            }
                        }
                        else
                        {
                            writeLog("Error in reset Credit Terms" + errmsg);

                            result.rescode = "10";
                            result.resdesc = "Credit Term Expired";

                        }

                    }
                    else
                    {

                        result.rescode = "10";
                        result.resdesc = "Credit Term Expired";
                    }
                }


            }
            else if (double.Parse(creditlimit) > 0 || double.Parse(creditterm) > 0)//else if (creditlimit != "0.00" || creditterm != "0")//This Condition will work if there have value in creditlimit or in creditterm
            {
                writeLog("Credit Limit OR Credit Terms is grater than 0 creditlimit:" + creditlimit + "|creditterm:" + creditterm);
                if (double.Parse(creditlimit) > 0)
                {
                    writeLog("Credit Limit  is grater than 0 creditlimit:" + creditlimit);
                    avalcredit = double.Parse(creditlimit) - double.Parse(creditLimitMdl.totalAgentAmount);
                    if (avalcredit >= agentAmount)
                    {
                        writeLog("Credit Enough = Agent ID : " + agentID.ToString() + " | Credit : " + avalcredit.ToString());
                        result.result = true;
                    }
                    else
                    {
                        writeLog("Credit Limit Exceeded = Agent ID : " + agentID.ToString() + "| CreditLimit = " + creditlimit + "| Total Using Amount :" + creditLimitMdl.totalAgentAmount + " | Avaliable Credit : " + avalcredit.ToString() + " | Agent Amount :" + agentAmount.ToString());

                        result.rescode = "10";
                        result.resdesc = "Credit Limit Exceeded";

                    }
                }
                else if (double.Parse(creditterm) > 0)
                {
                    writeLog("Credit Credit Terms is grater than 0 creditterm:" + creditterm);
                    if (dtNow < dtStartplusCreditterm)
                    {
                        writeLog("Credit Terms Still avaliable CurrentDate:" + dtNow + "ExpiryDate:" + dtStartplusCreditterm);
                        result.result = true;
                    }
                    else
                    {
                        writeLog("Credit Term Expired = Agent ID : " + agentID.ToString() + " | CreditTerm : " + creditterm + " | CreditTermStartDate :" + credittemrstart + " | CurrentDate " + dtNow);
                        if (isAutoCreditReset == "Y")
                        {
                            writeLog("Auto Reset Credit Terms is Yes");
                            if (_agentWCF.resetCredit(this.branchCode, this.agentCode,out errmsg))
                            {
                                writeLog("ResetCreditLimit Success");
                                result.result = true;
                                if (isSendCreditResetEmail == "Y")
                                {

                                    Task.Factory.StartNew(() => sendCreditResetEmail(this.agentCode, this.agentName, this.branchCode, creditterm, creditlimit, dtNow.ToShortDateString()));

                                }
                            }
                            else
                            {
                                writeLog("Error in reset Credit Terms" + errmsg);
                                result.rescode = "10";
                                result.resdesc = "Credit Term Expired";
                            }

                        }
                        else
                        {
                            result.rescode = "10";
                            result.resdesc = "Credit Term Expired";
                        }
                    }
                }
            }
            else
            {
                result.result = true;
            }
        }
        catch (Exception ex)
        {
            writeLog("Excetpion Occur when Checking Credit Terms and Limit" + ex.ToString());
        }
        return result;
        #endregion
    }

    #region <-- 663 -->
    public Response663 confirmRequestTo663(Request663 request663Data)
    {
        TripleDES tripleDes = new TripleDES();
        string Mpin = string.Empty;
        string requestClearText = string.Empty;
        string encryptedRequestData = string.Empty;
        string agentMobileNo = string.Empty;
        string password = string.Empty;
        if (request663Data.transactionType == ConfigurationManager.AppSettings["663UserInfoPrefix"].ToString())
        {
            agentMobileNo = request663Data.receiverMobileNo.Remove(0, 1);
            password = ConfigurationManager.AppSettings["663InquiryPass"].ToString();
        }
        else
        {
            agentMobileNo = ConfigurationManager.AppSettings["AgentMobileNo"].ToString();
            password = ConfigurationManager.AppSettings["663Password"].ToString();
        }

        string UrlTo663 = ConfigurationManager.AppSettings["663Url"].ToString();
        string clearMpin = agentMobileNo + password;
        request663Data.agentMobileNo = agentMobileNo;
        Mpin = Utils.GenerateSHA256String(clearMpin);
        requestClearText = map663Request(request663Data);
        encryptedRequestData = getEncrypted663RequestData(requestClearText, Mpin);
        string DataToPost = string.Format("source={0}&msg={1}", agentMobileNo, encryptedRequestData);
        SSLPost sslPost = new SSLPost();
        writeLog(" $$ 663 Request string :" + UrlTo663 + "?" + DataToPost);
        string responseString663 = sslPost.postTo663(UrlTo663, DataToPost);
        writeLog(" $$ 663 Response string:" + responseString663);
        Response663 response663 = map663Response(responseString663.Replace("\r", string.Empty).Replace("\n", string.Empty));
        return response663;
    }
    public Response663 map663Response(string responseString663)
    {
        Response663 response663 = new Response663();
        response663.Result = false;
        string[] responseArray;
        if (!string.IsNullOrEmpty(responseString663))
        {
            responseArray = responseString663.Split('|');
            if (responseArray.Count() > 0 && responseArray.Count() == 1)
            {
                response663.Result = false;
                response663.ResponseDescription = responseArray[0];
            }
            else if (responseArray.Count() > 0 && responseArray.Count() == 2)
            {
                if (responseArray[0] == "0")
                {
                    response663.Result = true;
                }
                else
                {
                    response663.Result = false;
                }
                response663.ResponseCode = responseArray[0];
                response663.ResponseDescription = responseArray[1];
            }
            else if (responseArray.Count() > 0 && responseArray.Count() == 3)
            {
                if (responseArray[0] == "0")
                {
                    response663.Result = true;
                }
                else
                {
                    response663.Result = false;
                }
                response663.ResponseCode = responseArray[0];
                response663.ExterResponse = responseArray[1];
                response663.ResponseDescription = responseArray[2];
            }
            else if (responseArray.Count() > 0 && responseArray.Count() == 9)
            {
                if (responseArray[0] == "0" && responseArray[1] == ConfigurationManager.AppSettings["663User"] && responseArray[2] != "INACTIVE")
                {
                    response663.Result = true;
                }
                else
                {
                    response663.Result = false;
                }
                response663.ResponseCode = responseArray[0];
                response663.ExterResponse = responseArray[1];
                response663.ResponseDescription = responseArray[2];
            }
            else if (responseArray.Count() > 0 && responseArray.Count() == 10)
            {
                if (responseArray[0] == "0")
                {
                    response663.Result = true;
                }
                else
                {
                    response663.Result = false;
                }
                response663.ResponseCode = responseArray[0];
                response663.ResponseDescription = responseArray[1];
                response663.AgentCode = responseArray[2];
                response663.AgentName = responseArray[3];
                response663.Amount = responseArray[4];
                response663.RefID = responseArray[5];
                response663.responseCts = responseArray[6];
                response663.RequestCts = responseArray[7];
                response663.ClientType = responseArray[8];
                response663.TransType = responseArray[9];
            }
        }

        return response663;
    }
    public string getEncrypted663RequestData(string clearText, string Mpin)
    {
        TripleDES tripleDes = new TripleDES();
        string encrypted663RequestData = string.Empty;
        writeLog("$$ 663 Clear Request String:" + clearText + "|Mpin:" + Mpin);
        encrypted663RequestData = tripleDes.get3DESEncryptedMessage1(clearText, Mpin);

        return encrypted663RequestData;
    }
    public string map663Request(Request663 request663Data)
    {
        string Os = ConfigurationManager.AppSettings["Os"].ToString();
        string appVer = ConfigurationManager.AppSettings["AppVersion"].ToString();
        string requestClearText = string.Empty;
        string signatureString = ConfigurationManager.AppSettings["signatureString"].ToString();
        if (request663Data.transactionType == ConfigurationManager.AppSettings["663CashInPrefix"].ToString())
        {
            requestClearText = get663CashInReqData(request663Data, Os, appVer, signatureString);
        }
        else if (request663Data.transactionType == ConfigurationManager.AppSettings["663RemitPrefix"].ToString())
        {
            requestClearText = get663RemitReqData(request663Data, Os, appVer, signatureString);
        }
        else if (request663Data.transactionType == ConfigurationManager.AppSettings["663CashOutPrefix"].ToString())
        {
            requestClearText = get663CashOutReqData(request663Data, Os, appVer, signatureString);
        }
        else if (request663Data.transactionType == ConfigurationManager.AppSettings["663UserInfoPrefix"].ToString())
        {
            requestClearText = get663InfoReqData(request663Data, Os, appVer, signatureString);
        }
        return requestClearText;
    }
    public string get663CashInReqData(Request663 request663Data, string Os, string appVer, string signatureString)
    {
        string requestClearText = string.Empty;

        requestClearText = string.Format("{0} {1} {2} {3} {4} {5} {6}", request663Data.transactionType, request663Data.receiverMobileNo.Remove(0, 1), request663Data.txnAmount, request663Data.txnID, Os, appVer, signatureString);
        return requestClearText;
    }
    public string get663RemitReqData(Request663 request663Data, string Os, string appVer, string signatureString)
    {
        string requestClearText = string.Empty;
        try
        {
            requestClearText = string.Format("{0} {1} {2} {3} {4} {5} {6} {7}", request663Data.transactionType, request663Data.agentMobileNo, request663Data.receiverMobileNo.Remove(0, 1), request663Data.txnAmount, request663Data.txnID, Os, appVer, signatureString);
        }
        catch (Exception ex)
        {
            writeLog(ex.ToString());
        }
        return requestClearText;
    }

    public string get663CashOutReqData(Request663 request663Data, string Os, string appVer, string signatureString)
    {
        string requestClearText = string.Empty;
        try
        {
            requestClearText = string.Format("{0} {1} {2} {3} {4} {5} {6} {7}", request663Data.transactionType, request663Data.receiverMobileNo.Remove(0, 1), request663Data.txnAmount, request663Data.oTp, Os, appVer, signatureString, request663Data.txnID);
        }
        catch (Exception ex)
        {
            writeLog(ex.ToString());
        }
        return requestClearText;
    }

    public string get663InfoReqData(Request663 request663Data, string Os, string appVer, string signatureString)
    {
        string requestClearText = string.Empty;
        try
        {
            requestClearText = string.Format("{0} {1} {2} {3}", request663Data.transactionType, Os, appVer, signatureString);
        }
        catch (Exception ex)
        {
            writeLog(ex.ToString());
        }

        return requestClearText;

    }
    #endregion

    bool sendmail123Error(string agentcode, string agentname, string paymentcode, string exmsg, out string msg)
    {
        writeLog("Ok in entering sendmail123Error method");
        StringBuilder sb = new StringBuilder();
        sb.Append(ConfigurationManager.AppSettings["greeting123"].ToString() + "<br/>");
        sb.Append(ConfigurationManager.AppSettings["msgbody123"].ToString() + "<br/><br/>");
        sb.Append("<table>");
        sb.Append("<tr><td>PaymentCode</td><td>:</td><td><strong>" + paymentcode + "</strong></td><td></td><td></td><td></td></tr>");
        sb.Append("<tr><td>AgentName </td><td>:</td><td><strong>" + agentname + "</strong> .</td><td>agent Code </td><td>:</td><td><strong>" + agentcode + "</strong> .</td></tr>");
        sb.Append("<tr><td>Exception Msg</td><td>:</td><td colspan=\"3\">" + exmsg + "</td></tr>");



        sb.Append("</table><br/>");


        sb.Append("<strong>Thank You & Regards</Strong>, <br/>");
        sb.Append("Auto Alert Mail");

        //  EmailApiModel mailapi = new EmailApiModel();
        string fromEmailAddress = ConfigurationManager.AppSettings["fromEmail"].ToString();
        string toEmail = ConfigurationManager.AppSettings["toEmail"].ToString();
        string subject = ConfigurationManager.AppSettings["subject"].ToString() + " at " + System.DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss");
        string msgBody = sb.ToString();

        //emailAPIWS.EmailAPISoapClient emailApi = new emailAPIWS.EmailAPISoapClient();
        //string errMsg = string.Empty;
        //bool sent = false;
        //sent = emailApi.sendEmail(toEmail, "", "", fromEmailAddress, fromEmailAddress, subject, msgBody
        // , "", "", "", false, "", "", true, out errMsg);

        AwsEmailAPI.ServiceSoapClient emailApi = new AwsEmailAPI.ServiceSoapClient();
        string errMsg = string.Empty;
        bool sent = false;
        // sent = emailApi.sendEmail(toEmail, "", "", fromEmailAddress, fromEmailAddress, subject, msgBody
        // , "", "", "", false, "", "", true, out errMsg);
        sent = emailApi.sendAWSMail(fromEmailAddress, fromEmailAddress, toEmail, "", "", subject, msgBody);
        if (sent)
        {

            msg = errMsg;
            writeLog("Return ture email was sent" + msg);
            return true;

        }
        else
        {
            msg = errMsg;
            return false;

        }
    }

    bool sendmail(string card, string price, out string msg)
    {
        writeLog("Ok in entering sendmail method");
        StringBuilder sb = new StringBuilder();
        sb.Append(ConfigurationManager.AppSettings["greeting"].ToString() + "<br/>");
        sb.Append(ConfigurationManager.AppSettings["msgbody"].ToString() + "<br/><br/>");
        sb.Append("<table>");
        sb.Append("<tr><td>Card </td><td>:</td><td><strong>" + card + "</strong> .</td><td>Price </td><td>:</td><td><strong>" + price + "</strong> .</td></tr>");



        sb.Append("</table></br>");


        sb.Append("<strong>Thank You & Regards</Strong>, <br/>");
        sb.Append("Auto Alert Mail");

        //  EmailApiModel mailapi = new EmailApiModel();
        string fromEmailAddress = ConfigurationManager.AppSettings["fromEmail"].ToString();
        string toEmail = ConfigurationManager.AppSettings["toEmail"].ToString();
        string subject = ConfigurationManager.AppSettings["subject"].ToString() + " at " + System.DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss");
        string msgBody = sb.ToString();

        //emailAPIWS.EmailAPISoapClient emailApi = new emailAPIWS.EmailAPISoapClient();
        //string errMsg = string.Empty;
        //bool sent = false;
        //sent = emailApi.sendEmail(toEmail, "", "", fromEmailAddress, fromEmailAddress, subject, msgBody
        // , "", "", "", false, "", "", true, out errMsg);
        AwsEmailAPI.ServiceSoapClient emailApi = new AwsEmailAPI.ServiceSoapClient();
        string errMsg = string.Empty;
        bool sent = false;
        sent = emailApi.sendAWSMail(fromEmailAddress, fromEmailAddress, toEmail, "", "", subject, msgBody);
        if (sent)
        {

            msg = errMsg;
            writeLog("Return ture email was sent" + msg);
            return true;

        }
        else
        {
            msg = errMsg;
            return false;

        }
    }

    public bool doSMS(long txnID, string mobNo)
    {
        writeLog(".....doSMS.....");
        try
        {
            DataSet ds;
            string errMsg = "";
            string sendername = ConfigurationManager.AppSettings["senderName"].ToString();
            //string taxID = "";
            // double totalAmount
            string agentName; string taxID; string biller; string ref1Name; string ref2Name; string ref3Name; string ref4Name;
            string ref1Value; string ref2Value; string ref3Value; string ref4Value; string amount; string serviceFee; string totalamount;
            string mapTaxID = string.Empty;
            if (!_agentWCF.getTransactionDetail(txnID,out ds, out errMsg))
            {
                writeLog("Error in getTransactionDetail : " + errMsg);
                return false;
            }
            else
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    SMSHelper smsH = new SMSHelper();

                    taxID = ds.Tables[0].Rows[0]["TAXID"].ToString();
                    mapTaxID = ds.Tables[0].Rows[0]["MAPTAXID"].ToString();
                    biller = ds.Tables[0].Rows[0]["COMPANYNAME"].ToString();
                    agentName = ds.Tables[0].Rows[0]["AGENTNAME"].ToString();
                    ref1Name = ds.Tables[0].Rows[0]["REF1NAME"].ToString();
                    ref2Name = ds.Tables[0].Rows[0]["REF2NAME"].ToString();
                    ref3Name = ds.Tables[0].Rows[0]["REF3NAME"].ToString();
                    ref4Name = ds.Tables[0].Rows[0]["REF4NAME"].ToString();
                    ref1Value = ds.Tables[0].Rows[0]["REFID1"].ToString();
                    ref2Value = ds.Tables[0].Rows[0]["REFID2"].ToString();
                    ref3Value = ds.Tables[0].Rows[0]["REFID3"].ToString();
                    ref4Value = ds.Tables[0].Rows[0]["REFID4"].ToString();


                    amount = ds.Tables[0].Rows[0]["TRANSACTIONAMOUNT"].ToString();
                    serviceFee = ds.Tables[0].Rows[0]["SERVICEFEE"].ToString();

                    branchCode = ds.Tables[0].Rows[0]["AGENTBRANCHCODE"].ToString();
                    // ref4Value = ds.Tables[0].Rows[0]["COMPANYNAME"].ToString();
                    //string HotLine = string.Empty;
                    string smsMsg = "";
                    smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                    if (mapTaxID == ConfigurationManager.AppSettings["MPT-CDMA"].ToString() || mapTaxID == ConfigurationManager.AppSettings["MPT-GSM"].ToString() || mapTaxID == ConfigurationManager.AppSettings["MPT-MEC"].ToString() ||
                        mapTaxID == ConfigurationManager.AppSettings["TELENOR"].ToString() || mapTaxID == ConfigurationManager.AppSettings["OOREDOO"].ToString() || mapTaxID == ConfigurationManager.AppSettings["MPT - CDMA450"].ToString())
                    {
                        writeLog("This is Telcos Topup.");
                        //  HotLine = ConfigurationManager.AppSettings["MPTHotLine"].ToString();

                        string[] words = ref4Value.Split(' ');
                        string PIN = words[0].ToString();
                        string Expiry = words[1].ToString();

                        smsMsg = smsH.getMessageTopup(agentName, mapTaxID, biller, PIN, ref3Value, Expiry,
                           double.Parse(amount).ToString("#,###.00"), branchCode); //updated by hnt 20-March-2015 change biller Name to Biller



                    }
                    else if (mapTaxID == "0000000000001" || mapTaxID == "1111111111111" || mapTaxID == "0000000000002" || mapTaxID == "0000000000003" || mapTaxID == "0000000000004" || mapTaxID == "0000000000015" || mapTaxID == "0000000000016" || mapTaxID == "0000000000012")
                    {
                        writeLog("This is GiftCards.");
                        string[] words = ref4Value.Split(' ');
                        string PIN = words[0].ToString();
                        string Expiry = words[1].ToString();
                        totalamount = (double.Parse(amount) + double.Parse(serviceFee)).ToString();
                        smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, "Code", "Expiry", "", "Ref", PIN, Expiry, "", txnID.ToString(),
                        double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalamount).ToString("#,##0.00"), branchCode);



                    }
                    else if (mapTaxID == "0000000000005")
                    {
                        writeLog("This is 1Stop+");
                        totalamount = (double.Parse(amount) + double.Parse(serviceFee)).ToString();
                        smsMsg = smsH.getMessageBiller1Stop(agentName, mapTaxID, biller, ref1Name, ref2Name, "", "Ref", ref1Value, ref2Value, "", txnID.ToString(),
                                       double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalamount).ToString("#,##0.00"), branchCode); ;
                    }

                    else if (mapTaxID == "0000000000006")
                    {
                        writeLog("This is Putet.");
                        totalamount = (double.Parse(amount) + double.Parse(serviceFee)).ToString();
                        smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, "Code", "Duration", "", "Ref", ref3Value, ref2Value, "", txnID.ToString(),
                                   double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalamount).ToString("#,##0.00"), branchCode);

                    }
                    else
                    {
                        //ref3Name = "Code";
                        //ref3Value = ds.Tables[0].Rows[0]["REFID3"].ToString();
                        //ref4Name = "Expiry";
                        //ref4Value = ds.Tables[0].Rows[0]["REFID4"].ToString();
                        //ref4Value = ref4Value.Substring(18,10);
                        //writeLog("Expiry--" + ref4Value);
                        //SMSHelper smsH = new SMSHelper();
                        writeLog("This is Bill Payment & Others.");
                        //smsWCF.ServiceClient smsWcf = new smsWCF.ServiceClient();
                        totalamount = (double.Parse(amount) + double.Parse(serviceFee)).ToString();
                        //smsMsg = smsH.getMessageBiller(agentName, taxID, biller, ref3Name, ref4Name, "", "Ref", ref3Value, ref4Value, "", txnID.ToString(),
                        //    double.Parse(amount).ToString("#,##0.00"),
                        //    double.Parse(serviceFee).ToString("#,##0.00"), totalAmount.ToString("#,##0.00"), branchCode);//updated by hnt 21-March-2015 change biller Name to Biller


                        smsMsg = smsH.getMessageBiller(agentName, mapTaxID, biller, ref1Name, ref2Name, "", "Ref", ref1Value, ref2Value, "", txnID.ToString(),
                                       double.Parse(amount).ToString("#,##0.00"), serviceFee, double.Parse(totalamount).ToString("#,##0.00"), branchCode);


                        //writeLog("Ref1Name : " + ref1Name + " | Ref2Name : " + ref2Name);
                        // writeLog("............SmSText........." + smsMsg);
                        //change parameter billerName to biller

                    }

                    //if (!smsWcf.sendSMS(mobNo, smsMsg, "EN"))
                    //{
                    //    writeLog("Error in sendSMS to this number : " + mobNo);
                    //    return false;
                    //}
                    //else
                    //{
                    //    return true;
                    //}
                    try
                    {
                        writeLog("sendSMSWithTxnID starts." + " Mobile No: " + mobNo);
                        // smsWcf.sendSMSWithTxnID(mobNo, smsMsg, "EN", txnID);
                        writeLog("Mobile No :" + mobileNo + "| Message :" + smsMsg + "| Sender Name :" + sendername + "|txn ID :" + txnID);
                        smsWcf.sendSmsWithTxnIdLB(mobileNo, smsMsg, sendername, txnID);
                        writeLog("sendSMSWithTxnID ends.");
                    }
                    catch (Exception ex)
                    {
                    }
                    //if (taxID == ConfigurationManager.AppSettings["TELENOR"].ToString())////TELENOR
                    //{
                    //    HotLine = ConfigurationManager.AppSettings["TELHotLine"].ToString();
                    //}
                    //if (taxID == ConfigurationManager.AppSettings["OOREDOO"].ToString())////OREDOO
                    //{
                    //    HotLine = ConfigurationManager.AppSettings["ORDHotLine"].ToString();
                    //}
                }
                else
                {
                    writeLog("No Data for : " + txnID.ToString());
                    return false;
                }
            }
        }
        catch (Exception ex)
        {
            writeLog("Error in doSMS : " + ex.ToString());
        }
        return false;
    }

    bool CheckIsESBAGiftCard(string taxID)
    {
        bool result = false;
        if (taxID == "0000000000001")
        {
            if (ConfigurationManager.AppSettings["IsItunesESBA"].ToString() == "Y") result = true;
        }
        else if (taxID == "0000000000002")
        {

            if (ConfigurationManager.AppSettings["IsGooglePlayESBA"].ToString() == "Y") result = true;

        }
        else if (taxID == "0000000000003")
        {
            if (ConfigurationManager.AppSettings["IsSkypeESBA"].ToString() == "Y") result = true;
        }
        else if (taxID == "0000000000004")
        {
            if (ConfigurationManager.AppSettings["IsMyantalkESBA"].ToString() == "Y") result = true;
        }
        else if (taxID == "0000000000015")
        {
            if (ConfigurationManager.AppSettings["IsFaceBookESBA"].ToString() == "Y") result = true;
        }
        else if (taxID == "0000000000016")
        {
            if (ConfigurationManager.AppSettings["IsSteamESBA"].ToString() == "Y") result = true;
        }
        else if (taxID == "0000000000051")
        {
            if (ConfigurationManager.AppSettings["IsViberOutEBA"].ToString() == "Y") result = true;
        }
        else if (taxID == "0000000000012")
        {
            if (ConfigurationManager.AppSettings["IsYTalkEBA"].ToString() == "Y") result = true;
        }
        else if (taxID == "1111111111111")
        {
            if (ConfigurationManager.AppSettings["IsMyPlayEBA"].ToString() == "Y") result = true;
        }

        else if (taxID == "0000000000057")
        {
            if (ConfigurationManager.AppSettings["IsMyAnandaEBA"].ToString() == "Y") result = true;
        }
        return result;
    }

    bool CheckIsMyanPayAirtime(string taxID)
    {
        bool result = false;
        if (taxID == "6666666666666")
        {
            if (ConfigurationManager.AppSettings["MyanpayOoredooAirtime"].ToString() == "Y") result = true;
        }
        else if (taxID == "3333333333333")
        {
            if (ConfigurationManager.AppSettings["MyanpayMPTAirtime"].ToString() == "Y") result = true;
        }
        else if (taxID == "0000000000061")
        {
            if (ConfigurationManager.AppSettings["MyanpayMPTAirtime"].ToString() == "Y") result = true;
        }
        return result;
    }

    bool CheckIsEBAAirtime(string taxID)
    {
        bool result = false;
        if (taxID == "6666666666666" || taxID == "0000000000062")
        {
            if (ConfigurationManager.AppSettings["EABOoredooAirtime"].ToString() == "Y") result = true;
        }


        return result;
    }

    string getBillerCode(string taxID)
    {
        string billerCode = string.Empty;
        if (taxID == "0000000000001")
        {
            billerCode = "iTunes";
        }
        if (taxID == "0000000000002")
        {
            billerCode = "GooglePlay";
        }
        else if (taxID == "0000000000003")
        {
            billerCode = "Skype";
        }
        else if (taxID == "0000000000004")
        {
            billerCode = "Myantalk";
        }
        else if (taxID == "0000000000015")
        {
            billerCode = "Facebook";
        }
        else if (taxID == "0000000000016")
        {
            billerCode = "SW";
        }
        else if (taxID == "0000000000051")
        {
            billerCode = "ViberOut";
        }
        else if (taxID == "0000000000012")
        {
            billerCode = "YTalk";
        }
        else if (taxID == "1111111111111")
        {
            billerCode = "MyPlay";
        }
        else if (taxID == "0000000000055")
        {
            billerCode = "iflix";
        }
        else if (taxID=="0000000000057")
        {
            billerCode="Ananda";
        }
        else if (taxID == "0000000000058")
        {
            billerCode = "TelenorBB";
        }
        else if (taxID == "0000000000067")
        {
            billerCode = "Viu";
        }
       
        return billerCode;
    }

    public static string getInvoiceForPG(string xml)
    {
        string xmlInvoices = "";
        if (xml.Contains("<Invoices>"))
        {
            string regularExpressionPattern1 = @"<Invoices>(.*?)<\/Invoices>";
            Regex regex = new Regex(regularExpressionPattern1, RegexOptions.Singleline);
            MatchCollection collection = regex.Matches(xml.ToString());

            Match m = collection[0];
            xmlInvoices = m.Groups[1].Value;
        }

        return xmlInvoices;
    }

    bool IsValidateConfirmReq(string xml, Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out string ref1, out string ref2, out string ref3, out string ref4, out string ref5, out string img1, out string ref6, out string inquirytype, out string amount, out string LocLatitude, out string LocLongitude, out string agentfee, out string productdesc, out string taxID, out string messageid, out string confirmedby, out string topupType, out string NewTaxID, out string canalPlusConfirmType, out string sessionID, out string packageCode, out string durationCode, out List<PGReqConfirmInvoice> lstInvoices,out string LoginType)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;

        ref1 = string.Empty;
        ref2 = string.Empty;
        ref3 = string.Empty;
        ref4 = string.Empty;//Add By Tz for Easypoint
        ref5 = string.Empty;//Add By Tz for Easypoint
        ref6 = string.Empty;//Add By Tz For Grand guardian image
        amount = string.Empty;
        inquirytype = string.Empty;
        LocLatitude = string.Empty;
        LocLongitude = string.Empty;
        agentfee = string.Empty;
        productdesc = string.Empty;
        taxID = string.Empty;

        messageid = string.Empty;
        confirmedby = string.Empty;
        topupType = string.Empty;// Added By HNT 31-03-2015
        img1 = string.Empty;//for grand guardian
        NewTaxID = string.Empty;
        string MapTaxID = string.Empty;
        canalPlusConfirmType = string.Empty;
        sessionID = string.Empty;
        packageCode = string.Empty;
        durationCode = string.Empty;
        lstInvoices = new List<PGReqConfirmInvoice>();
        LoginType = string.Empty;
        //agentID = 0;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("MessageID"))
        {
            messageid = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
            confirmedby = email;
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("TaxID"))
        {
            taxID = ht["TaxID"].ToString();
            if (getMapTaxID(taxID, out MapTaxID))
            {
                NewTaxID = MapTaxID;
                writeLog("OldTaxID:" + taxID + "NewMappedTaxID:" + NewTaxID);
            }
            else
            {

                code = "06";
                desp = "Invalid Request";
                writeLog("MapTaxID is Missing OldTaxID:" + taxID + "NewMappedTaxID:" + NewTaxID);
                return false;
            }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TaxID> Tag");
            return false;
        }

        //if (ht.ContainsKey("SMS"))
        //{
        //    taxID = ht["SMS"].ToString();
        //}
        //else
        //{
        //    code = "06";
        //    desp = "Invalid Request";
        //    writeLog("Error in Validation : Missing Password <TaxID> Tag");
        //    return false;
        //}

        if (ht.ContainsKey("Ref1"))
        {
            ref1 = ht["Ref1"].ToString();

            if (MapTaxID == "0000000000028")
            {
                if (!string.IsNullOrEmpty(ref1))
                    ref1 = ref1 + " " + "kyats card";

            }
            if (String.IsNullOrEmpty(ref1))
            {
                switch (MapTaxID)
                {
                    case "3333333333333":
                        ref1 = "101";
                        //operatorName = "(MPT-GSM)";
                        break;
                    case "2222222222222":
                        ref1 = "102";
                        /// operatorName = "(MPT-CDMA)";
                        break;
                    case "0000000000024":
                        ref1 = "C4";
                        //operatorName="(MPT-CDMA450)";
                        break;
                    case "5555555555555":
                        ref1 = "111";
                        // operatorName = "(TLN-GSM)";
                        break;
                    case "0000000000054":
                        ref1 = "222";
                        // operatorName = "(MYT-GSM)";
                        break;
                    case "6666666666666":
                        ref1 = "121";
                        //operatorName = "(ORD-GSM)";
                        break;
                    case "4444444444444":
                        ref1 = "103";
                        // operatorName = "(MPT-MEC)";
                        break;

                    case "0000000000001":
                        ref1 = "211";
                        // operatorName = "(iTunes)";
                        break;
                    case "0000000000002":
                        ref1 = "221";
                        // operatorName = "(GooglePlay)";
                        break;
                    case "0000000000003":
                        ref1 = "231";
                        // operatorName = "(Skype)";
                        break;

                    case "0000000000004":
                        ref1 = "241";
                        // operatorName = "(MyanTalk)";
                        break;
                    case "0000000000015":
                        ref1 = "261";
                        // operatorName = "(Facebook)";
                        break;
                    case "0000000000016":
                        ref1 = "251";
                        // operatorName = "(Steam Wallet)";
                        break;
                    case "0000000000017":
                        ref1 = "easypoint";
                        break;
                    case "0000000000018":
                        ref1 = "MLM";
                        // operatorName = "(MalarMyaine Corps)";
                        break;
                    case "7777777777777":
                        ref1 = "MLMredeem";
                        // operatorName = "(MalarMyaine Corps)";
                        break;
                    case "0000000000030":
                        //operator Name="Vakok"
                        ref1 = "Vakok";
                        break;
                    case "0000000000051":
                        ref1 = "ViberOut";
                        break;

                    case "0000000000010":
                        ref1 = "mercycrop";
                        // operatorName = "(Mercy Corps)";
                        break;
                    case "0000000000011":
                        ref1 = "mercycropredeem";
                        // operatorName = "(Mercy Corps)";
                        break;
                    case "0000000000012":
                        ref1 = "YTalk";
                        // operatorName = "(YTalk)";
                        break;
                    case "1111111111111":
                        ref1 = "MyPlay";
                        // operatorName = "(My Play)";
                        break;
                    case "0000000000052":
                        ref1 = "0000000000052";
                        //operatorName = "CanalPlus";
                        break;
                    case "0000000000055":
                        ref1 = "261";                       
                        break;

                    case "0000000000057":
                        ref1 = "271";
                        break;

                    case "0000000000067":
                        ref1 = "Viu";
                        break;
                        
                }
            }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Ref1> Tag");
            return false;
        }

        if (ht.ContainsKey("Ref2"))
        {
            ref2 = ht["Ref2"].ToString();
            if (MapTaxID == "0000000000028")
            {
                if (string.IsNullOrEmpty(ref1))
                {
                    ref1 = ref2 + " " + "kyats card";
                }

            }
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Ref2> Tag");
            return false;
        }
        if (ht.ContainsKey("Ref3"))
        {
            ref3 = ht["Ref3"].ToString();
        }
        if (ht.ContainsKey("Ref4"))
        {
            ref4 = ht["Ref4"].ToString();
        }
        if (ht.ContainsKey("Ref5"))
        {
            if (MapTaxID == "0000000000019")
            {
                img1 = ht["Ref5"].ToString();

            }
            else
            {
                ref5 = ht["Ref5"].ToString();
            }
        }

        if (ht.ContainsKey("Ref6"))
        {
            ref6 = ht["Ref6"].ToString();
        }
        if (ht.ContainsKey("Amount"))
        {

            amount = ht["Amount"].ToString();

        }

        if (ht.ContainsKey("LocLatitude"))
        {
            LocLatitude = ht["LocLatitude"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing LocLatitude <LocLatitude> Tag");
            return false;
        }
        if (ht.ContainsKey("LocLongitude"))
        {
            LocLongitude = ht["LocLongitude"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing LocLongitude <LocLongitude> Tag");
            return false;
        }
        if (ht.ContainsKey("AgentFee"))
        {
            agentfee = ht["AgentFee"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing AgentFee <AgentFee> Tag");
            return false;
        }

        if (ht.ContainsKey("ProductDesc"))
        {
            productdesc = ht["ProductDesc"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing ProductDesc <ProductDesc> Tag");
            return false;
        }
        if (ht.ContainsKey("TopupType"))
        {
            topupType = ht["TopupType"].ToString();
        }

        if (taxID != "1111111111111")
        {
            if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password) || String.IsNullOrEmpty(ref1) || String.IsNullOrEmpty(taxID)) //String.IsNullOrEmpty(ref2) ||
            {
                code = "07";
                desp = "Invalid Message";
                writeLog("Error in Validation : Data is Null or Empty");
                return false;
            }
        }
        if (ht.ContainsKey("LoginType"))
        {
            LoginType = ht["LoginType"].ToString();
        }
        if (taxID == "0000000000052")
        {
            if (ht.Contains("PaymentType"))
            {
                canalPlusConfirmType = ht["PaymentType"].ToString();
            }
            // FOR Canal+ CHANGE PACKAGE 
            if (!string.IsNullOrEmpty(canalPlusConfirmType))
            {
                if (ht.Contains("PackageCode") && ht.Contains("DurationCode"))
                {
                    packageCode = ht["PackageCode"].ToString();
                    durationCode = ht["DurationCode"].ToString();
                }
                else
                {
                    code = "06";
                    desp = "Invalid Request";
                    writeLog("Error in Validation : Missing <PackageCode> OR <DurationCode> TAG");
                    return false;
                }
            }

            if (ht.Contains("SessionID"))
            {
                sessionID = ht["SessionID"].ToString();
            }
        }
        if (MapTaxID == "0000000000056")
        {
            if (ht.ContainsKey("Invoices"))
            {                
                string lstInvoiceXml = "<Invoices>" + getInvoiceForPG(xml) + "</Invoices>";

                XmlSerializer serializer = new XmlSerializer(typeof(Invoices));
                Invoices result;
                using (TextReader reader = new StringReader(lstInvoiceXml))
                {
                    result = new Invoices();
                    result = (Invoices)serializer.Deserialize(reader);
                }

                PGReqConfirmInvoice confirmInvoice;
                foreach (Invoice inv in result.Invoice)
                {
                    if (string.IsNullOrEmpty(inv.Amount) || inv.Amount == "0")
                    {
                        code = "06";
                        desp = "Invalid Invoice Amount";
                        writeLog("Error in Validation : Invalid Invoice Amount");
                        return false;
                    }
                    confirmInvoice = new PGReqConfirmInvoice
                    {
                        Amount = inv.Amount,
                        InvoiceNumber = inv.InvoiceNumber
                    };

                    lstInvoices.Add(confirmInvoice);       
                }
            }
        }

        //Check Authecation
        string errmsg = string.Empty;
        DataSet ds = null;
        // DataSet dsBiller = null;
        bool flg = false;
        string passwordDB = "";
        string userStatusDB = "";
        string appver = string.Empty;
        string userlvl = string.Empty;
        flg = _agentWCF.getAuthentication(email, password, out ds,out errmsg);
        if (flg)
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                int.TryParse(ds.Tables[0].Rows[0]["AGENTID"].ToString(), out agentID);
                this.agentCode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
                this.servicePercent = Convert.ToString(ds.Tables[0].Rows[0]["AGENTFEEPERCENT"]);
                this.agentName = ds.Tables[0].Rows[0]["AGENTNAME"].ToString();
                this.agentUserUniqueID = ds.Tables[0].Rows[0]["AGENTUSERUNIQUEID"].ToString();
                this.branchCode = Convert.ToString(ds.Tables[0].Rows[0]["BRANCHCODE"]);
                this.branchName = ds.Tables[0].Rows[0]["BRANCHNAME"].ToString();
                // this.DeviceToken = ds.Tables[0].Rows[0]["DEVICETOKEN"] == DBNull.Value ? string.Empty : ds.Tables[0].Rows[0]["DEVICETOKEN"].ToString();
                passwordDB = Convert.ToString(ds.Tables[0].Rows[0]["AGENTUSERPASSWORD"]);
                userStatusDB = Convert.ToString(ds.Tables[0].Rows[0]["USERSTATUS"]);
                appver = Convert.ToString(ds.Tables[0].Rows[0]["APPVERSION"]);
                userlvl = (ds.Tables[0].Rows[0]["USERLEVEL"] == DBNull.Value) ? "A" : ds.Tables[0].Rows[0]["USERLEVEL"].ToString();


                writeLog("AGETN ID : " + agentID.ToString() + " | AGENT CODE : " + agentCode + " | AGENT NAME : " + agentName + " | BRANCH CODE : " + branchCode);


                if (passwordDB != password)
                {
                    code = "05";
                    desp = "Incorrect Password";
                    writeLog(desp + errmsg);
                    return false;
                }
                else if (userStatusDB != "Y")
                {
                    code = "05";
                    desp = "Login ID Locked";
                    writeLog(desp + errmsg);
                    return false;
                }
                else if (userlvl == "A")
                {
                    code = "05";
                    desp = "Admin level is not allow";
                    writeLog(desp + errmsg);
                    return false;
                }

            }
            else
            {
                code = "05";
                desp = "Incorrect LoginID";
                writeLog(desp + errmsg);
                return false;
            }

        }
        else
        {
            code = "--";
            desp = "DB Error";
            writeLog("Error in Authentication : " + errmsg);
            return false;

        }

        #region <-- Check APP version -->

        string newbillers = ConfigurationManager.AppSettings["NewBiller"].ToString();//new adding biller
        writeLog("get new biller OK");
        string newappver = ConfigurationManager.AppSettings["newappver"].ToString();//newbiller Taxid and appversion 
        writeLog("get new appver OK");
        Hashtable newappverht = Utils.getMerchantCodeHashtable(newappver);//get app version of Biller's TaxID
        writeLog("add new appverto hashtableOK");
        Hashtable httnewbillers = Utils.getMerchantCodeHashtable(newbillers);
        writeLog("Add newbillers to hashtable OK");
        string tempnewappver = string.Empty;
        appver = string.IsNullOrEmpty(appver) ? "1.0.3" : appver;
        string currentappver = appver.Replace(".", "");//Split . from app version 
        writeLog("currentappver" + currentappver);



        if (newappverht.ContainsKey(taxID))
        {
            tempnewappver = newappverht[taxID].ToString();
            writeLog("tempappver" + tempnewappver);
            if (int.Parse(tempnewappver) > int.Parse(currentappver))//Compare if new app version is larger current app version or not
            {
                code = "05";
                desp = "Please update your application to use " + httnewbillers[taxID].ToString() + ",For upate your application go to menu then press about after that press on upgrade button.";
                writeLog("Version Out of Date currentversion : " + currentappver + " New Version :" + tempnewappver);
                return false;
            }
            writeLog("Check Appver OK");

        }

        #endregion



        return true;

    }

    bool authentication(string email, string password, out string code, out string desp)
    {
        string errmsg = string.Empty;
        DataSet ds = null;
        // DataSet dsBiller = null;
        bool flg = false;
        string passwordDB = "";
        string userStatusDB = "";
        flg = _agentWCF.getAuthentication(email, password,out ds, out errmsg);
        if (flg)
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                int.TryParse(ds.Tables[0].Rows[0]["AGENTID"].ToString(), out agentID);
                this.agentCode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
                this.servicePercent = Convert.ToString(ds.Tables[0].Rows[0]["AGENTFEEPERCENT"]);
                this.agentName = ds.Tables[0].Rows[0]["AGENTNAME"].ToString();
                this.branchName = ds.Tables[0].Rows[0]["BRANCHNAME"].ToString();
                passwordDB = Convert.ToString(ds.Tables[0].Rows[0]["AGENTUSERPASSWORD"]);
                userStatusDB = Convert.ToString(ds.Tables[0].Rows[0]["USERSTATUS"]);
                //added by nila 20150623
                this.branchCode = Convert.ToString(ds.Tables[0].Rows[0]["BRANCHCODE"]);

                writeLog("AGETN ID : " + agentID.ToString() + " | AGENT CODE : " + agentCode + " | AGENT NAME : " + agentName + " | BRANCH CODE : " + branchCode);


                if (passwordDB != password)
                {
                    code = "05";
                    desp = "Incorrect Password";
                    writeLog(desp + errmsg);
                    return false;
                }
                else if (userStatusDB != "Y")
                {
                    code = "05";
                    desp = "Login ID Locked";
                    writeLog(desp + errmsg);
                    return false;
                }


            }
            else
            {
                code = "05";
                desp = "Incorrect LoginID";
                writeLog(desp + errmsg);
                return false;
            }
            //}
            //else
            //{
            //    code = "05";
            //    desp = "Authentication Failed";
            //    writeLog("Error in Authentication : " + errmsg);
            //    return false;
            //}

        }
        else
        {
            code = "--";
            desp = "DB Error";
            writeLog("Error in Authentication : " + errmsg);
            return false;

        }

        code = "00";
        desp = "Success";
        return true;
    }

    bool IsValidateConfirmRes123(Hashtable ht, out string code, out string desp, out string version, out string ts, out string rescode, out string resdesc)
    {
        code = "";
        desp = "";
        rescode = string.Empty;
        version = string.Empty;
        ts = string.Empty;
        string messageid = string.Empty;
        string agentcode = string.Empty;
        string hash = string.Empty;
        resdesc = string.Empty;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("MessageID"))
        {
            messageid = ht["MessageID"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("ResCode"))
        {
            rescode = ht["ResCode"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <ResCode> Tag");
            return false;
        }

        if (ht.ContainsKey("ResDesc"))
        {
            resdesc = ht["ResDesc"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <ResDesc> Tag");
            return false;
        }

        if (ht.ContainsKey("AgentCode"))
        {
            agentcode = ht["AgentCode"].ToString();
            //agentcode = "1STOP";
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <AgentCode> Tag");
            return false;
        }
        if (ht.ContainsKey("HashValue"))
        {
            hash = ht["HashValue"].ToString();
            //agentcode = "1STOP";
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <HashValue> Tag");
            return false;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(messageid) || String.IsNullOrEmpty(rescode) || String.IsNullOrEmpty(agentcode))
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        ArrayList ar = new ArrayList();
        ar.Add(version);
        ar.Add(ts);
        ar.Add(messageid);
        ar.Add(agentcode);
        ar.Add(rescode);


        ar.Sort();

        StringBuilder sb = new StringBuilder();
        foreach (string item in ar)
        {
            sb.Append(item);
        }



        //Check Authecation
        string errmsg = string.Empty;
        string secretkey = string.Empty;
        DataSet ds = null;
        bool flg = false;
        secretkey = ConfigurationManager.AppSettings["123SecretKey"].ToString();
        #region <-- Authentication Function Currently Not use yet -->
        //flg = _agentWCF.getAuthentication(out errmsg, out ds, email, password);
        //if (flg)
        //{
        //    if (ds.Tables[0].Rows.Count > 0)
        //    {
        //        int.TryParse(ds.Tables[0].Rows[0]["AGENTID"].ToString(), out agentid);
        //        this.agentcode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
        //        secretkey = Convert.ToString(ds.Tables[0].Rows[0]["SECRETKEY"]);
        //    }
        //    else
        //    {
        //        code = "05";
        //        desp = "Authentication Failed";
        //        writeLog("Error in Authentication : " + errmsg);
        //        return false;
        //    }

        //}
        //else
        //{
        //    code = "--";
        //    desp = "UnknownError";
        //    writeLog("Error in Authentication : " + errmsg);
        //    return false;

        //}
        #endregion

        if (!Utils.verifyHashValue(hash, sb.ToString(), secretkey))
        {
            code = "--";
            desp = "InvalidHashKey123";
            writeLog("Error in hashv 123 res : " + errmsg);
            return false;
        }
        if (ht.ContainsKey("ResCode"))
        {
            code = ht["ResCode"].ToString();
            if (code == "BP_ST_00")
            {
                code = "00";
                desp = "Success";
            }
            else
            {
                code = Utils.changeStatusCodeToCode(code);
                desp = ht["ResDesc"].ToString();
                //return false;
            }
        }
        return true;


    }

    bool IsValidateConfirmReqOneCash(Hashtable ht, out string rescode, out string resdesc, out string version, out string msgid, out string ref1, out string ref2, out string ref3)
    {

        rescode = string.Empty;
        version = string.Empty;
        string ts = string.Empty;
        resdesc = string.Empty;
        ref1 = string.Empty;
        ref2 = string.Empty;
        ref3 = string.Empty;
        msgid = string.Empty;

        string reshashvalue = string.Empty;
        string tmphashvalue = string.Empty;
        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }


        if (ht.ContainsKey("MessageID"))
        {
            msgid = ht["MessageID"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("ResCode"))
        {
            rescode = ht["ResCode"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("ResDesc"))
        {
            resdesc = ht["ResDesc"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("SerialNo"))
        {
            ref1 = ht["SerialNo"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing SerialNo <SerialNo> Tag");
            return false;
        }
        if (ht.ContainsKey("Expiry"))
        {
            ref2 = ht["Expiry"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Expiry <Expiry> Tag");
            return false;
        }
        if (ht.ContainsKey("CashCode"))
        {
            ref3 = ht["CashCode"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Ref1 <Ref1> Tag");
            return false;
        }


        if (ht.ContainsKey("HashValue"))
        {
            reshashvalue = ht["HashValue"].ToString();
        }
        // writeLog("Confirm Response OneCash HashValue :" + reshashvalue);

        tmphashvalue = Utils.hashstrOneCashConfirmResCC(msgid, rescode, resdesc, ref3);
        // writeLog("Confirm Response A2A HashValue :" + tmphashvalue);

        //if (reshashvalue != tmphashvalue)
        //{
        //    rescode = "05";
        //    resdesc = "Hash Value Missmatch";
        //    writeLog("Inquiry Hash Value Missmatch.");
        //    return false;
        //}


        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(rescode))
        {
            rescode = "07";
            resdesc = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        return true;


    }

    #region <-- ValidateConfirmResponse Awba -->
    public bool IsValidateConfirmResAwba(Hashtable ht, out string rescode, out string resdesc, out string version, out string msgid, out string ref1, out string ref2, out string ref3, out string ref4, out string ts, out string receiptno)
    {
        //
        rescode = string.Empty;
        version = string.Empty;
        ts = string.Empty;
        resdesc = string.Empty;
        ref1 = string.Empty;//slipNo
        ref2 = string.Empty;//CustomerID
        ref3 = string.Empty;//Due Date
        ref4 = string.Empty;






        msgid = string.Empty;
        //  amt = string.Empty;
        string reshashvalue = string.Empty;

        receiptno = string.Empty;

        // string serialno=string.Empty;

        //                 <InquiryRes>

        // <Version></Version> 

        // <TimeStamp></TimeStamp>

        // <MessageID></MessageID> 

        // <CustomerID>ref2</CustomerID

        // <SlipNo>ref1</SlipNo> 

        //<ResCode>rescode</ResCode> 

        //<Amount>amt</Amount> 

        //<InterestAmount>ref5</InterestAmount> 

        //<PanelFeesAmount>ref6</PanelFeesAmount > 

        //<DueDate>ref3</DueDate> 

        //<LoanType>loanType</LoanType> 

        //<Desc>loandesc</Desc> 

        // <HashValue>reshashvalue</HashValue> 

        //</InquiryRes>
        string expiry = string.Empty;
        //string replacetime=string.Empty;
        reshashvalue = string.Empty;
        string tmphashvalue = string.Empty;
        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Version Tag is Missing");
            return false;
        }
        if (ht.ContainsKey("ReceiptNo"))
        {
            ref3 = ht["ReceiptNo"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("ReceiptNo Tag is Missing");

            return false;
        }

        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("TimeStamp Tag is Missing");
            return false;
        }


        if (ht.ContainsKey("MessageID"))
        {
            msgid = ht["MessageID"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("MessageID Tag is Missing");

            return false;
        }

        if (ht.ContainsKey("CustomerID"))
        {
            ref2 = ht["CustomerID"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("CustomerID Tag is Missing");

            return false;
        }

        if (ht.ContainsKey("ResCode"))
        {
            rescode = ht["ResCode"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("ResCode Tag is Missing");

            return false;
        }
        if (ht.ContainsKey("SlipNo"))
        {
            ref1 = ht["SlipNo"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("SlipNo Tag is Missing");

            return false;
        }



        if (ht.ContainsKey("HashValue"))
        {
            reshashvalue = ht["HashValue"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("HashValue Tag is Missing");
            return false;

        }
        // writeLog("Confirm Response OneCash HashValue :" + reshashvalue);
        //  Version + TimeStamp + MessageID + ResCode + ResDesc + PINType + Amount + PIN + Expiry + SerialNo
        // Version + TimeStamp + MessageID + CustomerID + SlipNo + ResCode + Amount + DueDate + LoanType + Desc
        //Version + TimeStamp + MessageID + CustomerID + SlipNo + ResCode
        writeLog("signaturestring version+ts+msgid+cusid+slipno+rescode:" + version + ":" + ts + ":" + msgid + ":" + ref2 + ":" + ref1 + ":" + rescode);
        if (string.IsNullOrEmpty(version) || string.IsNullOrEmpty(ts) || string.IsNullOrEmpty(msgid) || string.IsNullOrEmpty(ref2) || string.IsNullOrEmpty(ref1) || string.IsNullOrEmpty(rescode))
        {
            rescode = "07";
            resdesc = "Invalid Message";
            writeLog("Invalid response data");
            return false;
        }
        tmphashvalue = Utils.GethashKeyconfirmres(version, ts, msgid, ref2, ref1, rescode);
        writeLog("Response Hash:" + reshashvalue + "Hash Value To Compare:" + tmphashvalue);
        // writeLog("Confirm Response A2A HashValue :" + tmphashvalue);,
        //  replacetime = Regex.Replace(ts, "[^0-9a-zA-Z]+", "");
        if (reshashvalue != tmphashvalue)
        {
            rescode = "05";
            resdesc = "Hash Value Missmatch";

            return false;
        }


        //Check Null or Empty String
        //if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(rescode))
        //{
        //    rescode = "07";
        //    resdesc = "Invalid Message";
        //    txtResponse.Text="Error in Validation : Data is Null or Empty";
        //    return false;
        //}

        return true;


    }

    #endregion

    #region <-- ValidateConfirmRequestPutet Tz -->
    bool IsValidateConfirmReqPutet(Hashtable ht, out string rescode, out string resdesc, out string version, out string msgid, out string ref1, out string ref2, out string ref3)
    {

        //
        rescode = string.Empty;
        version = string.Empty;
        string ts = string.Empty;
        resdesc = string.Empty;
        ref1 = string.Empty;
        ref2 = string.Empty;
        ref3 = string.Empty;
        msgid = string.Empty;
        string amt = string.Empty;
        // string serialno=string.Empty;

        string pin = string.Empty;
        string expiry = string.Empty;
        //string replacetime=string.Empty;
        string reshashvalue = string.Empty;
        string tmphashvalue = string.Empty;
        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }


        if (ht.ContainsKey("MessageID"))
        {
            msgid = ht["MessageID"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("ResCode"))
        {
            rescode = ht["ResCode"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("ResDesc"))
        {
            resdesc = ht["ResDesc"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("PINType"))
        {
            ref2 = ht["PINType"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing SerialNo <SerialNo> Tag");
            return false;
        }

        if (ht.ContainsKey("PIN"))
        {
            ref3 = ht["PIN"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Ref1 <Ref1> Tag");
            return false;
        }
        if (ht.ContainsKey("Amount"))
        {
            amt = ht["Amount"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Ref1 <Ref1> Tag");
            return false;
        }
        if (ht.ContainsKey("Expiry"))
        {
            expiry = ht["Expiry"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
        }
        if (ht.ContainsKey("SerialNo"))
        {
            ref1 = ht["SerialNo"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
        }
        if (ht.ContainsKey("HashValue"))
        {
            reshashvalue = ht["HashValue"].ToString();
        }
        // writeLog("Confirm Response Putet HashValue :" + reshashvalue);
        //  Version + TimeStamp + MessageID + ResCode + ResDesc + PINType + Amount + PIN + Expiry + SerialNo

        tmphashvalue = Utils.hashstrConfirmPutetRes(version, ts, msgid, rescode, resdesc, ref2, amt, ref3, expiry, ref1);

        // writeLog("Confirm Response Putet HashValue :" + tmphashvalue);,
        //  replacetime = Regex.Replace(ts, "[^0-9a-zA-Z]+", "");
        #region <-- Check Putet response Hash value -->
        if (reshashvalue != tmphashvalue.ToLower())
        {
            rescode = "05";
            resdesc = "Hash Value Missmatch";
            writeLog("Inquiry Hash Value Missmatch.");
            return false;
        }

        #endregion
        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(rescode))
        {
            rescode = "07";
            resdesc = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        return true;


    }
    #endregion

    #region <-- ValidateConfirmResEasyPoint Code Generate -->
    bool IsValidateConfirmResEasyPoint(Hashtable ht, string taxID, out string rescode, out string resdesc, out string version, out string msgid, out string ref1, out string ref3, out string agnid)
    {

        //        <ConfirmRes>
        //<Version>1.0</Version>
        //<TimeStamp>yyyyMMddhhmmssffff</TimeStamp>
        //<MessageID>eee43434333</MessageID>
        //<AgentID>2</AgentID>
        //<ResCode>00</ResCode>
        //<ResDesc></ResDesc>
        //<DigitalCode></DigitalCode>  // 18 Digit codes
        //<SerialNo></SerialNo>  // 18 Digit codes
        //<Expiry></Expiry>  
        //<Amount></Amount> //12 Digits
        //<HashValue></HashValue> // MessageID + AgentID + ResCode+ ResDesc + DigitalCode + SerialNo + Expiry + Amount
        //</ConfirmRes>
        rescode = string.Empty;
        version = string.Empty;
        string ts = string.Empty;
        msgid = string.Empty;
        agnid = string.Empty;
        resdesc = string.Empty;
        ref1 = string.Empty;
        // ref2 = string.Empty;
        ref3 = string.Empty;

        string amt = string.Empty;
        // string serialno=string.Empty;

        string pin = string.Empty;
        string expiry = string.Empty;
        //string replacetime=string.Empty;
        string reshashvalue = string.Empty;
        string tmphashvalue = string.Empty;
        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }


        if (ht.ContainsKey("MessageID"))
        {
            msgid = ht["MessageID"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("ResCode"))
        {
            rescode = ht["ResCode"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing ResCode <ResCode> Tag");
            return false;
        }

        if (ht.ContainsKey("ResDesc"))
        {
            resdesc = ht["ResDesc"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing ResDesc <ResDesc> Tag");
            return false;
        }
        if (ht.ContainsKey("AgentID"))
        {
            agnid = ht["AgentID"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing SerialNo <AgentID> Tag");
            return false;
        }

        if (ht.ContainsKey("DigitalCode"))
        {
            ref3 = ht["DigitalCode"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Ref1 <DigitalCode> Tag");
            return false;
        }
        if (ht.ContainsKey("SerialNo"))
        {
            ref1 = ht["SerialNo"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
        }
        if (ht.ContainsKey("Amount"))
        {
            amt = ht["Amount"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Amount <Amount> Tag");
            return false;
        }
        if (ht.ContainsKey("Expiry"))
        {
            expiry = ht["Expiry"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
        }

        if (ht.ContainsKey("HashValue"))
        {
            reshashvalue = ht["HashValue"].ToString();
        }

        // MessageID + AgentID + ResCode+ ResDesc + DigitalCode + SerialNo + Expiry + Amount
        //hashstrConfirmeasypointRes(string messageid, string agentid, string rescode, string resdec, string digital, string serial, string expiry,string amount)
        string key = taxID == "0000000000017" ? ConfigurationManager.AppSettings["easyPointSecretKey"].ToString() : taxID == "0000000000018" ? ConfigurationManager.AppSettings["easyPointMercyKey"].ToString() : ConfigurationManager.AppSettings["MercycorpsGenerateKey"].ToString();

        tmphashvalue = Utils.hashstrConfirmeasypointRes(msgid, agnid, rescode, resdesc, ref3, ref1, expiry, amt, key);

        // writeLog("Confirm Response Putet HashValue :" + tmphashvalue);,
        //  replacetime = Regex.Replace(ts, "[^0-9a-zA-Z]+", "");
        #region <-- Check EasyPoint Confirm response Hash value -->

        if (reshashvalue != tmphashvalue)
        {
            rescode = "05";
            resdesc = "Hash Value Missmatch";
            writeLog("Inquiry Hash Value Missmatch.");
            return false;
        }

        #endregion
        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(rescode) || String.IsNullOrEmpty(agnid) || String.IsNullOrEmpty(amt) || String.IsNullOrEmpty(ref1) || String.IsNullOrEmpty(ref3))
        {
            rescode = string.IsNullOrEmpty(rescode) ? "07" : rescode;
            resdesc = string.IsNullOrEmpty(rescode) ? "Invalid Message" : resdesc;
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        return true;


    }

    #endregion

    #region <-- ValadateRedeem Confirm Response -->
    bool IsValidateRedeemConfirmResEasyPoint(Hashtable ht, string taxID, out string rescode, out string resdesc, out string version, out string msgid, out string ref1, out string ref5, out string agnid)
    {
        //Version + TimeStamp + MessageID + PartnerID + DigitalCode + ResCode + TranRef
        //<ConfirmRes>
        //<Version></Version>
        //<TimeStamp></TimeStamp>
        //<MessageID></MessageID>
        //<PartnerID></PartnerID>
        //<DigitalCode></DigitalCode>
        //<ResCode></ResCode>
        //<ResDesc></ResDesc>
        //<TranRef></TranRef>
        //<HashValue></HashValue>
        //</ConfirmRes>

        version = string.Empty;
        string ts = string.Empty;
        msgid = string.Empty;
        agnid = string.Empty;
        string partneragnid = string.Empty;
        rescode = string.Empty;
        resdesc = string.Empty;
        ref1 = string.Empty;
        // ref3 = string.Empty;
        ref5 = string.Empty;


        // string amt = string.Empty;
        // string serialno=string.Empty;

        // string pin = string.Empty;
        //  string expiry = string.Empty;
        //string replacetime=string.Empty;
        string amtesp = string.Empty;
        string reshashvalue = string.Empty;
        string tmphashvalue = string.Empty;
        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }


        if (ht.ContainsKey("MessageID"))
        {
            msgid = ht["MessageID"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }

        if (ht.ContainsKey("ResCode"))
        {
            rescode = ht["ResCode"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("ResDesc"))
        {
            resdesc = ht["ResDesc"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("PartnerID"))
        {
            agnid = ht["PartnerID"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing PartnerID <PartnerID> Tag");
            return false;
        }
        if (ht.ContainsKey("AgentID"))
        {
            partneragnid = ht["AgentID"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing SerialNo <AgentID> Tag");
            return false;
        }
        if (ht.ContainsKey("DigitalCode"))
        {
            ref1 = ht["DigitalCode"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Ref1 <DigitalCode> Tag");
            return false;
        }
        if (ht.ContainsKey("TranAmount"))
        {
            amtesp = ht["TranAmount"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing TranAmount <TranAmount> Tag");
            return false;
        }
        if (ht.ContainsKey("TranRef"))
        {
            ref5 = ht["TranRef"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
        }

        if (ht.ContainsKey("HashValue"))
        {
            reshashvalue = ht["HashValue"].ToString();
        }
        //Version + TimeStamp + MessageID + PartnerID + DigitalCode + ResCode + TranRef
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(amtesp) || String.IsNullOrEmpty(partneragnid) || String.IsNullOrEmpty(rescode) || String.IsNullOrEmpty(msgid) || String.IsNullOrEmpty(agnid) || String.IsNullOrEmpty(ref1) || String.IsNullOrEmpty(ref5))
        {
            rescode = string.IsNullOrEmpty(rescode) ? "07" : rescode;
            resdesc = string.IsNullOrEmpty(rescode) ? "Invalid Message" : resdesc;
            writeLog("Error in Validation EasyPoint Redeem Response : Data is Null or Empty");
            return false;
        }

        string key = taxID == "7777777777777" ? ConfigurationManager.AppSettings["easyPointMercyRedeemKey"].ToString() : ConfigurationManager.AppSettings["MercyCorpsRedeemKey"].ToString();

        tmphashvalue = Utils.hashstrRedeemConfirmEasyPointRes(version, ts, msgid, agnid, partneragnid, ref1, rescode, ref5, amtesp, key);

        // writeLog("Confirm Response Putet HashValue :" + tmphashvalue);,,
        //  replacetime = Regex.Replace(ts, "[^0-9a-zA-Z]+", "");
        #region <-- Check EasyPoint Confirm response Hash value -->
        if (reshashvalue != tmphashvalue)
        {
            rescode = "05";
            resdesc = "Hash Value Missmatch";
            writeLog("Inquiry Hash Value Missmatch.");
            return false;
        }
        #endregion
        //Check Null or Empty String

        if (rescode != "00")
        {
            writeLog("All Valadation For EasyPoint Response OK but Response Code is Not 00 Responsecode:" + rescode + "|Response Description:" + resdesc);
            return false;
        }
        return true;
    }

    #endregion

    bool IsValidateTownshipListReq(Hashtable ht, out string code, out string desp, out string version, out string ts, out string email, out string password, out int batchperpage, out int pageno)
    {
        code = "00";
        desp = "Success";

        version = string.Empty;
        ts = string.Empty;
        email = string.Empty;
        password = string.Empty;

        batchperpage = 0;
        pageno = 0;

        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }
        if (ht.ContainsKey("Email"))
        {
            email = ht["Email"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("Password"))
        {
            password = ht["Password"].ToString();
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing Password <TimeStamp> Tag");
            return false;
        }

        if (ht.ContainsKey("BatchPerPage"))
        {
            batchperpage = Convert.ToInt32(ht["BatchPerPage"]);
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing BatchPerPage <BatchPerPage> Tag");
            return false;
        }


        if (ht.ContainsKey("PageNo"))
        {
            pageno = Convert.ToInt32(ht["PageNo"]);
        }
        else
        {
            code = "06";
            desp = "Invalid Request";
            writeLog("Error in Validation : Missing PageNo <PageNo> Tag");
            return false;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(email) || String.IsNullOrEmpty(password) || batchperpage < 1 || pageno < 1)
        {
            code = "07";
            desp = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }

        //Check Authecation
        string errmsg = string.Empty;
        DataSet ds = null;
        bool flg = false;
        flg = _agentWCF.getAuthentication(email, password, out ds, out errmsg);
        if (flg)
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                int.TryParse(ds.Tables[0].Rows[0]["AGENTID"].ToString(), out agentID);
                this.agentCode = Convert.ToString(ds.Tables[0].Rows[0]["AGENTCODE"]);
            }
            else
            {
                code = "05";
                desp = "Authentication Failed";
                writeLog("Error in Authentication : " + errmsg);
                return false;
            }
        }
        else
        {
            code = "--";
            desp = "UnknownError";
            writeLog("Error in Authentication : " + errmsg);
            return false;
        }
        return true;
    }

    bool IsValidateConfirmReqOneStop(Hashtable ht, out string rescode, out string resdesc, out string version, out string msgid, out string ref1, out string ref3)
    {

        rescode = string.Empty;
        version = string.Empty;
        string ts = string.Empty;
        resdesc = string.Empty;
        ref1 = string.Empty;
        ref3 = string.Empty;
        decimal amount = 0;
        msgid = string.Empty;

        string reshashvalue = string.Empty;
        string tmphashvalue = string.Empty;
        if (ht.ContainsKey("Version"))
        {
            version = ht["Version"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            return false;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            ts = ht["TimeStamp"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            return false;
        }


        if (ht.ContainsKey("MessageID"))
        {
            msgid = ht["MessageID"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <MessageID> Tag");
            return false;
        }
        if (ht.ContainsKey("Ref1"))
        {
            ref1 = ht["Ref1"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Ref1 <Ref1> Tag");
            return false;
        }
        if (ht.ContainsKey("Ref3"))
        {
            ref3 = ht["Ref3"].ToString();
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Ref3 <Ref3> Tag");
            return false;
        }
        if (ht.ContainsKey("Amount"))
        {
            amount = Convert.ToDecimal(ht["Amount"].ToString());
        }
        else
        {
            rescode = "06";
            resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Amount <Amount> Tag");
            return false;
        }
        //tmphashvalue = this.hashstrOneCashConfirmResCC(msgid, rescode, resdesc, ref1);
        //writeLog("Confirm Response A2A HashValue :" + tmphashvalue);
        //Check Null or Empty String
        if (String.IsNullOrEmpty(version) || String.IsNullOrEmpty(ts) || String.IsNullOrEmpty(ref1) || amount <= 0)
        {
            rescode = "07";
            resdesc = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            return false;
        }
        return true;


    }

    public string TownshipListReq(string reqXml)
    {
        string code = string.Empty, desp = string.Empty;
        string version = string.Empty;
        string ts = string.Empty;
        string email = string.Empty;
        string password = string.Empty;
        int batchPerpage = 0, pageno = 0;

        Hashtable ht = Utils.getHTableFromXML(reqXml);

        if (!IsValidateTownshipListReq(ht, out code, out desp, out version, out ts, out email, out password, out batchPerpage, out pageno))
        {
            return Utils.getErrorRes(code, desp);
        }

        string errmsg = string.Empty;
        DataSet ds = null;
        //double dbAmount = Utils.getAmountDBL(amount);
        if (_agentWCF.getTownshiplist(batchPerpage, pageno,out ds, out errmsg))
        {
            try
            {
                StringBuilder sb = new StringBuilder();
                sb.Append("<TownshipListRes version=" + "\"1.0\" total=" + "\"" + ds.Tables[1].Rows[0][0].ToString() + "\" BatchPerPage=" + "\"" + batchPerpage + "\" timeStamp=" + "\"" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "\"" + ">");

                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        //String Imagepath = System.Web.HttpContext.Current.Server.MapPath("~/Logo/Agent/");
                        //string imgUrl = "";
                        //if (!String.IsNullOrEmpty(ds.Tables[0].Rows[i]["AGENTLOGO"].ToString()))
                        //{
                        //    var imagelogo = (byte[])(ds.Tables[0].Rows[i]["AGENTLOGO"]);
                        //    MemoryStream ms = new MemoryStream(imagelogo);
                        //    Image image = Image.FromStream(ms);
                        //    image.Save(Imagepath + ds.Tables[0].Rows[i]["AGENTID"].ToString() + ".png");
                        //    imgUrl = ConfigurationManager.AppSettings["DomainURL"].ToString() + "Logo/AGENT/" + ds.Tables[0].Rows[i]["AGENTID"].ToString() + ".png";
                        //}
                        sb.Append("<Township TownshipCode=" + "\"" + ds.Tables[0].Rows[i]["TOWNSHIPCODE"].ToString() + "\"  TownshipName=" + "\"" + ds.Tables[0].Rows[i]["TOWNSHIPNAME"].ToString() + "\"  DistrictName=" + "\"" + ds.Tables[0].Rows[i]["DISTRICTNAME"].ToString() + "\"  StateDivision=" + "\"" + ds.Tables[0].Rows[i]["STATEDIVISION"].ToString() + "\" />");
                    }
                }
                sb.Append("</TownshipListRes>");
                return sb.ToString();
            }
            catch (Exception ex)
            {

            }
        }


        return string.Empty;
    }

    public static string ComputeHash(string plainText, string saltKey)
    {
        byte[] saltBytes = null, plainTextBytes = null, plainTextWithSaltBytes = null, hashBytes = null, hashWithSaltBytes = null;
        string hashValue = "";
        HashAlgorithm algorithm = null;

        try
        {
            saltBytes = Convert.FromBase64String(saltKey);

            // Convert plain text into a byte array.
            plainTextBytes = Encoding.UTF8.GetBytes(plainText);

            // Allocate array, which will hold plain text and salt.
            plainTextWithSaltBytes = new byte[plainTextBytes.Length + saltBytes.Length];

            // Copy plain text bytes into resulting array.
            for (int i = 0; i < plainTextBytes.Length; i++)
                plainTextWithSaltBytes[i] = plainTextBytes[i];

            // Append salt bytes to the resulting array.
            for (int i = 0; i < saltBytes.Length; i++)
                plainTextWithSaltBytes[plainTextBytes.Length + i] = saltBytes[i];

            // Compute hash value of our plain text with appended salt.
            algorithm = new SHA1Managed();
            hashBytes = algorithm.ComputeHash(plainTextWithSaltBytes);

            // Create array which will hold hash and original salt bytes.
            hashWithSaltBytes = new byte[hashBytes.Length + saltBytes.Length];

            // Copy hash bytes into resulting array.
            for (int i = 0; i < hashBytes.Length; i++)
                hashWithSaltBytes[i] = hashBytes[i];

            // Append salt bytes to the result.
            for (int i = 0; i < saltBytes.Length; i++)
                hashWithSaltBytes[hashBytes.Length + i] = saltBytes[i];

            // Convert result into a base64-encoded string.
            hashValue = Convert.ToBase64String(hashWithSaltBytes);
        }
        catch
        {
            throw;
        }
        finally
        {
            saltBytes = null;
            plainTextBytes = null;
            plainTextWithSaltBytes = null;
            hashBytes = null;
            hashWithSaltBytes = null;
        }

        return hashValue;
    }

    public string generatepass()
    {
        Random generator = new Random();

        String pass = generator.Next(0, 1000000).ToString("D6");
        return pass;
    }

    public static string stringToBase64(string st)
    {
        byte[] b = new byte[st.Length];
        for (int i = 0; i < st.Length; i++)
        {
            b[i] = Convert.ToByte(st[i]);
        }
        return Convert.ToBase64String(b);
    }

    public static string GeterrorResponse(string rescode, string resdesc, long txnID, string logerrormessage)
    {
        writeLog("Update Error");
        string errMsg = string.Empty;
        if (!_agentWCF.updateError(txnID, "ER", logerrormessage,out errMsg))
        {
            writeLog("Error in updateError : " + errMsg);
        }

        return Utils.getErrorRes(rescode, resdesc);
    }

    public string UpdateErrorWithAddBalance(string rescode, string resdesc, long txnID, string logerrormessage, int agentID, double amount, string isAgreement)
    {
        writeLog("Update Error With Add Balance");
        string errMsg = string.Empty;
        double availableBalance = 0;
        double ledgerBalance = 0;
        if (!_agentWCF.UpdateErrorWithAddingBalance(txnID, "ER", logerrormessage, agentID, amount, isAgreement, out errMsg, out availableBalance, out ledgerBalance))
        {
            writeLog("Error in update Error with Add Balance : " + errMsg);
        }
        writeLog("After Update Error With Add Balance| TxnID:" + txnID + "|agentID:" + agentID + "AvailableBalance:" + availableBalance + "LedgerBalance:" + ledgerBalance);
        return Utils.getErrorRes(rescode, resdesc);
    }

    public static string GetErrorResponseWithAddBalance(string rescode, string resdesc, long txnID, string logerrormessage, int agentID, double amount, string isAgreement)
    {
        writeLog("Update Error With Add Balance");
        string errMsg = string.Empty;
        double availableBalance = 0;
        double ledgerBalance = 0;
        if (!_agentWCF.UpdateErrorWithAddingBalance(txnID, "ER", logerrormessage, agentID, amount, isAgreement,out errMsg, out availableBalance, out ledgerBalance))
        {
            writeLog("Error in update Error with Add Balance : " + errMsg);
        }
        writeLog("After Update Error With Add Balance| TxnID:" + txnID + "|agentID:" + agentID + "AvailableBalance:" + availableBalance + "LedgerBalance:" + ledgerBalance);
        return Utils.getErrorRes(rescode, "Processing is failed because of internal server error, please try again.");
    }

    public static string ChannelPlusGetErrorResponse(string rescode, string resdesc, long txnID, string logerrormessage, int agentID,int agentIDPlus, double amount,double readdedamount, string isAgreement)
    {
        writeLog("Update Error With Add Balance");
        string errMsg = string.Empty; 
        double availableBalance = 0;
        double ledgerBalance = 0;
        if (!_agentWCF.UpdateErrorWithAddingBalance(txnID, "ER", logerrormessage, agentID, amount, isAgreement, out errMsg, out availableBalance, out ledgerBalance))
        {
            writeLog("Error in update Error with Add Balance : " + errMsg);
        }
        if (!_agentWCF.minusChannelPlusAmt(txnID, "ER", logerrormessage, agentIDPlus, readdedamount, isAgreement, out errMsg, out availableBalance, out ledgerBalance))
        {
            writeLog("Error in minusChannelPlusAmt : " + errMsg);
        }
        
        writeLog("After Update Error With Add Balance| TxnID:" + txnID + "|agentID:" + agentID + "AvailableBalance:" + availableBalance + "LedgerBalance:" + ledgerBalance);
        return Utils.getErrorRes(rescode, resdesc);
    }

    public static string getCNPErrMsg(string errcode)
    {
        string errDesp = string.Empty;
        errDesp = errcode == "1403" ? "Paid Already" : errcode == "1402" ? "Payment Expired" : errcode == "1404" ? "Bill Amount Missmatch" : "Payment Fail:(" + errcode + ")";
        return errDesp;
    }

    #region <-- MyanPay AirTime -->
    public static MyanPay_ELoadResponse MyanpayAirtime(MyanPay_ELoadRequest myanpayeloadreq)
    {

        //MyanPay_ELoadRequest mpteloadreq = new MyanPay_ELoadRequest();
        myanpayeloadreq.CredentialPassword = ConfigurationManager.AppSettings["MyanPayEloadCredentialPassword"].ToString();
        myanpayeloadreq.CredentialUserName = ConfigurationManager.AppSettings["MyanpayEloadCredentialUserName"].ToString();
        MPT_ELoadInquiryRequest inqrequest = new MPT_ELoadInquiryRequest();

        writeLog("MyanPayEloadRequestData(MobileNo:" + myanpayeloadreq.MobileNumber + "|OrderNumber:" + myanpayeloadreq.OrderNumber + "|TopUpAmount:" + myanpayeloadreq.TopUpAmount + ")");

        MyanPay_ELoadResponse _myanpayeloadres = MyanPay_Eload.ELoadMyanPay(myanpayeloadreq);
        _myanpayeloadres.result = false;
        writeLog("MyanPayEloadResponseData(Status:" + _myanpayeloadres.Status + "|ResponseMessage:" + _myanpayeloadres.ResponseMessage + "|UniqueResellerID:" + _myanpayeloadres.UniqueResellerID + "|ResDateTime:" + _myanpayeloadres.DateTime + "|OrderNumber:" + _myanpayeloadres.OrderNumber + "|InvoiceNumber:" + _myanpayeloadres.InvoiceNumber + ")");

        if (string.IsNullOrEmpty(_myanpayeloadres.Status))
        {
            writeLog("Myanpay Eload Response Status is empty");
            _myanpayeloadres.ResponseMessage = "Status is empty";
            return _myanpayeloadres;
        }

        if (checkIsSuccessEload(_myanpayeloadres.Status))
        {
            inqrequest.invoiceNumber = _myanpayeloadres.InvoiceNumber;
            inqrequest.OrderNumber = _myanpayeloadres.OrderNumber;

            writeLog(" Myanpay Eload Inquiry request Data: invoiceNumber:" + inqrequest.invoiceNumber + "|OrderNumber:" + inqrequest.OrderNumber);

            MPT_EloadInquiryResponse inqResponse = new MPT_EloadInquiryResponse();
            writeLog("$$$$$$$$$$ First Time Inquiry Request $$$$$$$$$$$$$$$$$$");
            int waitingfirsttime = int.Parse(ConfigurationManager.AppSettings["MyanPayEloadFirstWaitTime"].ToString());
            Thread.Sleep(waitingfirsttime);
            inqResponse = MyanPay_Eload.InquiryELoadMPT(inqrequest);

            writeLog("Myanpay Eload Inquiry Response: Delivery Status:" + inqResponse.DeliveryStatus + "|DeliveryReport" + inqResponse.DeliveryReport + "|InvoiceNumber:" + inqResponse.InvoiceNumber + "|OrderNumber:" + inqResponse.OrderNumber);

            if (checkPanding(inqResponse.DeliveryStatus))
            {
                writeLog("$$$$$$$$$$ Second Time Inquiry Request $$$$$$$$$$$$$$$$$$");
                int waitingtime = int.Parse(ConfigurationManager.AppSettings["MyanPayEloadSecondWaitTime"].ToString());
                writeLog("Re inquiry again after waiting :" + waitingtime + " milisecond");
                Thread.Sleep(waitingtime);

                inqResponse = MyanPay_Eload.InquiryELoadMPT(inqrequest);
                writeLog("Myanpay Eload Inquiry Response: Delivery Status:" + inqResponse.DeliveryStatus + "|DeliveryReport" + inqResponse.DeliveryReport + "|InvoiceNumber:" + inqResponse.InvoiceNumber + "|OrderNumber:" + inqResponse.OrderNumber);
                if (checkPanding(inqResponse.DeliveryStatus))
                {
                    _myanpayeloadres.Status = inqResponse.DeliveryStatus;
                    _myanpayeloadres.result = true;
                }
                else
                {
                    _myanpayeloadres.result = checkIsSuccessEload(inqResponse.DeliveryStatus);
                    _myanpayeloadres.Status = inqResponse.DeliveryStatus;
                    _myanpayeloadres.ResponseMessage = inqResponse.DeliveryReport;
                }
            }
            else
            {
                _myanpayeloadres.result = checkIsSuccessEload(inqResponse.DeliveryStatus);
                _myanpayeloadres.Status = inqResponse.DeliveryStatus;
                _myanpayeloadres.ResponseMessage = inqResponse.DeliveryReport;
            }

        }
        return _myanpayeloadres;
    }

    public static bool checkIsSuccessEload(string status)
    {
        bool result = false;
        result = status.ToUpper() == "SUCCESS" ? true : false;
        return result;
    }

    public static bool checkPanding(string status)
    {
        bool result = false;
        result = status.ToUpper() == "PENDING" ? true : false;
        return result;
    }

    public static bool isValidPhoneNumber(string mobilenumber, string numberList)
    {
        bool result = false;
        //string abc = "0925:0943:0950:0954:0951:0942";
        string[] lstNumber = numberList.Split(':');
        for (int i = 0; i < lstNumber.Count(); i++)
        {
            if (mobilenumber.Contains(lstNumber[i]))
            {
                result = true;
                break;
            }
        }
        return result;

    }


    #endregion

    #region <-- ValidateTelenorAirtime -->
    public static bool validateTelenorAirtime(string phoneno, string amount, string timediff, out string resErr)
    {
        resErr = string.Empty;
        bool result = false;
        double tlnAmount = double.Parse(amount);

        if (tlnAmount < 1000 || tlnAmount > 100000)
        {
            resErr = "Input amount must be between 1,000 and 100,000.";

        }
        else if ((tlnAmount % 1000) != 0)
        {
            resErr = "Invalid topup amount.Please enter amount in thousand.!";

        }
        else if (_agentWCF.checkTelenoreTimeInterval(phoneno, amount, timediff))//check is there have same toupuamount and mobilenumber existed in transaction table before 2 min of current time or not?
        {
            resErr = "Please try again after 2 minutes.";

        }
        else
        {
            result = true;
        }
        return result;
    }
    #endregion

    #region <-- 123Remit -->
    private string Get123RemitNotificationMessage(decimal Amount, string BranchName, string ReferenceNo, string Status)
    {
        string notiMessge = string.Empty;
        if (Status == "CashIn")
        {
            notiMessge = ConfigurationManager.AppSettings["123RemitCashInNotification"].ToString();
            notiMessge = notiMessge.Replace("[Amount]", Amount.ToString("#,##0.00"));
            notiMessge = notiMessge.Replace("[Branch]", BranchName);
        }
        else if (Status == "Cancel")
        {
            notiMessge = ConfigurationManager.AppSettings["123RemitCancelNotification"].ToString();
            notiMessge = notiMessge.Replace("[Amount]", Amount.ToString("#,##0.00"));
            notiMessge = notiMessge.Replace("[Reference]", ReferenceNo);
        }
        return notiMessge;
    }
    #endregion

    #region <-- Biller Validation parameter for Mobile -->
    public string SystemSettingReq(string reqXml)
    {
        string response = string.Empty;
        loginRequestModel valadationReqData = new loginRequestModel();
        Hashtable ht = Utils.getHTableFromXML(reqXml);
        try
        {
            valadationReqData = IsValidateSystemSettingReq(ht);
            if (valadationReqData.Result)
            {
                XmlDocument doc = new XmlDocument();
                string path = ConfigurationManager.AppSettings["systemSettingPath"].ToString();
                doc.Load(path);
                string xmlcontents = doc.InnerXml;
                StringBuilder sb = new StringBuilder();
                sb.Append("<SystemSettingRes>");
                sb.Append("<Version>1.0</Version>");
                sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                sb.Append("<ResCode>00</ResCode>");
                sb.Append("<ResDesc>SUCCESS</ResDesc>");
                sb.Append("<MessageID>" + valadationReqData.messageid + "</MessageID>");
                sb.Append(xmlcontents);
                sb.Append("</SystemSettingRes>");
                return sb.ToString();
            }
            else
            {
                response = Utils.getErrorRes(valadationReqData.rescode, valadationReqData.resdesc);
            }
        }
        catch (Exception ex)
        {
            writeLog("Exception occur :" + ex.Message);
            response = Utils.getErrorRes("99", "System Error");
        }
        return response;
    }

    public loginRequestModel IsValidateSystemSettingReq(Hashtable ht)
    {
        loginRequestModel valadationParaReq = new loginRequestModel();


        valadationParaReq.Result = true;

        if (ht.ContainsKey("Version"))
        {
            valadationParaReq.version = ht["Version"].ToString();
        }
        else
        {
            valadationParaReq.rescode = "06";
            valadationParaReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            valadationParaReq.Result = false;
            return valadationParaReq;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            valadationParaReq.timeStamp = ht["TimeStamp"].ToString();
        }
        else
        {
            valadationParaReq.rescode = "06";
            valadationParaReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            valadationParaReq.Result = false;
            return valadationParaReq;
        }
        if (ht.ContainsKey("Email"))
        {
            valadationParaReq.userid = ht["Email"].ToString();
        }
        else
        {
            valadationParaReq.rescode = "06";
            valadationParaReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            valadationParaReq.Result = false;
            return valadationParaReq;
        }

        if (ht.ContainsKey("Password"))
        {
            valadationParaReq.password = ht["Password"].ToString();
        }
        else
        {
            valadationParaReq.rescode = "06";
            valadationParaReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            valadationParaReq.Result = false;
            return valadationParaReq;
        }





        if (ht.ContainsKey("MessageID"))
        {
            valadationParaReq.messageid = ht["MessageID"].ToString();
        }
        else
        {
            valadationParaReq.rescode = "06";
            valadationParaReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <MessageID> Tag");
            valadationParaReq.Result = false;
            return valadationParaReq;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(valadationParaReq.version) || String.IsNullOrEmpty(valadationParaReq.timeStamp) || String.IsNullOrEmpty(valadationParaReq.userid) || String.IsNullOrEmpty(valadationParaReq.password) || String.IsNullOrEmpty(valadationParaReq.messageid))//cardListReq.cardParPage < 1 || cardListReq.pageNo < 1 ||
        {
            valadationParaReq.rescode = "07";
            valadationParaReq.resdesc = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            valadationParaReq.Result = false;
            return valadationParaReq;
        }


        string code = string.Empty;
        string desp = string.Empty;

        valadationParaReq.Result = authentication(valadationParaReq.userid, valadationParaReq.password, out code, out desp);
        valadationParaReq.rescode = code;
        valadationParaReq.resdesc = desp;

        return valadationParaReq;

    }

    #endregion

    #region <-- Viberout Country List Request -->

    public string CountryListReq(string reqXml)
    {
        string response = string.Empty;
        loginRequestModel valadationReqData = new loginRequestModel();
        Hashtable ht = Utils.getHTableFromXML(reqXml);
        try
        {
            valadationReqData = IsValidateCountryListReq(ht);
            if (valadationReqData.Result)
            {
                XmlDocument doc = new XmlDocument();
                string path = ConfigurationManager.AppSettings["ViberOutCountryListPath"].ToString();
                doc.Load(path);
                string xmlcontents = doc.InnerXml;
                StringBuilder sb = new StringBuilder();
                sb.Append("<CountryListRes>");
                sb.Append("<Version>1.0</Version>");
                sb.Append("<TimeStamp>" + System.DateTime.Now.ToString("yyyyMMddhhmmssffff") + "</TimeStamp>");
                sb.Append("<ResCode>00</ResCode>");
                sb.Append("<ResDesc>SUCCESS</ResDesc>");
                sb.Append("<MessageID>" + valadationReqData.messageid + "</MessageID>");
                sb.Append(xmlcontents);
                sb.Append("</CountryListRes>");
                return sb.ToString();
            }
            else
            {
                response = Utils.getErrorRes(valadationReqData.rescode, valadationReqData.resdesc);
            }
        }
        catch (Exception ex)
        {
            writeLog("Exception occur :" + ex.Message);
            response = Utils.getErrorRes("99", "System Error");
        }
        return response;
    }

    public loginRequestModel IsValidateCountryListReq(Hashtable ht)
    {
        loginRequestModel valadationParaReq = new loginRequestModel();


        valadationParaReq.Result = true;

        if (ht.ContainsKey("Version"))
        {
            valadationParaReq.version = ht["Version"].ToString();
        }
        else
        {
            valadationParaReq.rescode = "06";
            valadationParaReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <Version> Tag");
            valadationParaReq.Result = false;
            return valadationParaReq;
        }
        if (ht.ContainsKey("TimeStamp"))
        {
            valadationParaReq.timeStamp = ht["TimeStamp"].ToString();
        }
        else
        {
            valadationParaReq.rescode = "06";
            valadationParaReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing XML <TimeStamp> Tag");
            valadationParaReq.Result = false;
            return valadationParaReq;
        }
        if (ht.ContainsKey("Email"))
        {
            valadationParaReq.userid = ht["Email"].ToString();
        }
        else
        {
            valadationParaReq.rescode = "06";
            valadationParaReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Email <TimeStamp> Tag");
            valadationParaReq.Result = false;
            return valadationParaReq;
        }

        if (ht.ContainsKey("Password"))
        {
            valadationParaReq.password = ht["Password"].ToString();
        }
        else
        {
            valadationParaReq.rescode = "06";
            valadationParaReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing Password <Password> Tag");
            valadationParaReq.Result = false;
            return valadationParaReq;
        }





        if (ht.ContainsKey("MessageID"))
        {
            valadationParaReq.messageid = ht["MessageID"].ToString();
        }
        else
        {
            valadationParaReq.rescode = "06";
            valadationParaReq.resdesc = "Invalid Request";
            writeLog("Error in Validation : Missing TxnPerPage <MessageID> Tag");
            valadationParaReq.Result = false;
            return valadationParaReq;
        }

        //Check Null or Empty String
        if (String.IsNullOrEmpty(valadationParaReq.version) || String.IsNullOrEmpty(valadationParaReq.timeStamp) || String.IsNullOrEmpty(valadationParaReq.userid) || String.IsNullOrEmpty(valadationParaReq.password) || String.IsNullOrEmpty(valadationParaReq.messageid))//cardListReq.cardParPage < 1 || cardListReq.pageNo < 1 ||
        {
            valadationParaReq.rescode = "07";
            valadationParaReq.resdesc = "Invalid Message";
            writeLog("Error in Validation : Data is Null or Empty");
            valadationParaReq.Result = false;
            return valadationParaReq;
        }


        string code = string.Empty;
        string desp = string.Empty;

        valadationParaReq.Result = authentication(valadationParaReq.userid, valadationParaReq.password, out code, out desp);
        valadationParaReq.rescode = code;
        valadationParaReq.resdesc = desp;

        return valadationParaReq;

    }


    #endregion

    #region <-- 123 check For ABC CashCard -->

    public bool IsABCCashCard(string paymentCode)
    {
        bool result = false;

        if (paymentCode.Length == 16)
        {
            paymentCode = paymentCode.Substring(0, 6);

            if (paymentCode == ConfigurationManager.AppSettings["AbcBin"].ToString())
            {
                result = true;
            }
        }

        return result;
    }

    public bool CheckAbcCashAmount(string amount)
    {
        bool result = false;
        double dblAmount = 0;
        string minamt = string.Empty;
        string maxamt = string.Empty;
        minamt = ConfigurationManager.AppSettings["MinAmount"].ToString();
        maxamt = ConfigurationManager.AppSettings["MaxAmount"].ToString();
        try
        {
            dblAmount = double.Parse(amount);

            if (dblAmount > 0 && dblAmount >= double.Parse(minamt) && dblAmount <= double.Parse(maxamt))
            {
                result = true;
            }
            else
            {
                writeLog("ABCCashCard Topup amount is 0");
            }
        }
        catch (Exception ex)
        {
            writeLog("Exception error occur when parsing amount to double:" + ex.Message);
        }
        return result;
    }
    #endregion


    #endregion

    #region FraudProfile
    public bool CheckFraud(out string errMsg, long txnID, string userID, string billerID, string branchCode, string agentCode, string amount)
    {
        writeLog("Check Fraud Function Done ");
        errMsg = "";

        TRANReq tranReq = new TRANReq();
        tranReq.TransactionID = Convert.ToInt32(txnID);
        tranReq.UserID = userID;
        tranReq.BillerID = Convert.ToInt32(billerID);
        tranReq.BranchCode = branchCode;
        tranReq.AgentCode = agentCode;
        tranReq.Amount = Convert.ToDecimal(amount);

        var json_serializer1 = new JavaScriptSerializer();
        var json_serializerpinres = new JavaScriptSerializer();
        string jsonReq = json_serializer1.Serialize(tranReq);
        string returnResult = PostFraudProfile(jsonReq);

        TRANRes tranRes = new TRANRes();
        tranRes = json_serializerpinres.Deserialize<TRANRes>(returnResult);

        if (tranRes.Status == "true")
        {
            errMsg = tranRes.Description;
            return true;
        }
        else
        {
            errMsg = tranRes.Description;
            return false;
        }

        return true;
        
    }

    public static string PostFraudProfile(string jsonReq)
    {
        string result = string.Empty;
        string URL = ConfigurationManager.AppSettings["fraudEngineURL"].ToString();

        try
        {
            writeLog("$$$$$$$$$$$ Start Request Fraud API $$$$$$$$$$$$$$$$$$$$$$$");
            HttpWebRequest objRequest = (HttpWebRequest)(WebRequest.Create(URL));
            objRequest.Method = "POST";
            objRequest.ProtocolVersion = HttpVersion.Version11;
            System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
            objRequest.Timeout = 2 * 60000; //In milliseconds - in this case 60 seconds

            objRequest.ContentType = "application/json";
            objRequest.ContentLength = jsonReq.Length;
            using (var streamWriter = new StreamWriter(objRequest.GetRequestStream()))
            {
                streamWriter.Write(jsonReq);
                streamWriter.Flush();
                streamWriter.Close();
            }

            var httpResponse = (HttpWebResponse)objRequest.GetResponse();
            using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
            {
                result = streamReader.ReadToEnd();
            }
            log.Info(result);
        }
        catch (Exception e)
        {
            log.Info(e);
        }
        return result;
    }

    public class TRANReq
    {
        public int TransactionID { get; set; }
        public string UserID { get; set; }
        public int BillerID { get; set; }
        public string BranchCode { get; set; }
        public string AgentCode { get; set; }
        public decimal Amount { get; set; }
    }

    public class TRANRes
    {
        public string Status { get; set; }
        public string Description { get; set; }

    }
    #endregion

    public bool SendUnpairEmail(string userID)
    {
        writeLog("Ok in entering SendUnpairEmail method");
        writeLog("UserID:" + userID);

        try
        {
            
            StringBuilder sb = new StringBuilder();
            sb.Append("<strong>" + ConfigurationManager.AppSettings["unpairtitle"].ToString() + "<br/><br/>");
            writeLog("msgBody");
            sb.Append(ConfigurationManager.AppSettings["msgbodyunpair"].ToString() + "<br/><br/>");
            sb.Append("<table>");
            sb.Append("<tr><td>User ID </td><td>:</td><td>" + userID + "</td></tr>");
            sb.Append("</table></br><hr>");
            sb.Append("Please do not reply to this email. This mailbox is not monitored and you will not receive a response. For assistance, please use details as mentioned above. <br/>");
          
            writeLog("fromMail");
            string fromEmailAddress = ConfigurationManager.AppSettings["fromEmailreg"].ToString();
            string toEmail = ConfigurationManager.AppSettings["toEmailUnpair"].ToString();
            writeLog("Fromemail:" + fromEmailAddress + "To Email:" + toEmail);
            writeLog("Subject");
            string subject = ConfigurationManager.AppSettings["unpairsubject"].ToString() +" for UserID "+ userID+ " at " + System.DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss");
            writeLog("Subject:" + subject);
            string msgBody = sb.ToString();
            writeLog("Message Body:" + msgBody);
            // emailAPIWS.EmailAPISoapClient emailApi = new emailAPIWS.EmailAPISoapClient();
            AwsEmailAPI.ServiceSoapClient emailApi = new AwsEmailAPI.ServiceSoapClient();
            string errMsg = string.Empty;
            bool sent = false;
            // sent = emailApi.sendEmail(toEmail, "", "", fromEmailAddress, fromEmailAddress, subject, msgBody
            // , "", "", "", false, "", "", true, out errMsg);
            sent = emailApi.sendAWSMail(fromEmailAddress, fromEmailAddress, toEmail, "", "", subject, msgBody);
            if (sent)
            {             
                writeLog("Return ture email was sent" );
                return true;
            }
            else
            {
                writeLog("Email not sent");             
                return false;
            }
        }
        catch (Exception ex)
        {
            writeLog("Exception Error in sending Email" + ex.Message);
            return false;
        }
    }

     bool emailtest(string userid, string password, string Name, string email, out string msg)
    {
        writeLog("Ok in entering sendmail method");
        writeLog("UserID:" + userid + "Name:" + Name + "Email:" + email);
        try
        {
            //  string Mpufee = ConfigurationManager.AppSettings["MPUFee"].ToString();
            /// sb.Append(" *Load Amount : " + Double.Parse(amount).ToString("#,##0.##"));
            // sb.Append("*MPU Fee :" + Double.Parse(Mpufee).ToString("#,##0.##"));
            // sb.Append("*Total Balance :" + (Double.Parse(amount) - Double.Parse(Mpufee)).ToString("#,##0.##"));
            StringBuilder sb = new StringBuilder();
            sb.Append("<strong>Dear " + Name + ",</strong><br/><br/>");
            writeLog("msgBody");
            sb.Append(ConfigurationManager.AppSettings["msgbodyreg"].ToString() + "<br/><br/>");
            sb.Append("<table>");
            sb.Append("<tr><td>Login ID </td><td>:</td><td>" + userid + "</td></tr>");
            sb.Append("<tr><td>Password </td><td>:</td><td>" + password + "</td> </tr>");
            sb.Append("</table></br><hr>");
            writeLog("Footermsg");
            sb.Append("<strong>" + ConfigurationManager.AppSettings["footermsgreg"].ToString() + "</strong></br>");
            sb.Append("<table>");
            writeLog("Phone");
            sb.Append("<tr><td>Hot Line</td><td>:</td><td>" + ConfigurationManager.AppSettings["phone"].ToString() + "</td></tr>");
            writeLog("email");
            sb.Append("<tr><td>Email</td><td>:</td><td>" + ConfigurationManager.AppSettings["email"].ToString() + "</td></tr>");
            sb.Append("<tr><td>Facebook</td><td>:</td><td>" + ConfigurationManager.AppSettings["fblink"].ToString() + "</td></tr>");
            sb.Append("</table><hr>");
            sb.Append("Please do not reply to this email. This mailbox is not monitored and you will not receive a response. For assistance, please use details as mentioned above. <br/>");
            //  sb.Append("Near Me Co., Ltd.");
            // EmailApiModel mailapi = new EmailApiModel();
            writeLog("fromMail");
            string fromEmailAddress = ConfigurationManager.AppSettings["fromEmailreg"].ToString();
            string toEmail = email;
            writeLog("Fromemail:" + fromEmailAddress + "To Email:" + toEmail);
            writeLog("Subject");
            string subject = ConfigurationManager.AppSettings["subjectreg"].ToString() + " at " + System.DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss");
            writeLog("Subject:" + subject);
            string msgBody = sb.ToString();
            writeLog("Message Body:" + msgBody);
            // emailAPIWS.EmailAPISoapClient emailApi = new emailAPIWS.EmailAPISoapClient();
            AwsEmailAPI.ServiceSoapClient emailApi = new AwsEmailAPI.ServiceSoapClient();
            string errMsg = string.Empty;
            bool sent = false;
            // sent = emailApi.sendEmail(toEmail, "", "", fromEmailAddress, fromEmailAddress, subject, msgBody
            // , "", "", "", false, "", "", true, out errMsg);
            sent = emailApi.sendAWSMail(fromEmailAddress, fromEmailAddress, toEmail, "", "", subject, msgBody);
            if (sent)
            {
                msg = errMsg;
                writeLog("Return ture email was sent" + msg);
                return true;
            }
            else
            {
                writeLog("Email not sent");
                msg = errMsg;
                return false;
            }
        }
        catch (Exception ex)
        {
            writeLog("Exception Error in sending Email" + ex.Message);
            msg = ex.Message;
            return false;
        }
    }

    public async Task<InquiryEbaResponse> GetInquiryResponseForFtthOrWtth(string url, string mobileNumber)
    {
        Token = GetOAuthToken();
        var channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
        var model = new InquiryRequest(Token.Token, mobileNumber, channel);
        var json = JsonConvert.SerializeObject(model);
        var response = Utils.PostEba(json, url);

        writeLog("Eba inquriy response for FTTHORWTTX :" + response);

        if (string.IsNullOrEmpty(response)) return null;
        return JsonConvert.DeserializeObject<InquiryEbaResponse>(response);
    }
    
    public async Task<ConfirmResponse> GetConfirmResponseForFtthOrWtth(string url, string customerID, string amount, string devices, long txnId)
    {
        Token = GetOAuthToken();
        var channel = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
        var channelRefId = channel + txnId.ToString();
        var model = new ConfirmRequest(Token.Token, channel, channelRefId, customerID, amount, devices);
        var json = JsonConvert.SerializeObject(model);
        var response = Utils.PostEba(json, url);

        writeLog("Eba confirm response for FTTHORWTTX :" + response);

        if (string.IsNullOrEmpty(response)) return null;
        return JsonConvert.DeserializeObject<ConfirmResponse>(response);
    }

    public string ReplaceAmpersandString(string str)
    {
        if (str.Contains("&"))
        {
            str = str.Replace("&", "&amp");
        }

        return str;
    }

    public async Task<InquiryMptDataPackageResponse> GetDataPackages()
    {
        try
        {
            Token = GetOAuthToken();
            var partnerCode = ConfigurationManager.AppSettings["EsbaChannel"].ToString();
            var billerCode = ConfigurationManager.AppSettings["BillerCode"].ToString();
            var ebaUrl = ConfigurationManager.AppSettings["MptDataPackageInquiryUrl"].ToString();
            var type = ConfigurationManager.AppSettings["Type"].ToString();

            const string jsonData = "{\'Type\':\'\'}";
            var dynamicData = JsonConvert.DeserializeObject<dynamic>(jsonData);
            dynamicData.Type = type;

            var data = JsonConvert.SerializeObject(dynamicData);
            data = data.Replace("\"", "'");
            var model = new InquiryMptDataPackageResquest(Token.Token, partnerCode, billerCode, data);
            var json = JsonConvert.SerializeObject(model);

            var response = Utils.PostEba(json, ebaUrl);

            writeLog("Eba inquriy response for FTTHORWTTX :" + response);

            if (string.IsNullOrEmpty(response)) return null;

            //response = response.Replace(@"\", "");
            //response = response.Replace(@"'", "\"");
            return JsonConvert.DeserializeObject<InquiryMptDataPackageResponse>(response);
        }
        catch (Exception ex)
        {
            return null;
        }
    }
}


#line default
#line hidden
