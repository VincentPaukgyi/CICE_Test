//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace fraudWs {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/fraudWs")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="fraudWs.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        fraudWs.CompositeType GetDataUsingDataContract(fraudWs.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<fraudWs.CompositeType> GetDataUsingDataContractAsync(fraudWs.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckSender", ReplyAction="http://tempuri.org/IService1/CheckSenderResponse")]
        string CheckSender(long txnID, int agentID, string BranchCode, string UserID, decimal Amount, string TopupType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckSender", ReplyAction="http://tempuri.org/IService1/CheckSenderResponse")]
        System.Threading.Tasks.Task<string> CheckSenderAsync(long txnID, int agentID, string BranchCode, string UserID, decimal Amount, string TopupType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckReceiver", ReplyAction="http://tempuri.org/IService1/CheckReceiverResponse")]
        string CheckReceiver(int AgentID, decimal Amount, string TopupType, string TxnID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckReceiver", ReplyAction="http://tempuri.org/IService1/CheckReceiverResponse")]
        System.Threading.Tasks.Task<string> CheckReceiverAsync(int AgentID, decimal Amount, string TopupType, string TxnID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : fraudWs.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<fraudWs.IService1>, fraudWs.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public fraudWs.CompositeType GetDataUsingDataContract(fraudWs.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<fraudWs.CompositeType> GetDataUsingDataContractAsync(fraudWs.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public string CheckSender(long txnID, int agentID, string BranchCode, string UserID, decimal Amount, string TopupType) {
            return base.Channel.CheckSender(txnID, agentID, BranchCode, UserID, Amount, TopupType);
        }
        
        public System.Threading.Tasks.Task<string> CheckSenderAsync(long txnID, int agentID, string BranchCode, string UserID, decimal Amount, string TopupType) {
            return base.Channel.CheckSenderAsync(txnID, agentID, BranchCode, UserID, Amount, TopupType);
        }
        
        public string CheckReceiver(int AgentID, decimal Amount, string TopupType, string TxnID) {
            return base.Channel.CheckReceiver(AgentID, Amount, TopupType, TxnID);
        }
        
        public System.Threading.Tasks.Task<string> CheckReceiverAsync(int AgentID, decimal Amount, string TopupType, string TxnID) {
            return base.Channel.CheckReceiverAsync(AgentID, Amount, TopupType, TxnID);
        }
    }
}
